/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiCallback;
import cisco.com.dnac.v1.api.client.ApiClient;
import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.ApiResponse;
import cisco.com.dnac.v1.api.client.Configuration;
import cisco.com.dnac.v1.api.client.Pair;
import cisco.com.dnac.v1.api.client.ProgressRequestBody;
import cisco.com.dnac.v1.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cisco.com.dnac.v1.api.client.model.CountResult;
import cisco.com.dnac.v1.api.client.model.DiscoveryJobNIOListResult;
import cisco.com.dnac.v1.api.client.model.DiscoveryNIO;
import cisco.com.dnac.v1.api.client.model.DiscoveryNIOListResult;
import cisco.com.dnac.v1.api.client.model.DiscoveryNIOResult;
import cisco.com.dnac.v1.api.client.model.InventoryRequest;
import cisco.com.dnac.v1.api.client.model.NetworkDeviceNIOListResult;
import cisco.com.dnac.v1.api.client.model.SuccessResultList;
import cisco.com.dnac.v1.api.client.model.TaskIdResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiscoveryApi {
    private ApiClient apiClient;

    public DiscoveryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiscoveryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteDiscovery
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDiscoveryCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDiscoveryValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteDiscoveryCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes all discovery
     * Stops all the discoveries and removes them
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult deleteDiscovery() throws ApiException {
        ApiResponse<TaskIdResult> resp = deleteDiscoveryWithHttpInfo();
        return resp.getData();
    }

    /**
     * Deletes all discovery
     * Stops all the discoveries and removes them
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> deleteDiscoveryWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteDiscoveryValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes all discovery (asynchronously)
     * Stops all the discoveries and removes them
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDiscoveryAsync(final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDiscoveryValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDiscoveryById
     * @param id Discovery ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDiscoveryByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDiscoveryByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDiscoveryById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDiscoveryByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes the discovery specified by id
     * Stops the discovery for the given ID and removes it
     * @param id Discovery ID (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult deleteDiscoveryById(String id) throws ApiException {
        ApiResponse<TaskIdResult> resp = deleteDiscoveryByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Deletes the discovery specified by id
     * Stops the discovery for the given ID and removes it
     * @param id Discovery ID (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> deleteDiscoveryByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteDiscoveryByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the discovery specified by id (asynchronously)
     * Stops the discovery for the given ID and removes it
     * @param id Discovery ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDiscoveryByIdAsync(String id, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDiscoveryByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDiscoveryRange
     * @param startIndex Start index (required)
     * @param recordsToDelete Number of records to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDiscoveryRangeCall(Integer startIndex, Integer recordsToDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/${startIndex}/${recordsToDelete}"
            .replaceAll("\\{" + "startIndex" + "\\}", apiClient.escapeString(startIndex.toString()))
            .replaceAll("\\{" + "recordsToDelete" + "\\}", apiClient.escapeString(recordsToDelete.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDiscoveryRangeValidateBeforeCall(Integer startIndex, Integer recordsToDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startIndex' is set
        if (startIndex == null) {
            throw new ApiException("Missing the required parameter 'startIndex' when calling deleteDiscoveryRange(Async)");
        }
        
        // verify the required parameter 'recordsToDelete' is set
        if (recordsToDelete == null) {
            throw new ApiException("Missing the required parameter 'recordsToDelete' when calling deleteDiscoveryRange(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDiscoveryRangeCall(startIndex, recordsToDelete, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes the discovery in the given range
     * Stops discovery for the given range and removes them
     * @param startIndex Start index (required)
     * @param recordsToDelete Number of records to delete (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult deleteDiscoveryRange(Integer startIndex, Integer recordsToDelete) throws ApiException {
        ApiResponse<TaskIdResult> resp = deleteDiscoveryRangeWithHttpInfo(startIndex, recordsToDelete);
        return resp.getData();
    }

    /**
     * Deletes the discovery in the given range
     * Stops discovery for the given range and removes them
     * @param startIndex Start index (required)
     * @param recordsToDelete Number of records to delete (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> deleteDiscoveryRangeWithHttpInfo(Integer startIndex, Integer recordsToDelete) throws ApiException {
        com.squareup.okhttp.Call call = deleteDiscoveryRangeValidateBeforeCall(startIndex, recordsToDelete, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the discovery in the given range (asynchronously)
     * Stops discovery for the given range and removes them
     * @param startIndex Start index (required)
     * @param recordsToDelete Number of records to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDiscoveryRangeAsync(Integer startIndex, Integer recordsToDelete, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDiscoveryRangeValidateBeforeCall(startIndex, recordsToDelete, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscoveryAutoCompleteById
     * @param id id (required)
     * @param taskId taskId (optional)
     * @param ipAddress ipAddress (optional)
     * @param pingStatus pingStatus (optional)
     * @param snmpStatus snmpStatus (optional)
     * @param cliStatus cliStatus (optional)
     * @param netconfStatus netconfStatus (optional)
     * @param httpStatus httpStatus (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryAutoCompleteByIdCall(String id, String taskId, String ipAddress, String pingStatus, String snmpStatus, String cliStatus, String netconfStatus, String httpStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/${id}/autoComplete"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (taskId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));
        if (ipAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ipAddress", ipAddress));
        if (pingStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pingStatus", pingStatus));
        if (snmpStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("snmpStatus", snmpStatus));
        if (cliStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cliStatus", cliStatus));
        if (netconfStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("netconfStatus", netconfStatus));
        if (httpStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("httpStatus", httpStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscoveryAutoCompleteByIdValidateBeforeCall(String id, String taskId, String ipAddress, String pingStatus, String snmpStatus, String cliStatus, String netconfStatus, String httpStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiscoveryAutoCompleteById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDiscoveryAutoCompleteByIdCall(id, taskId, ipAddress, pingStatus, snmpStatus, cliStatus, netconfStatus, httpStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve autoComplete values from a discovery based on id
     * Gets the autoComplete values from a discovery job
     * @param id id (required)
     * @param taskId taskId (optional)
     * @param ipAddress ipAddress (optional)
     * @param pingStatus pingStatus (optional)
     * @param snmpStatus snmpStatus (optional)
     * @param cliStatus cliStatus (optional)
     * @param netconfStatus netconfStatus (optional)
     * @param httpStatus httpStatus (optional)
     * @return SuccessResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResultList getDiscoveryAutoCompleteById(String id, String taskId, String ipAddress, String pingStatus, String snmpStatus, String cliStatus, String netconfStatus, String httpStatus) throws ApiException {
        ApiResponse<SuccessResultList> resp = getDiscoveryAutoCompleteByIdWithHttpInfo(id, taskId, ipAddress, pingStatus, snmpStatus, cliStatus, netconfStatus, httpStatus);
        return resp.getData();
    }

    /**
     * Retrieve autoComplete values from a discovery based on id
     * Gets the autoComplete values from a discovery job
     * @param id id (required)
     * @param taskId taskId (optional)
     * @param ipAddress ipAddress (optional)
     * @param pingStatus pingStatus (optional)
     * @param snmpStatus snmpStatus (optional)
     * @param cliStatus cliStatus (optional)
     * @param netconfStatus netconfStatus (optional)
     * @param httpStatus httpStatus (optional)
     * @return ApiResponse&lt;SuccessResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResultList> getDiscoveryAutoCompleteByIdWithHttpInfo(String id, String taskId, String ipAddress, String pingStatus, String snmpStatus, String cliStatus, String netconfStatus, String httpStatus) throws ApiException {
        com.squareup.okhttp.Call call = getDiscoveryAutoCompleteByIdValidateBeforeCall(id, taskId, ipAddress, pingStatus, snmpStatus, cliStatus, netconfStatus, httpStatus, null, null);
        Type localVarReturnType = new TypeToken<SuccessResultList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve autoComplete values from a discovery based on id (asynchronously)
     * Gets the autoComplete values from a discovery job
     * @param id id (required)
     * @param taskId taskId (optional)
     * @param ipAddress ipAddress (optional)
     * @param pingStatus pingStatus (optional)
     * @param snmpStatus snmpStatus (optional)
     * @param cliStatus cliStatus (optional)
     * @param netconfStatus netconfStatus (optional)
     * @param httpStatus httpStatus (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryAutoCompleteByIdAsync(String id, String taskId, String ipAddress, String pingStatus, String snmpStatus, String cliStatus, String netconfStatus, String httpStatus, final ApiCallback<SuccessResultList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscoveryAutoCompleteByIdValidateBeforeCall(id, taskId, ipAddress, pingStatus, snmpStatus, cliStatus, netconfStatus, httpStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResultList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscoveryById
     * @param id Discovery ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscoveryByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiscoveryById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDiscoveryByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the discovery specified by id
     * Gets discovery by ID
     * @param id Discovery ID (required)
     * @return DiscoveryNIOResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscoveryNIOResult getDiscoveryById(String id) throws ApiException {
        ApiResponse<DiscoveryNIOResult> resp = getDiscoveryByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieves the discovery specified by id
     * Gets discovery by ID
     * @param id Discovery ID (required)
     * @return ApiResponse&lt;DiscoveryNIOResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscoveryNIOResult> getDiscoveryByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getDiscoveryByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<DiscoveryNIOResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the discovery specified by id (asynchronously)
     * Gets discovery by ID
     * @param id Discovery ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryByIdAsync(String id, final ApiCallback<DiscoveryNIOResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscoveryByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiscoveryNIOResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscoveryCount
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryCountCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscoveryCountValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDiscoveryCountCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the number of discoveries
     * Gets the count of all available discovery jobs
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountResult getDiscoveryCount() throws ApiException {
        ApiResponse<CountResult> resp = getDiscoveryCountWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the number of discoveries
     * Gets the count of all available discovery jobs
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountResult> getDiscoveryCountWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getDiscoveryCountValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the number of discoveries (asynchronously)
     * Gets the count of all available discovery jobs
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryCountAsync(final ApiCallback<CountResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscoveryCountValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscoveryJob
     * @param ipAddress ipAddress (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param name name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryJobCall(String ipAddress, Integer offset, Integer limit, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/job";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (ipAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ipAddress", ipAddress));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscoveryJobValidateBeforeCall(String ipAddress, Integer offset, Integer limit, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling getDiscoveryJob(Async)");
        }
        

        com.squareup.okhttp.Call call = getDiscoveryJobCall(ipAddress, offset, limit, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the list of discovery jobs for the given IP
     * Gets the list of discovery jobs for the given IP
     * @param ipAddress ipAddress (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param name name (optional)
     * @return DiscoveryJobNIOListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscoveryJobNIOListResult getDiscoveryJob(String ipAddress, Integer offset, Integer limit, String name) throws ApiException {
        ApiResponse<DiscoveryJobNIOListResult> resp = getDiscoveryJobWithHttpInfo(ipAddress, offset, limit, name);
        return resp.getData();
    }

    /**
     * Retrieves the list of discovery jobs for the given IP
     * Gets the list of discovery jobs for the given IP
     * @param ipAddress ipAddress (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param name name (optional)
     * @return ApiResponse&lt;DiscoveryJobNIOListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscoveryJobNIOListResult> getDiscoveryJobWithHttpInfo(String ipAddress, Integer offset, Integer limit, String name) throws ApiException {
        com.squareup.okhttp.Call call = getDiscoveryJobValidateBeforeCall(ipAddress, offset, limit, name, null, null);
        Type localVarReturnType = new TypeToken<DiscoveryJobNIOListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the list of discovery jobs for the given IP (asynchronously)
     * Gets the list of discovery jobs for the given IP
     * @param ipAddress ipAddress (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param name name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryJobAsync(String ipAddress, Integer offset, Integer limit, String name, final ApiCallback<DiscoveryJobNIOListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscoveryJobValidateBeforeCall(ipAddress, offset, limit, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiscoveryJobNIOListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscoveryJobById
     * @param id Discovery ID (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param ipAddress ipAddress (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryJobByIdCall(String id, Integer offset, Integer limit, String ipAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/${id}/job"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (ipAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ipAddress", ipAddress));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscoveryJobByIdValidateBeforeCall(String id, Integer offset, Integer limit, String ipAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiscoveryJobById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDiscoveryJobByIdCall(id, offset, limit, ipAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves list of discovery jobs for the specified discovery id
     * Gets the list of discovery jobs for the given id. The result can optionally be filtered based on IP
     * @param id Discovery ID (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param ipAddress ipAddress (optional)
     * @return DiscoveryJobNIOListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscoveryJobNIOListResult getDiscoveryJobById(String id, Integer offset, Integer limit, String ipAddress) throws ApiException {
        ApiResponse<DiscoveryJobNIOListResult> resp = getDiscoveryJobByIdWithHttpInfo(id, offset, limit, ipAddress);
        return resp.getData();
    }

    /**
     * Retrieves list of discovery jobs for the specified discovery id
     * Gets the list of discovery jobs for the given id. The result can optionally be filtered based on IP
     * @param id Discovery ID (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param ipAddress ipAddress (optional)
     * @return ApiResponse&lt;DiscoveryJobNIOListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscoveryJobNIOListResult> getDiscoveryJobByIdWithHttpInfo(String id, Integer offset, Integer limit, String ipAddress) throws ApiException {
        com.squareup.okhttp.Call call = getDiscoveryJobByIdValidateBeforeCall(id, offset, limit, ipAddress, null, null);
        Type localVarReturnType = new TypeToken<DiscoveryJobNIOListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves list of discovery jobs for the specified discovery id (asynchronously)
     * Gets the list of discovery jobs for the given id. The result can optionally be filtered based on IP
     * @param id Discovery ID (required)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param ipAddress ipAddress (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryJobByIdAsync(String id, Integer offset, Integer limit, String ipAddress, final ApiCallback<DiscoveryJobNIOListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscoveryJobByIdValidateBeforeCall(id, offset, limit, ipAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiscoveryJobNIOListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscoveryNetworkDeviceByIdRange
     * @param id Discovery ID (required)
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @param taskId taskId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryNetworkDeviceByIdRangeCall(String id, Integer startIndex, Integer recordsToReturn, String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/${id}/network-device/${startIndex}/${recordsToReturn}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "startIndex" + "\\}", apiClient.escapeString(startIndex.toString()))
            .replaceAll("\\{" + "recordsToReturn" + "\\}", apiClient.escapeString(recordsToReturn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (taskId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscoveryNetworkDeviceByIdRangeValidateBeforeCall(String id, Integer startIndex, Integer recordsToReturn, String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiscoveryNetworkDeviceByIdRange(Async)");
        }
        
        // verify the required parameter 'startIndex' is set
        if (startIndex == null) {
            throw new ApiException("Missing the required parameter 'startIndex' when calling getDiscoveryNetworkDeviceByIdRange(Async)");
        }
        
        // verify the required parameter 'recordsToReturn' is set
        if (recordsToReturn == null) {
            throw new ApiException("Missing the required parameter 'recordsToReturn' when calling getDiscoveryNetworkDeviceByIdRange(Async)");
        }
        

        com.squareup.okhttp.Call call = getDiscoveryNetworkDeviceByIdRangeCall(id, startIndex, recordsToReturn, taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the range of network devices discovered for the given discovery
     * Gets the network devices discovered for the given discovery and for the given range. The maximum number of records that could be retrieved is 500
     * @param id Discovery ID (required)
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @param taskId taskId (optional)
     * @return NetworkDeviceNIOListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkDeviceNIOListResult getDiscoveryNetworkDeviceByIdRange(String id, Integer startIndex, Integer recordsToReturn, String taskId) throws ApiException {
        ApiResponse<NetworkDeviceNIOListResult> resp = getDiscoveryNetworkDeviceByIdRangeWithHttpInfo(id, startIndex, recordsToReturn, taskId);
        return resp.getData();
    }

    /**
     * Retrieves the range of network devices discovered for the given discovery
     * Gets the network devices discovered for the given discovery and for the given range. The maximum number of records that could be retrieved is 500
     * @param id Discovery ID (required)
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @param taskId taskId (optional)
     * @return ApiResponse&lt;NetworkDeviceNIOListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkDeviceNIOListResult> getDiscoveryNetworkDeviceByIdRangeWithHttpInfo(String id, Integer startIndex, Integer recordsToReturn, String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getDiscoveryNetworkDeviceByIdRangeValidateBeforeCall(id, startIndex, recordsToReturn, taskId, null, null);
        Type localVarReturnType = new TypeToken<NetworkDeviceNIOListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the range of network devices discovered for the given discovery (asynchronously)
     * Gets the network devices discovered for the given discovery and for the given range. The maximum number of records that could be retrieved is 500
     * @param id Discovery ID (required)
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @param taskId taskId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryNetworkDeviceByIdRangeAsync(String id, Integer startIndex, Integer recordsToReturn, String taskId, final ApiCallback<NetworkDeviceNIOListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscoveryNetworkDeviceByIdRangeValidateBeforeCall(id, startIndex, recordsToReturn, taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkDeviceNIOListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscoveryNetworkDeviceCountById
     * @param id Discovery ID (required)
     * @param taskId taskId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryNetworkDeviceCountByIdCall(String id, String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/${id}/network-device/count"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (taskId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscoveryNetworkDeviceCountByIdValidateBeforeCall(String id, String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiscoveryNetworkDeviceCountById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDiscoveryNetworkDeviceCountByIdCall(id, taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the number of network devices discovered in the discovery specified by id
     * Gets the count of network devices discovered in the given discovery
     * @param id Discovery ID (required)
     * @param taskId taskId (optional)
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountResult getDiscoveryNetworkDeviceCountById(String id, String taskId) throws ApiException {
        ApiResponse<CountResult> resp = getDiscoveryNetworkDeviceCountByIdWithHttpInfo(id, taskId);
        return resp.getData();
    }

    /**
     * Retrieves the number of network devices discovered in the discovery specified by id
     * Gets the count of network devices discovered in the given discovery
     * @param id Discovery ID (required)
     * @param taskId taskId (optional)
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountResult> getDiscoveryNetworkDeviceCountByIdWithHttpInfo(String id, String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getDiscoveryNetworkDeviceCountByIdValidateBeforeCall(id, taskId, null, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the number of network devices discovered in the discovery specified by id (asynchronously)
     * Gets the count of network devices discovered in the given discovery
     * @param id Discovery ID (required)
     * @param taskId taskId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryNetworkDeviceCountByIdAsync(String id, String taskId, final ApiCallback<CountResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscoveryNetworkDeviceCountByIdValidateBeforeCall(id, taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscoveryNetworkNetworkDeviceById
     * @param id id (required)
     * @param taskId taskId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryNetworkNetworkDeviceByIdCall(String id, String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/${id}/network-device"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (taskId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscoveryNetworkNetworkDeviceByIdValidateBeforeCall(String id, String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiscoveryNetworkNetworkDeviceById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDiscoveryNetworkNetworkDeviceByIdCall(id, taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the network devices discovered in the discovery specified by id
     * Gets the network devices discovered for the given discovery
     * @param id id (required)
     * @param taskId taskId (optional)
     * @return NetworkDeviceNIOListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkDeviceNIOListResult getDiscoveryNetworkNetworkDeviceById(String id, String taskId) throws ApiException {
        ApiResponse<NetworkDeviceNIOListResult> resp = getDiscoveryNetworkNetworkDeviceByIdWithHttpInfo(id, taskId);
        return resp.getData();
    }

    /**
     * Retrieves the network devices discovered in the discovery specified by id
     * Gets the network devices discovered for the given discovery
     * @param id id (required)
     * @param taskId taskId (optional)
     * @return ApiResponse&lt;NetworkDeviceNIOListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkDeviceNIOListResult> getDiscoveryNetworkNetworkDeviceByIdWithHttpInfo(String id, String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getDiscoveryNetworkNetworkDeviceByIdValidateBeforeCall(id, taskId, null, null);
        Type localVarReturnType = new TypeToken<NetworkDeviceNIOListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the network devices discovered in the discovery specified by id (asynchronously)
     * Gets the network devices discovered for the given discovery
     * @param id id (required)
     * @param taskId taskId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryNetworkNetworkDeviceByIdAsync(String id, String taskId, final ApiCallback<NetworkDeviceNIOListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscoveryNetworkNetworkDeviceByIdValidateBeforeCall(id, taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkDeviceNIOListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscoveryRange
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryRangeCall(Integer startIndex, Integer recordsToReturn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/${startIndex}/${recordsToReturn}"
            .replaceAll("\\{" + "startIndex" + "\\}", apiClient.escapeString(startIndex.toString()))
            .replaceAll("\\{" + "recordsToReturn" + "\\}", apiClient.escapeString(recordsToReturn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscoveryRangeValidateBeforeCall(Integer startIndex, Integer recordsToReturn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startIndex' is set
        if (startIndex == null) {
            throw new ApiException("Missing the required parameter 'startIndex' when calling getDiscoveryRange(Async)");
        }
        
        // verify the required parameter 'recordsToReturn' is set
        if (recordsToReturn == null) {
            throw new ApiException("Missing the required parameter 'recordsToReturn' when calling getDiscoveryRange(Async)");
        }
        

        com.squareup.okhttp.Call call = getDiscoveryRangeCall(startIndex, recordsToReturn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the discovery in the given range
     * Gets the discovery for the range specified
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @return DiscoveryNIOListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscoveryNIOListResult getDiscoveryRange(Integer startIndex, Integer recordsToReturn) throws ApiException {
        ApiResponse<DiscoveryNIOListResult> resp = getDiscoveryRangeWithHttpInfo(startIndex, recordsToReturn);
        return resp.getData();
    }

    /**
     * Retrieves the discovery in the given range
     * Gets the discovery for the range specified
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @return ApiResponse&lt;DiscoveryNIOListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscoveryNIOListResult> getDiscoveryRangeWithHttpInfo(Integer startIndex, Integer recordsToReturn) throws ApiException {
        com.squareup.okhttp.Call call = getDiscoveryRangeValidateBeforeCall(startIndex, recordsToReturn, null, null);
        Type localVarReturnType = new TypeToken<DiscoveryNIOListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the discovery in the given range (asynchronously)
     * Gets the discovery for the range specified
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscoveryRangeAsync(Integer startIndex, Integer recordsToReturn, final ApiCallback<DiscoveryNIOListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscoveryRangeValidateBeforeCall(startIndex, recordsToReturn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DiscoveryNIOListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiscoverySummaryById
     * @param id id (required)
     * @param taskId taskId (optional)
     * @param sortBy sortBy (optional)
     * @param sortOrder sortOrder (optional)
     * @param ipAddress ipAddress (optional)
     * @param pingStatus pingStatus (optional)
     * @param snmpStatus snmpStatus (optional)
     * @param cliStatus cliStatus (optional)
     * @param netconfStatus netconfStatus (optional)
     * @param httpStatus httpStatus (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscoverySummaryByIdCall(String id, String taskId, String sortBy, String sortOrder, List<String> ipAddress, List<String> pingStatus, List<String> snmpStatus, List<String> cliStatus, List<String> netconfStatus, List<String> httpStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/discovery/${id}/summary"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (taskId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("taskId", taskId));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (ipAddress != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "ipAddress", ipAddress));
        if (pingStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "pingStatus", pingStatus));
        if (snmpStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "snmpStatus", snmpStatus));
        if (cliStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "cliStatus", cliStatus));
        if (netconfStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "netconfStatus", netconfStatus));
        if (httpStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "httpStatus", httpStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiscoverySummaryByIdValidateBeforeCall(String id, String taskId, String sortBy, String sortOrder, List<String> ipAddress, List<String> pingStatus, List<String> snmpStatus, List<String> cliStatus, List<String> netconfStatus, List<String> httpStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDiscoverySummaryById(Async)");
        }
        

        com.squareup.okhttp.Call call = getDiscoverySummaryByIdCall(id, taskId, sortBy, sortOrder, ipAddress, pingStatus, snmpStatus, cliStatus, netconfStatus, httpStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve network devices from a discovery on given filters
     * Gets the network devices from a discovery job based on given filters
     * @param id id (required)
     * @param taskId taskId (optional)
     * @param sortBy sortBy (optional)
     * @param sortOrder sortOrder (optional)
     * @param ipAddress ipAddress (optional)
     * @param pingStatus pingStatus (optional)
     * @param snmpStatus snmpStatus (optional)
     * @param cliStatus cliStatus (optional)
     * @param netconfStatus netconfStatus (optional)
     * @param httpStatus httpStatus (optional)
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountResult getDiscoverySummaryById(String id, String taskId, String sortBy, String sortOrder, List<String> ipAddress, List<String> pingStatus, List<String> snmpStatus, List<String> cliStatus, List<String> netconfStatus, List<String> httpStatus) throws ApiException {
        ApiResponse<CountResult> resp = getDiscoverySummaryByIdWithHttpInfo(id, taskId, sortBy, sortOrder, ipAddress, pingStatus, snmpStatus, cliStatus, netconfStatus, httpStatus);
        return resp.getData();
    }

    /**
     * Retrieve network devices from a discovery on given filters
     * Gets the network devices from a discovery job based on given filters
     * @param id id (required)
     * @param taskId taskId (optional)
     * @param sortBy sortBy (optional)
     * @param sortOrder sortOrder (optional)
     * @param ipAddress ipAddress (optional)
     * @param pingStatus pingStatus (optional)
     * @param snmpStatus snmpStatus (optional)
     * @param cliStatus cliStatus (optional)
     * @param netconfStatus netconfStatus (optional)
     * @param httpStatus httpStatus (optional)
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountResult> getDiscoverySummaryByIdWithHttpInfo(String id, String taskId, String sortBy, String sortOrder, List<String> ipAddress, List<String> pingStatus, List<String> snmpStatus, List<String> cliStatus, List<String> netconfStatus, List<String> httpStatus) throws ApiException {
        com.squareup.okhttp.Call call = getDiscoverySummaryByIdValidateBeforeCall(id, taskId, sortBy, sortOrder, ipAddress, pingStatus, snmpStatus, cliStatus, netconfStatus, httpStatus, null, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve network devices from a discovery on given filters (asynchronously)
     * Gets the network devices from a discovery job based on given filters
     * @param id id (required)
     * @param taskId taskId (optional)
     * @param sortBy sortBy (optional)
     * @param sortOrder sortOrder (optional)
     * @param ipAddress ipAddress (optional)
     * @param pingStatus pingStatus (optional)
     * @param snmpStatus snmpStatus (optional)
     * @param cliStatus cliStatus (optional)
     * @param netconfStatus netconfStatus (optional)
     * @param httpStatus httpStatus (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscoverySummaryByIdAsync(String id, String taskId, String sortBy, String sortOrder, List<String> ipAddress, List<String> pingStatus, List<String> snmpStatus, List<String> cliStatus, List<String> netconfStatus, List<String> httpStatus, final ApiCallback<CountResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscoverySummaryByIdValidateBeforeCall(id, taskId, sortBy, sortOrder, ipAddress, pingStatus, snmpStatus, cliStatus, netconfStatus, httpStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDiscovery
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDiscoveryCall(InventoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/discovery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDiscoveryValidateBeforeCall(InventoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postDiscovery(Async)");
        }
        

        com.squareup.okhttp.Call call = postDiscoveryCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Starts a new discovery process and returns a task-id
     * Initiates discovery with the given parameters
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postDiscovery(InventoryRequest request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postDiscoveryWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Starts a new discovery process and returns a task-id
     * Initiates discovery with the given parameters
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postDiscoveryWithHttpInfo(InventoryRequest request) throws ApiException {
        com.squareup.okhttp.Call call = postDiscoveryValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Starts a new discovery process and returns a task-id (asynchronously)
     * Initiates discovery with the given parameters
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDiscoveryAsync(InventoryRequest request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDiscoveryValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putDiscovery
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putDiscoveryCall(DiscoveryNIO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/discovery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putDiscoveryValidateBeforeCall(DiscoveryNIO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putDiscovery(Async)");
        }
        

        com.squareup.okhttp.Call call = putDiscoveryCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates an existing discovery specified by id - only for starting/stopping the discovery
     * Stops or starts an existing discovery
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putDiscovery(DiscoveryNIO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putDiscoveryWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Updates an existing discovery specified by id - only for starting/stopping the discovery
     * Stops or starts an existing discovery
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putDiscoveryWithHttpInfo(DiscoveryNIO request) throws ApiException {
        com.squareup.okhttp.Call call = putDiscoveryValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an existing discovery specified by id - only for starting/stopping the discovery (asynchronously)
     * Stops or starts an existing discovery
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putDiscoveryAsync(DiscoveryNIO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putDiscoveryValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
