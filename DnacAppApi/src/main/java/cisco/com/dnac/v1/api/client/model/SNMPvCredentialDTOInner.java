/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SNMPvCredentialDTOInner
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-06T09:46:49.053-05:00")
public class SNMPvCredentialDTOInner {
  @SerializedName("authPassword")
  private String authPassword = null;

  /**
   * Gets or Sets authType
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    SHA("SHA"),
    
    MD5("MD5");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String text) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AuthTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("authType")
  private AuthTypeEnum authType = null;

  @SerializedName("comments")
  private String comments = null;

  /**
   * Gets or Sets credentialType
   */
  @JsonAdapter(CredentialTypeEnum.Adapter.class)
  public enum CredentialTypeEnum {
    GLOBAL("GLOBAL"),
    
    APP("APP");

    private String value;

    CredentialTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CredentialTypeEnum fromValue(String text) {
      for (CredentialTypeEnum b : CredentialTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CredentialTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CredentialTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CredentialTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CredentialTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("credentialType")
  private CredentialTypeEnum credentialType = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("instanceTenantId")
  private String instanceTenantId = null;

  @SerializedName("instanceUuid")
  private String instanceUuid = null;

  @SerializedName("privacyPassword")
  private String privacyPassword = null;

  /**
   * Gets or Sets privacyType
   */
  @JsonAdapter(PrivacyTypeEnum.Adapter.class)
  public enum PrivacyTypeEnum {
    DES("DES"),
    
    AES128("AES128");

    private String value;

    PrivacyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivacyTypeEnum fromValue(String text) {
      for (PrivacyTypeEnum b : PrivacyTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PrivacyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivacyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivacyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PrivacyTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("privacyType")
  private PrivacyTypeEnum privacyType = null;

  /**
   * Gets or Sets snmpMode
   */
  @JsonAdapter(SnmpModeEnum.Adapter.class)
  public enum SnmpModeEnum {
    AUTHPRIV("AUTHPRIV"),
    
    AUTHNOPRIV("AUTHNOPRIV"),
    
    NOAUTHNOPRIV("NOAUTHNOPRIV");

    private String value;

    SnmpModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SnmpModeEnum fromValue(String text) {
      for (SnmpModeEnum b : SnmpModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SnmpModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SnmpModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SnmpModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SnmpModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("snmpMode")
  private SnmpModeEnum snmpMode = null;

  @SerializedName("username")
  private String username = null;

  public SNMPvCredentialDTOInner authPassword(String authPassword) {
    this.authPassword = authPassword;
    return this;
  }

   /**
   * Get authPassword
   * @return authPassword
  **/
  @ApiModelProperty(value = "")
  public String getAuthPassword() {
    return authPassword;
  }

  public void setAuthPassword(String authPassword) {
    this.authPassword = authPassword;
  }

  public SNMPvCredentialDTOInner authType(AuthTypeEnum authType) {
    this.authType = authType;
    return this;
  }

   /**
   * Get authType
   * @return authType
  **/
  @ApiModelProperty(value = "")
  public AuthTypeEnum getAuthType() {
    return authType;
  }

  public void setAuthType(AuthTypeEnum authType) {
    this.authType = authType;
  }

  public SNMPvCredentialDTOInner comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @ApiModelProperty(value = "")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public SNMPvCredentialDTOInner credentialType(CredentialTypeEnum credentialType) {
    this.credentialType = credentialType;
    return this;
  }

   /**
   * Get credentialType
   * @return credentialType
  **/
  @ApiModelProperty(value = "")
  public CredentialTypeEnum getCredentialType() {
    return credentialType;
  }

  public void setCredentialType(CredentialTypeEnum credentialType) {
    this.credentialType = credentialType;
  }

  public SNMPvCredentialDTOInner description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public SNMPvCredentialDTOInner id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public SNMPvCredentialDTOInner instanceTenantId(String instanceTenantId) {
    this.instanceTenantId = instanceTenantId;
    return this;
  }

   /**
   * Get instanceTenantId
   * @return instanceTenantId
  **/
  @ApiModelProperty(value = "")
  public String getInstanceTenantId() {
    return instanceTenantId;
  }

  public void setInstanceTenantId(String instanceTenantId) {
    this.instanceTenantId = instanceTenantId;
  }

  public SNMPvCredentialDTOInner instanceUuid(String instanceUuid) {
    this.instanceUuid = instanceUuid;
    return this;
  }

   /**
   * Get instanceUuid
   * @return instanceUuid
  **/
  @ApiModelProperty(value = "")
  public String getInstanceUuid() {
    return instanceUuid;
  }

  public void setInstanceUuid(String instanceUuid) {
    this.instanceUuid = instanceUuid;
  }

  public SNMPvCredentialDTOInner privacyPassword(String privacyPassword) {
    this.privacyPassword = privacyPassword;
    return this;
  }

   /**
   * Get privacyPassword
   * @return privacyPassword
  **/
  @ApiModelProperty(value = "")
  public String getPrivacyPassword() {
    return privacyPassword;
  }

  public void setPrivacyPassword(String privacyPassword) {
    this.privacyPassword = privacyPassword;
  }

  public SNMPvCredentialDTOInner privacyType(PrivacyTypeEnum privacyType) {
    this.privacyType = privacyType;
    return this;
  }

   /**
   * Get privacyType
   * @return privacyType
  **/
  @ApiModelProperty(value = "")
  public PrivacyTypeEnum getPrivacyType() {
    return privacyType;
  }

  public void setPrivacyType(PrivacyTypeEnum privacyType) {
    this.privacyType = privacyType;
  }

  public SNMPvCredentialDTOInner snmpMode(SnmpModeEnum snmpMode) {
    this.snmpMode = snmpMode;
    return this;
  }

   /**
   * Get snmpMode
   * @return snmpMode
  **/
  @ApiModelProperty(value = "")
  public SnmpModeEnum getSnmpMode() {
    return snmpMode;
  }

  public void setSnmpMode(SnmpModeEnum snmpMode) {
    this.snmpMode = snmpMode;
  }

  public SNMPvCredentialDTOInner username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @ApiModelProperty(value = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SNMPvCredentialDTOInner snMPvCredentialDTOInner = (SNMPvCredentialDTOInner) o;
    return Objects.equals(this.authPassword, snMPvCredentialDTOInner.authPassword) &&
        Objects.equals(this.authType, snMPvCredentialDTOInner.authType) &&
        Objects.equals(this.comments, snMPvCredentialDTOInner.comments) &&
        Objects.equals(this.credentialType, snMPvCredentialDTOInner.credentialType) &&
        Objects.equals(this.description, snMPvCredentialDTOInner.description) &&
        Objects.equals(this.id, snMPvCredentialDTOInner.id) &&
        Objects.equals(this.instanceTenantId, snMPvCredentialDTOInner.instanceTenantId) &&
        Objects.equals(this.instanceUuid, snMPvCredentialDTOInner.instanceUuid) &&
        Objects.equals(this.privacyPassword, snMPvCredentialDTOInner.privacyPassword) &&
        Objects.equals(this.privacyType, snMPvCredentialDTOInner.privacyType) &&
        Objects.equals(this.snmpMode, snMPvCredentialDTOInner.snmpMode) &&
        Objects.equals(this.username, snMPvCredentialDTOInner.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authPassword, authType, comments, credentialType, description, id, instanceTenantId, instanceUuid, privacyPassword, privacyType, snmpMode, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SNMPvCredentialDTOInner {\n");
    
    sb.append("    authPassword: ").append(toIndentedString(authPassword)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    credentialType: ").append(toIndentedString(credentialType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceTenantId: ").append(toIndentedString(instanceTenantId)).append("\n");
    sb.append("    instanceUuid: ").append(toIndentedString(instanceUuid)).append("\n");
    sb.append("    privacyPassword: ").append(toIndentedString(privacyPassword)).append("\n");
    sb.append("    privacyType: ").append(toIndentedString(privacyType)).append("\n");
    sb.append("    snmpMode: ").append(toIndentedString(snmpMode)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

