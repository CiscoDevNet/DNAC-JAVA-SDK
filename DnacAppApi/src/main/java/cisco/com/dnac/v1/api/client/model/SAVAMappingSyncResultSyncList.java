/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SAVAMappingSyncResultSyncList
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-06T09:46:49.053-05:00")
public class SAVAMappingSyncResultSyncList {
  @SerializedName("deviceSnList")
  private List<String> deviceSnList = null;

  /**
   * Gets or Sets syncType
   */
  @JsonAdapter(SyncTypeEnum.Adapter.class)
  public enum SyncTypeEnum {
    ADD("Add"),
    
    UPDATE("Update"),
    
    DELETE("Delete"),
    
    MISMATCHERROR("MismatchError");

    private String value;

    SyncTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncTypeEnum fromValue(String text) {
      for (SyncTypeEnum b : SyncTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SyncTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SyncTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("syncType")
  private SyncTypeEnum syncType = null;

  public SAVAMappingSyncResultSyncList deviceSnList(List<String> deviceSnList) {
    this.deviceSnList = deviceSnList;
    return this;
  }

  public SAVAMappingSyncResultSyncList addDeviceSnListItem(String deviceSnListItem) {
    if (this.deviceSnList == null) {
      this.deviceSnList = new ArrayList<>();
    }
    this.deviceSnList.add(deviceSnListItem);
    return this;
  }

   /**
   * Get deviceSnList
   * @return deviceSnList
  **/
  @ApiModelProperty(value = "")
  public List<String> getDeviceSnList() {
    return deviceSnList;
  }

  public void setDeviceSnList(List<String> deviceSnList) {
    this.deviceSnList = deviceSnList;
  }

  public SAVAMappingSyncResultSyncList syncType(SyncTypeEnum syncType) {
    this.syncType = syncType;
    return this;
  }

   /**
   * Get syncType
   * @return syncType
  **/
  @ApiModelProperty(value = "")
  public SyncTypeEnum getSyncType() {
    return syncType;
  }

  public void setSyncType(SyncTypeEnum syncType) {
    this.syncType = syncType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SAVAMappingSyncResultSyncList saVAMappingSyncResultSyncList = (SAVAMappingSyncResultSyncList) o;
    return Objects.equals(this.deviceSnList, saVAMappingSyncResultSyncList.deviceSnList) &&
        Objects.equals(this.syncType, saVAMappingSyncResultSyncList.syncType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceSnList, syncType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SAVAMappingSyncResultSyncList {\n");
    
    sb.append("    deviceSnList: ").append(toIndentedString(deviceSnList)).append("\n");
    sb.append("    syncType: ").append(toIndentedString(syncType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

