/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiCallback;
import cisco.com.dnac.v1.api.client.ApiClient;
import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.ApiResponse;
import cisco.com.dnac.v1.api.client.Configuration;
import cisco.com.dnac.v1.api.client.Pair;
import cisco.com.dnac.v1.api.client.ProgressRequestBody;
import cisco.com.dnac.v1.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cisco.com.dnac.v1.api.client.model.CLICredentialDTO;
import cisco.com.dnac.v1.api.client.model.GlobalCredentialListResult;
import cisco.com.dnac.v1.api.client.model.GlobalCredentialSubTypeResult;
import cisco.com.dnac.v1.api.client.model.HTTPReadCredentialDTO;
import cisco.com.dnac.v1.api.client.model.HTTPWriteCredentialDTO;
import cisco.com.dnac.v1.api.client.model.NetconfCredentialDTO;
import cisco.com.dnac.v1.api.client.model.SNMPvCredentialDTO;
import cisco.com.dnac.v1.api.client.model.SNMPvReadCommunityDTO;
import cisco.com.dnac.v1.api.client.model.SNMPvWriteCommunityDTO;
import cisco.com.dnac.v1.api.client.model.SitesInfoDTO;
import cisco.com.dnac.v1.api.client.model.TaskIdResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlobalCredentialApi {
    private ApiClient apiClient;

    public GlobalCredentialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalCredentialApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteGlobalCredentialByGlobalCredentialId
     * @param globalCredentialId ID of global-credential (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGlobalCredentialByGlobalCredentialIdCall(String globalCredentialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/${globalCredentialId}"
            .replaceAll("\\{" + "globalCredentialId" + "\\}", apiClient.escapeString(globalCredentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGlobalCredentialByGlobalCredentialIdValidateBeforeCall(String globalCredentialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'globalCredentialId' is set
        if (globalCredentialId == null) {
            throw new ApiException("Missing the required parameter 'globalCredentialId' when calling deleteGlobalCredentialByGlobalCredentialId(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGlobalCredentialByGlobalCredentialIdCall(globalCredentialId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves global credential by ID
     * This method is used to delete global credential for the given ID
     * @param globalCredentialId ID of global-credential (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult deleteGlobalCredentialByGlobalCredentialId(String globalCredentialId) throws ApiException {
        ApiResponse<TaskIdResult> resp = deleteGlobalCredentialByGlobalCredentialIdWithHttpInfo(globalCredentialId);
        return resp.getData();
    }

    /**
     * Retrieves global credential by ID
     * This method is used to delete global credential for the given ID
     * @param globalCredentialId ID of global-credential (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> deleteGlobalCredentialByGlobalCredentialIdWithHttpInfo(String globalCredentialId) throws ApiException {
        com.squareup.okhttp.Call call = deleteGlobalCredentialByGlobalCredentialIdValidateBeforeCall(globalCredentialId, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves global credential by ID (asynchronously)
     * This method is used to delete global credential for the given ID
     * @param globalCredentialId ID of global-credential (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGlobalCredentialByGlobalCredentialIdAsync(String globalCredentialId, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGlobalCredentialByGlobalCredentialIdValidateBeforeCall(globalCredentialId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGlobalCredential
     * @param credentialSubType Credential type as CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY / SNMPV3 / HTTP_WRITE / HTTP_READ / NETCONF (optional)
     * @param sortBy sortBy (optional)
     * @param order order (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGlobalCredentialCall(String credentialSubType, String sortBy, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (credentialSubType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("credentialSubType", credentialSubType));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGlobalCredentialValidateBeforeCall(String credentialSubType, String sortBy, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getGlobalCredentialCall(credentialSubType, sortBy, order, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves global credential for the given credential sub type
     * This method is used to get global credential for the given credential sub type
     * @param credentialSubType Credential type as CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY / SNMPV3 / HTTP_WRITE / HTTP_READ / NETCONF (optional)
     * @param sortBy sortBy (optional)
     * @param order order (optional)
     * @return GlobalCredentialListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GlobalCredentialListResult getGlobalCredential(String credentialSubType, String sortBy, String order) throws ApiException {
        ApiResponse<GlobalCredentialListResult> resp = getGlobalCredentialWithHttpInfo(credentialSubType, sortBy, order);
        return resp.getData();
    }

    /**
     * Retrieves global credential for the given credential sub type
     * This method is used to get global credential for the given credential sub type
     * @param credentialSubType Credential type as CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY / SNMPV3 / HTTP_WRITE / HTTP_READ / NETCONF (optional)
     * @param sortBy sortBy (optional)
     * @param order order (optional)
     * @return ApiResponse&lt;GlobalCredentialListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GlobalCredentialListResult> getGlobalCredentialWithHttpInfo(String credentialSubType, String sortBy, String order) throws ApiException {
        com.squareup.okhttp.Call call = getGlobalCredentialValidateBeforeCall(credentialSubType, sortBy, order, null, null);
        Type localVarReturnType = new TypeToken<GlobalCredentialListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves global credential for the given credential sub type (asynchronously)
     * This method is used to get global credential for the given credential sub type
     * @param credentialSubType Credential type as CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY / SNMPV3 / HTTP_WRITE / HTTP_READ / NETCONF (optional)
     * @param sortBy sortBy (optional)
     * @param order order (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGlobalCredentialAsync(String credentialSubType, String sortBy, String order, final ApiCallback<GlobalCredentialListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGlobalCredentialValidateBeforeCall(credentialSubType, sortBy, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GlobalCredentialListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGlobalCredentialById
     * @param id Global Credential ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGlobalCredentialByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGlobalCredentialByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGlobalCredentialById(Async)");
        }
        

        com.squareup.okhttp.Call call = getGlobalCredentialByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves credential sub type for the given credential Id
     * This method is used to get credential sub type for the given Id
     * @param id Global Credential ID (required)
     * @return GlobalCredentialSubTypeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GlobalCredentialSubTypeResult getGlobalCredentialById(String id) throws ApiException {
        ApiResponse<GlobalCredentialSubTypeResult> resp = getGlobalCredentialByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieves credential sub type for the given credential Id
     * This method is used to get credential sub type for the given Id
     * @param id Global Credential ID (required)
     * @return ApiResponse&lt;GlobalCredentialSubTypeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GlobalCredentialSubTypeResult> getGlobalCredentialByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getGlobalCredentialByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<GlobalCredentialSubTypeResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves credential sub type for the given credential Id (asynchronously)
     * This method is used to get credential sub type for the given Id
     * @param id Global Credential ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGlobalCredentialByIdAsync(String id, final ApiCallback<GlobalCredentialSubTypeResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGlobalCredentialByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GlobalCredentialSubTypeResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postGlobalCredentialCli
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialCliCall(CLICredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/cli";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postGlobalCredentialCliValidateBeforeCall(CLICredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postGlobalCredentialCli(Async)");
        }
        

        com.squareup.okhttp.Call call = postGlobalCredentialCliCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates global CLI credential
     * This method is used to add global CLI credential
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postGlobalCredentialCli(CLICredentialDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postGlobalCredentialCliWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Creates global CLI credential
     * This method is used to add global CLI credential
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postGlobalCredentialCliWithHttpInfo(CLICredentialDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postGlobalCredentialCliValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates global CLI credential (asynchronously)
     * This method is used to add global CLI credential
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialCliAsync(CLICredentialDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postGlobalCredentialCliValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postGlobalCredentialHttpRead
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialHttpReadCall(HTTPReadCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/http-read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postGlobalCredentialHttpReadValidateBeforeCall(HTTPReadCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postGlobalCredentialHttpRead(Async)");
        }
        

        com.squareup.okhttp.Call call = postGlobalCredentialHttpReadCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates global HTTP read credentials
     * This method is used to add HTTP read credentials
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postGlobalCredentialHttpRead(HTTPReadCredentialDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postGlobalCredentialHttpReadWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Creates global HTTP read credentials
     * This method is used to add HTTP read credentials
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postGlobalCredentialHttpReadWithHttpInfo(HTTPReadCredentialDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postGlobalCredentialHttpReadValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates global HTTP read credentials (asynchronously)
     * This method is used to add HTTP read credentials
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialHttpReadAsync(HTTPReadCredentialDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postGlobalCredentialHttpReadValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postGlobalCredentialHttpWrite
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialHttpWriteCall(HTTPWriteCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/http-write";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postGlobalCredentialHttpWriteValidateBeforeCall(HTTPWriteCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postGlobalCredentialHttpWrite(Async)");
        }
        

        com.squareup.okhttp.Call call = postGlobalCredentialHttpWriteCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates global HTTP write credentials
     * This method is used to add global HTTP write credentials
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postGlobalCredentialHttpWrite(HTTPWriteCredentialDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postGlobalCredentialHttpWriteWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Creates global HTTP write credentials
     * This method is used to add global HTTP write credentials
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postGlobalCredentialHttpWriteWithHttpInfo(HTTPWriteCredentialDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postGlobalCredentialHttpWriteValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates global HTTP write credentials (asynchronously)
     * This method is used to add global HTTP write credentials
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialHttpWriteAsync(HTTPWriteCredentialDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postGlobalCredentialHttpWriteValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postGlobalCredentialNetconf
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialNetconfCall(NetconfCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/netconf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postGlobalCredentialNetconfValidateBeforeCall(NetconfCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postGlobalCredentialNetconf(Async)");
        }
        

        com.squareup.okhttp.Call call = postGlobalCredentialNetconfCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates global netconf credential
     * This method is used to add global netconf credential
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postGlobalCredentialNetconf(NetconfCredentialDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postGlobalCredentialNetconfWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Creates global netconf credential
     * This method is used to add global netconf credential
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postGlobalCredentialNetconfWithHttpInfo(NetconfCredentialDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postGlobalCredentialNetconfValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates global netconf credential (asynchronously)
     * This method is used to add global netconf credential
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialNetconfAsync(NetconfCredentialDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postGlobalCredentialNetconfValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postGlobalCredentialSnmpv2ReadCommunity
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialSnmpv2ReadCommunityCall(SNMPvReadCommunityDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/snmpv2-read-community";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postGlobalCredentialSnmpv2ReadCommunityValidateBeforeCall(SNMPvReadCommunityDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postGlobalCredentialSnmpv2ReadCommunity(Async)");
        }
        

        com.squareup.okhttp.Call call = postGlobalCredentialSnmpv2ReadCommunityCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates global SNMP read community
     * This method is used to add global SNMP read community
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postGlobalCredentialSnmpv2ReadCommunity(SNMPvReadCommunityDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postGlobalCredentialSnmpv2ReadCommunityWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Creates global SNMP read community
     * This method is used to add global SNMP read community
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postGlobalCredentialSnmpv2ReadCommunityWithHttpInfo(SNMPvReadCommunityDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postGlobalCredentialSnmpv2ReadCommunityValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates global SNMP read community (asynchronously)
     * This method is used to add global SNMP read community
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialSnmpv2ReadCommunityAsync(SNMPvReadCommunityDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postGlobalCredentialSnmpv2ReadCommunityValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postGlobalCredentialSnmpv2WriteCommunity
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialSnmpv2WriteCommunityCall(SNMPvWriteCommunityDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/snmpv2-write-community";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postGlobalCredentialSnmpv2WriteCommunityValidateBeforeCall(SNMPvWriteCommunityDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postGlobalCredentialSnmpv2WriteCommunity(Async)");
        }
        

        com.squareup.okhttp.Call call = postGlobalCredentialSnmpv2WriteCommunityCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates global SNMP write community
     * This method is used to add global SNMP write community
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postGlobalCredentialSnmpv2WriteCommunity(SNMPvWriteCommunityDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postGlobalCredentialSnmpv2WriteCommunityWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Creates global SNMP write community
     * This method is used to add global SNMP write community
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postGlobalCredentialSnmpv2WriteCommunityWithHttpInfo(SNMPvWriteCommunityDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postGlobalCredentialSnmpv2WriteCommunityValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates global SNMP write community (asynchronously)
     * This method is used to add global SNMP write community
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialSnmpv2WriteCommunityAsync(SNMPvWriteCommunityDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postGlobalCredentialSnmpv2WriteCommunityValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postGlobalCredentialSnmpv3
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialSnmpv3Call(SNMPvCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/snmpv3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postGlobalCredentialSnmpv3ValidateBeforeCall(SNMPvCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postGlobalCredentialSnmpv3(Async)");
        }
        

        com.squareup.okhttp.Call call = postGlobalCredentialSnmpv3Call(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates global SNMPv3 credential
     * This method is used to add global SNMPv3 credential
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postGlobalCredentialSnmpv3(SNMPvCredentialDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postGlobalCredentialSnmpv3WithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Creates global SNMPv3 credential
     * This method is used to add global SNMPv3 credential
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postGlobalCredentialSnmpv3WithHttpInfo(SNMPvCredentialDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postGlobalCredentialSnmpv3ValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates global SNMPv3 credential (asynchronously)
     * This method is used to add global SNMPv3 credential
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postGlobalCredentialSnmpv3Async(SNMPvCredentialDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postGlobalCredentialSnmpv3ValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putGlobalCredentialByGlobalCredentialId
     * @param request request (required)
     * @param globalCredentialId Global credential Uuid (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialByGlobalCredentialIdCall(SitesInfoDTO request, String globalCredentialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/${globalCredentialId}"
            .replaceAll("\\{" + "globalCredentialId" + "\\}", apiClient.escapeString(globalCredentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putGlobalCredentialByGlobalCredentialIdValidateBeforeCall(SitesInfoDTO request, String globalCredentialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putGlobalCredentialByGlobalCredentialId(Async)");
        }
        
        // verify the required parameter 'globalCredentialId' is set
        if (globalCredentialId == null) {
            throw new ApiException("Missing the required parameter 'globalCredentialId' when calling putGlobalCredentialByGlobalCredentialId(Async)");
        }
        

        com.squareup.okhttp.Call call = putGlobalCredentialByGlobalCredentialIdCall(request, globalCredentialId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update global credential for network devices in site(s)
     * Update global credential for network devices in site(s)
     * @param request request (required)
     * @param globalCredentialId Global credential Uuid (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putGlobalCredentialByGlobalCredentialId(SitesInfoDTO request, String globalCredentialId) throws ApiException {
        ApiResponse<TaskIdResult> resp = putGlobalCredentialByGlobalCredentialIdWithHttpInfo(request, globalCredentialId);
        return resp.getData();
    }

    /**
     * Update global credential for network devices in site(s)
     * Update global credential for network devices in site(s)
     * @param request request (required)
     * @param globalCredentialId Global credential Uuid (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putGlobalCredentialByGlobalCredentialIdWithHttpInfo(SitesInfoDTO request, String globalCredentialId) throws ApiException {
        com.squareup.okhttp.Call call = putGlobalCredentialByGlobalCredentialIdValidateBeforeCall(request, globalCredentialId, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update global credential for network devices in site(s) (asynchronously)
     * Update global credential for network devices in site(s)
     * @param request request (required)
     * @param globalCredentialId Global credential Uuid (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialByGlobalCredentialIdAsync(SitesInfoDTO request, String globalCredentialId, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putGlobalCredentialByGlobalCredentialIdValidateBeforeCall(request, globalCredentialId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putGlobalCredentialCli
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialCliCall(CLICredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/cli";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putGlobalCredentialCliValidateBeforeCall(CLICredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putGlobalCredentialCli(Async)");
        }
        

        com.squareup.okhttp.Call call = putGlobalCredentialCliCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates global CLI credential
     * This method is used to update global CLI credential
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putGlobalCredentialCli(CLICredentialDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putGlobalCredentialCliWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Updates global CLI credential
     * This method is used to update global CLI credential
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putGlobalCredentialCliWithHttpInfo(CLICredentialDTO request) throws ApiException {
        com.squareup.okhttp.Call call = putGlobalCredentialCliValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates global CLI credential (asynchronously)
     * This method is used to update global CLI credential
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialCliAsync(CLICredentialDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putGlobalCredentialCliValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putGlobalCredentialHttpRead
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialHttpReadCall(HTTPReadCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/http-read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putGlobalCredentialHttpReadValidateBeforeCall(HTTPReadCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putGlobalCredentialHttpRead(Async)");
        }
        

        com.squareup.okhttp.Call call = putGlobalCredentialHttpReadCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates global HTTP Read credential
     * This method is used to update global HTTP Read credential
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putGlobalCredentialHttpRead(HTTPReadCredentialDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putGlobalCredentialHttpReadWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Updates global HTTP Read credential
     * This method is used to update global HTTP Read credential
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putGlobalCredentialHttpReadWithHttpInfo(HTTPReadCredentialDTO request) throws ApiException {
        com.squareup.okhttp.Call call = putGlobalCredentialHttpReadValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates global HTTP Read credential (asynchronously)
     * This method is used to update global HTTP Read credential
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialHttpReadAsync(HTTPReadCredentialDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putGlobalCredentialHttpReadValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putGlobalCredentialHttpWrite
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialHttpWriteCall(HTTPWriteCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/http-write";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putGlobalCredentialHttpWriteValidateBeforeCall(HTTPWriteCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putGlobalCredentialHttpWrite(Async)");
        }
        

        com.squareup.okhttp.Call call = putGlobalCredentialHttpWriteCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates global HTTP Write credential
     * This method is used to update global HTTP Write credential
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putGlobalCredentialHttpWrite(HTTPWriteCredentialDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putGlobalCredentialHttpWriteWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Updates global HTTP Write credential
     * This method is used to update global HTTP Write credential
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putGlobalCredentialHttpWriteWithHttpInfo(HTTPWriteCredentialDTO request) throws ApiException {
        com.squareup.okhttp.Call call = putGlobalCredentialHttpWriteValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates global HTTP Write credential (asynchronously)
     * This method is used to update global HTTP Write credential
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialHttpWriteAsync(HTTPWriteCredentialDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putGlobalCredentialHttpWriteValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putGlobalCredentialNetconf
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialNetconfCall(NetconfCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/netconf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putGlobalCredentialNetconfValidateBeforeCall(NetconfCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putGlobalCredentialNetconf(Async)");
        }
        

        com.squareup.okhttp.Call call = putGlobalCredentialNetconfCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates global netconf credential
     * This method is used to update global netconf credential
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putGlobalCredentialNetconf(NetconfCredentialDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putGlobalCredentialNetconfWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Updates global netconf credential
     * This method is used to update global netconf credential
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putGlobalCredentialNetconfWithHttpInfo(NetconfCredentialDTO request) throws ApiException {
        com.squareup.okhttp.Call call = putGlobalCredentialNetconfValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates global netconf credential (asynchronously)
     * This method is used to update global netconf credential
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialNetconfAsync(NetconfCredentialDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putGlobalCredentialNetconfValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putGlobalCredentialSnmpv2ReadCommunity
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialSnmpv2ReadCommunityCall(SNMPvReadCommunityDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/snmpv2-read-community";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putGlobalCredentialSnmpv2ReadCommunityValidateBeforeCall(SNMPvReadCommunityDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putGlobalCredentialSnmpv2ReadCommunity(Async)");
        }
        

        com.squareup.okhttp.Call call = putGlobalCredentialSnmpv2ReadCommunityCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates global SNMP read community
     * This method is used to update global SNMP read community
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putGlobalCredentialSnmpv2ReadCommunity(SNMPvReadCommunityDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putGlobalCredentialSnmpv2ReadCommunityWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Updates global SNMP read community
     * This method is used to update global SNMP read community
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putGlobalCredentialSnmpv2ReadCommunityWithHttpInfo(SNMPvReadCommunityDTO request) throws ApiException {
        com.squareup.okhttp.Call call = putGlobalCredentialSnmpv2ReadCommunityValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates global SNMP read community (asynchronously)
     * This method is used to update global SNMP read community
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialSnmpv2ReadCommunityAsync(SNMPvReadCommunityDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putGlobalCredentialSnmpv2ReadCommunityValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putGlobalCredentialSnmpv2WriteCommunity
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialSnmpv2WriteCommunityCall(SNMPvWriteCommunityDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/snmpv2-write-community";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putGlobalCredentialSnmpv2WriteCommunityValidateBeforeCall(SNMPvWriteCommunityDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putGlobalCredentialSnmpv2WriteCommunity(Async)");
        }
        

        com.squareup.okhttp.Call call = putGlobalCredentialSnmpv2WriteCommunityCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates global SNMP write community
     * This method is used to update global SNMP write community
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putGlobalCredentialSnmpv2WriteCommunity(SNMPvWriteCommunityDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putGlobalCredentialSnmpv2WriteCommunityWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Updates global SNMP write community
     * This method is used to update global SNMP write community
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putGlobalCredentialSnmpv2WriteCommunityWithHttpInfo(SNMPvWriteCommunityDTO request) throws ApiException {
        com.squareup.okhttp.Call call = putGlobalCredentialSnmpv2WriteCommunityValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates global SNMP write community (asynchronously)
     * This method is used to update global SNMP write community
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialSnmpv2WriteCommunityAsync(SNMPvWriteCommunityDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putGlobalCredentialSnmpv2WriteCommunityValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putGlobalCredentialSnmpv3
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialSnmpv3Call(SNMPvCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/global-credential/snmpv3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putGlobalCredentialSnmpv3ValidateBeforeCall(SNMPvCredentialDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putGlobalCredentialSnmpv3(Async)");
        }
        

        com.squareup.okhttp.Call call = putGlobalCredentialSnmpv3Call(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates global SNMPv3 credential
     * This method is used to update global SNMPv3 credential
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putGlobalCredentialSnmpv3(SNMPvCredentialDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putGlobalCredentialSnmpv3WithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Updates global SNMPv3 credential
     * This method is used to update global SNMPv3 credential
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putGlobalCredentialSnmpv3WithHttpInfo(SNMPvCredentialDTO request) throws ApiException {
        com.squareup.okhttp.Call call = putGlobalCredentialSnmpv3ValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates global SNMPv3 credential (asynchronously)
     * This method is used to update global SNMPv3 credential
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putGlobalCredentialSnmpv3Async(SNMPvCredentialDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putGlobalCredentialSnmpv3ValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
