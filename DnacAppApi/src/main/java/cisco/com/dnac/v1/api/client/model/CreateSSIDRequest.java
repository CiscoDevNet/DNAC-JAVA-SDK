/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * CreateSSIDRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-06T09:46:49.053-05:00")
public class CreateSSIDRequest {
  @SerializedName("interfaceName")
  private String interfaceName = null;

  @SerializedName("vlanId")
  private BigDecimal vlanId = null;

  @SerializedName("ssidName")
  private String ssidName = null;

  @SerializedName("wlanType")
  private String wlanType = null;

  /**
   * Gets or Sets authenticationType
   */
  @JsonAdapter(AuthenticationTypeEnum.Adapter.class)
  public enum AuthenticationTypeEnum {
    WPA2_ENTERPRISE("wpa2_enterprise"),
    
    WPA2_PERSONAL("wpa2_personal"),
    
    OPEN("open");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationTypeEnum fromValue(String text) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AuthenticationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AuthenticationTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("authenticationType")
  private AuthenticationTypeEnum authenticationType = null;

  @SerializedName("authenticationServer")
  private String authenticationServer = null;

  @SerializedName("passpharse")
  private String passpharse = null;

  /**
   * Gets or Sets trafficType
   */
  @JsonAdapter(TrafficTypeEnum.Adapter.class)
  public enum TrafficTypeEnum {
    VOICEDATA("voicedata"),
    
    DATA("data");

    private String value;

    TrafficTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrafficTypeEnum fromValue(String text) {
      for (TrafficTypeEnum b : TrafficTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TrafficTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrafficTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrafficTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TrafficTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("trafficType")
  private TrafficTypeEnum trafficType = null;

  /**
   * Gets or Sets radioPolicy
   */
  @JsonAdapter(RadioPolicyEnum.Adapter.class)
  public enum RadioPolicyEnum {
    _0("0"),
    
    _1("1");

    private String value;

    RadioPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RadioPolicyEnum fromValue(String text) {
      for (RadioPolicyEnum b : RadioPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RadioPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RadioPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RadioPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RadioPolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("radioPolicy")
  private RadioPolicyEnum radioPolicy = null;

  /**
   * Gets or Sets fastTransition
   */
  @JsonAdapter(FastTransitionEnum.Adapter.class)
  public enum FastTransitionEnum {
    ADAPTIVE("ADAPTIVE"),
    
    ENABLE("ENABLE"),
    
    DISABLE("DISABLE");

    private String value;

    FastTransitionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FastTransitionEnum fromValue(String text) {
      for (FastTransitionEnum b : FastTransitionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FastTransitionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FastTransitionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FastTransitionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FastTransitionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("fastTransition")
  private FastTransitionEnum fastTransition = null;

  @SerializedName("enableFastlane")
  private Boolean enableFastlane = null;

  @SerializedName("enableMACFilering")
  private Boolean enableMACFilering = null;

  @SerializedName("enableBroadcastSSID")
  private Boolean enableBroadcastSSID = null;

  @SerializedName("enableWLANBandSelection")
  private Boolean enableWLANBandSelection = null;

  @SerializedName("wirelessNetworkProfileName")
  private String wirelessNetworkProfileName = null;

  @SerializedName("sitesNameHierarchyToMapTheProfile")
  private String sitesNameHierarchyToMapTheProfile = null;

  @SerializedName("deviceName")
  private String deviceName = null;

  @SerializedName("siteNameHierarchyToMapDevicePhysicalLocation")
  private String siteNameHierarchyToMapDevicePhysicalLocation = null;

  @SerializedName("managedAPLocations")
  private String managedAPLocations = null;

  @SerializedName("interfaceIPAddress")
  private String interfaceIPAddress = null;

  @SerializedName("interfaceNetMaskInCIDRFormat")
  private String interfaceNetMaskInCIDRFormat = null;

  @SerializedName("interfaceGatewayIPAddress")
  private String interfaceGatewayIPAddress = null;

  @SerializedName("interfaceLAGPortNumber")
  private BigDecimal interfaceLAGPortNumber = null;

  @SerializedName("siteNameHierarchyToMapAPPhysicalLocation")
  private String siteNameHierarchyToMapAPPhysicalLocation = null;

  @SerializedName("apNames")
  private String apNames = null;

  /**
   * Gets or Sets rfProfile
   */
  @JsonAdapter(RfProfileEnum.Adapter.class)
  public enum RfProfileEnum {
    LOW("LOW"),
    
    TYPICAL("TYPICAL"),
    
    HIGH("HIGH");

    private String value;

    RfProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RfProfileEnum fromValue(String text) {
      for (RfProfileEnum b : RfProfileEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RfProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RfProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RfProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RfProfileEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("rfProfile")
  private RfProfileEnum rfProfile = null;

  public CreateSSIDRequest interfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
    return this;
  }

   /**
   * Get interfaceName
   * @return interfaceName
  **/
  @ApiModelProperty(value = "")
  public String getInterfaceName() {
    return interfaceName;
  }

  public void setInterfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
  }

  public CreateSSIDRequest vlanId(BigDecimal vlanId) {
    this.vlanId = vlanId;
    return this;
  }

   /**
   * Get vlanId
   * @return vlanId
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getVlanId() {
    return vlanId;
  }

  public void setVlanId(BigDecimal vlanId) {
    this.vlanId = vlanId;
  }

  public CreateSSIDRequest ssidName(String ssidName) {
    this.ssidName = ssidName;
    return this;
  }

   /**
   * Get ssidName
   * @return ssidName
  **/
  @ApiModelProperty(value = "")
  public String getSsidName() {
    return ssidName;
  }

  public void setSsidName(String ssidName) {
    this.ssidName = ssidName;
  }

  public CreateSSIDRequest wlanType(String wlanType) {
    this.wlanType = wlanType;
    return this;
  }

   /**
   * Get wlanType
   * @return wlanType
  **/
  @ApiModelProperty(value = "")
  public String getWlanType() {
    return wlanType;
  }

  public void setWlanType(String wlanType) {
    this.wlanType = wlanType;
  }

  public CreateSSIDRequest authenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

   /**
   * Get authenticationType
   * @return authenticationType
  **/
  @ApiModelProperty(value = "")
  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }

  public CreateSSIDRequest authenticationServer(String authenticationServer) {
    this.authenticationServer = authenticationServer;
    return this;
  }

   /**
   * Get authenticationServer
   * @return authenticationServer
  **/
  @ApiModelProperty(value = "")
  public String getAuthenticationServer() {
    return authenticationServer;
  }

  public void setAuthenticationServer(String authenticationServer) {
    this.authenticationServer = authenticationServer;
  }

  public CreateSSIDRequest passpharse(String passpharse) {
    this.passpharse = passpharse;
    return this;
  }

   /**
   * Get passpharse
   * @return passpharse
  **/
  @ApiModelProperty(value = "")
  public String getPasspharse() {
    return passpharse;
  }

  public void setPasspharse(String passpharse) {
    this.passpharse = passpharse;
  }

  public CreateSSIDRequest trafficType(TrafficTypeEnum trafficType) {
    this.trafficType = trafficType;
    return this;
  }

   /**
   * Get trafficType
   * @return trafficType
  **/
  @ApiModelProperty(value = "")
  public TrafficTypeEnum getTrafficType() {
    return trafficType;
  }

  public void setTrafficType(TrafficTypeEnum trafficType) {
    this.trafficType = trafficType;
  }

  public CreateSSIDRequest radioPolicy(RadioPolicyEnum radioPolicy) {
    this.radioPolicy = radioPolicy;
    return this;
  }

   /**
   * Get radioPolicy
   * @return radioPolicy
  **/
  @ApiModelProperty(value = "")
  public RadioPolicyEnum getRadioPolicy() {
    return radioPolicy;
  }

  public void setRadioPolicy(RadioPolicyEnum radioPolicy) {
    this.radioPolicy = radioPolicy;
  }

  public CreateSSIDRequest fastTransition(FastTransitionEnum fastTransition) {
    this.fastTransition = fastTransition;
    return this;
  }

   /**
   * Get fastTransition
   * @return fastTransition
  **/
  @ApiModelProperty(value = "")
  public FastTransitionEnum getFastTransition() {
    return fastTransition;
  }

  public void setFastTransition(FastTransitionEnum fastTransition) {
    this.fastTransition = fastTransition;
  }

  public CreateSSIDRequest enableFastlane(Boolean enableFastlane) {
    this.enableFastlane = enableFastlane;
    return this;
  }

   /**
   * Get enableFastlane
   * @return enableFastlane
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableFastlane() {
    return enableFastlane;
  }

  public void setEnableFastlane(Boolean enableFastlane) {
    this.enableFastlane = enableFastlane;
  }

  public CreateSSIDRequest enableMACFilering(Boolean enableMACFilering) {
    this.enableMACFilering = enableMACFilering;
    return this;
  }

   /**
   * Get enableMACFilering
   * @return enableMACFilering
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableMACFilering() {
    return enableMACFilering;
  }

  public void setEnableMACFilering(Boolean enableMACFilering) {
    this.enableMACFilering = enableMACFilering;
  }

  public CreateSSIDRequest enableBroadcastSSID(Boolean enableBroadcastSSID) {
    this.enableBroadcastSSID = enableBroadcastSSID;
    return this;
  }

   /**
   * Get enableBroadcastSSID
   * @return enableBroadcastSSID
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableBroadcastSSID() {
    return enableBroadcastSSID;
  }

  public void setEnableBroadcastSSID(Boolean enableBroadcastSSID) {
    this.enableBroadcastSSID = enableBroadcastSSID;
  }

  public CreateSSIDRequest enableWLANBandSelection(Boolean enableWLANBandSelection) {
    this.enableWLANBandSelection = enableWLANBandSelection;
    return this;
  }

   /**
   * Get enableWLANBandSelection
   * @return enableWLANBandSelection
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableWLANBandSelection() {
    return enableWLANBandSelection;
  }

  public void setEnableWLANBandSelection(Boolean enableWLANBandSelection) {
    this.enableWLANBandSelection = enableWLANBandSelection;
  }

  public CreateSSIDRequest wirelessNetworkProfileName(String wirelessNetworkProfileName) {
    this.wirelessNetworkProfileName = wirelessNetworkProfileName;
    return this;
  }

   /**
   * Get wirelessNetworkProfileName
   * @return wirelessNetworkProfileName
  **/
  @ApiModelProperty(value = "")
  public String getWirelessNetworkProfileName() {
    return wirelessNetworkProfileName;
  }

  public void setWirelessNetworkProfileName(String wirelessNetworkProfileName) {
    this.wirelessNetworkProfileName = wirelessNetworkProfileName;
  }

  public CreateSSIDRequest sitesNameHierarchyToMapTheProfile(String sitesNameHierarchyToMapTheProfile) {
    this.sitesNameHierarchyToMapTheProfile = sitesNameHierarchyToMapTheProfile;
    return this;
  }

   /**
   * Get sitesNameHierarchyToMapTheProfile
   * @return sitesNameHierarchyToMapTheProfile
  **/
  @ApiModelProperty(value = "")
  public String getSitesNameHierarchyToMapTheProfile() {
    return sitesNameHierarchyToMapTheProfile;
  }

  public void setSitesNameHierarchyToMapTheProfile(String sitesNameHierarchyToMapTheProfile) {
    this.sitesNameHierarchyToMapTheProfile = sitesNameHierarchyToMapTheProfile;
  }

  public CreateSSIDRequest deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

   /**
   * Get deviceName
   * @return deviceName
  **/
  @ApiModelProperty(value = "")
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }

  public CreateSSIDRequest siteNameHierarchyToMapDevicePhysicalLocation(String siteNameHierarchyToMapDevicePhysicalLocation) {
    this.siteNameHierarchyToMapDevicePhysicalLocation = siteNameHierarchyToMapDevicePhysicalLocation;
    return this;
  }

   /**
   * Get siteNameHierarchyToMapDevicePhysicalLocation
   * @return siteNameHierarchyToMapDevicePhysicalLocation
  **/
  @ApiModelProperty(value = "")
  public String getSiteNameHierarchyToMapDevicePhysicalLocation() {
    return siteNameHierarchyToMapDevicePhysicalLocation;
  }

  public void setSiteNameHierarchyToMapDevicePhysicalLocation(String siteNameHierarchyToMapDevicePhysicalLocation) {
    this.siteNameHierarchyToMapDevicePhysicalLocation = siteNameHierarchyToMapDevicePhysicalLocation;
  }

  public CreateSSIDRequest managedAPLocations(String managedAPLocations) {
    this.managedAPLocations = managedAPLocations;
    return this;
  }

   /**
   * Get managedAPLocations
   * @return managedAPLocations
  **/
  @ApiModelProperty(value = "")
  public String getManagedAPLocations() {
    return managedAPLocations;
  }

  public void setManagedAPLocations(String managedAPLocations) {
    this.managedAPLocations = managedAPLocations;
  }

  public CreateSSIDRequest interfaceIPAddress(String interfaceIPAddress) {
    this.interfaceIPAddress = interfaceIPAddress;
    return this;
  }

   /**
   * Get interfaceIPAddress
   * @return interfaceIPAddress
  **/
  @ApiModelProperty(value = "")
  public String getInterfaceIPAddress() {
    return interfaceIPAddress;
  }

  public void setInterfaceIPAddress(String interfaceIPAddress) {
    this.interfaceIPAddress = interfaceIPAddress;
  }

  public CreateSSIDRequest interfaceNetMaskInCIDRFormat(String interfaceNetMaskInCIDRFormat) {
    this.interfaceNetMaskInCIDRFormat = interfaceNetMaskInCIDRFormat;
    return this;
  }

   /**
   * Get interfaceNetMaskInCIDRFormat
   * @return interfaceNetMaskInCIDRFormat
  **/
  @ApiModelProperty(value = "")
  public String getInterfaceNetMaskInCIDRFormat() {
    return interfaceNetMaskInCIDRFormat;
  }

  public void setInterfaceNetMaskInCIDRFormat(String interfaceNetMaskInCIDRFormat) {
    this.interfaceNetMaskInCIDRFormat = interfaceNetMaskInCIDRFormat;
  }

  public CreateSSIDRequest interfaceGatewayIPAddress(String interfaceGatewayIPAddress) {
    this.interfaceGatewayIPAddress = interfaceGatewayIPAddress;
    return this;
  }

   /**
   * Get interfaceGatewayIPAddress
   * @return interfaceGatewayIPAddress
  **/
  @ApiModelProperty(value = "")
  public String getInterfaceGatewayIPAddress() {
    return interfaceGatewayIPAddress;
  }

  public void setInterfaceGatewayIPAddress(String interfaceGatewayIPAddress) {
    this.interfaceGatewayIPAddress = interfaceGatewayIPAddress;
  }

  public CreateSSIDRequest interfaceLAGPortNumber(BigDecimal interfaceLAGPortNumber) {
    this.interfaceLAGPortNumber = interfaceLAGPortNumber;
    return this;
  }

   /**
   * Get interfaceLAGPortNumber
   * @return interfaceLAGPortNumber
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getInterfaceLAGPortNumber() {
    return interfaceLAGPortNumber;
  }

  public void setInterfaceLAGPortNumber(BigDecimal interfaceLAGPortNumber) {
    this.interfaceLAGPortNumber = interfaceLAGPortNumber;
  }

  public CreateSSIDRequest siteNameHierarchyToMapAPPhysicalLocation(String siteNameHierarchyToMapAPPhysicalLocation) {
    this.siteNameHierarchyToMapAPPhysicalLocation = siteNameHierarchyToMapAPPhysicalLocation;
    return this;
  }

   /**
   * Get siteNameHierarchyToMapAPPhysicalLocation
   * @return siteNameHierarchyToMapAPPhysicalLocation
  **/
  @ApiModelProperty(value = "")
  public String getSiteNameHierarchyToMapAPPhysicalLocation() {
    return siteNameHierarchyToMapAPPhysicalLocation;
  }

  public void setSiteNameHierarchyToMapAPPhysicalLocation(String siteNameHierarchyToMapAPPhysicalLocation) {
    this.siteNameHierarchyToMapAPPhysicalLocation = siteNameHierarchyToMapAPPhysicalLocation;
  }

  public CreateSSIDRequest apNames(String apNames) {
    this.apNames = apNames;
    return this;
  }

   /**
   * Get apNames
   * @return apNames
  **/
  @ApiModelProperty(value = "")
  public String getApNames() {
    return apNames;
  }

  public void setApNames(String apNames) {
    this.apNames = apNames;
  }

  public CreateSSIDRequest rfProfile(RfProfileEnum rfProfile) {
    this.rfProfile = rfProfile;
    return this;
  }

   /**
   * Get rfProfile
   * @return rfProfile
  **/
  @ApiModelProperty(value = "")
  public RfProfileEnum getRfProfile() {
    return rfProfile;
  }

  public void setRfProfile(RfProfileEnum rfProfile) {
    this.rfProfile = rfProfile;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSSIDRequest createSSIDRequest = (CreateSSIDRequest) o;
    return Objects.equals(this.interfaceName, createSSIDRequest.interfaceName) &&
        Objects.equals(this.vlanId, createSSIDRequest.vlanId) &&
        Objects.equals(this.ssidName, createSSIDRequest.ssidName) &&
        Objects.equals(this.wlanType, createSSIDRequest.wlanType) &&
        Objects.equals(this.authenticationType, createSSIDRequest.authenticationType) &&
        Objects.equals(this.authenticationServer, createSSIDRequest.authenticationServer) &&
        Objects.equals(this.passpharse, createSSIDRequest.passpharse) &&
        Objects.equals(this.trafficType, createSSIDRequest.trafficType) &&
        Objects.equals(this.radioPolicy, createSSIDRequest.radioPolicy) &&
        Objects.equals(this.fastTransition, createSSIDRequest.fastTransition) &&
        Objects.equals(this.enableFastlane, createSSIDRequest.enableFastlane) &&
        Objects.equals(this.enableMACFilering, createSSIDRequest.enableMACFilering) &&
        Objects.equals(this.enableBroadcastSSID, createSSIDRequest.enableBroadcastSSID) &&
        Objects.equals(this.enableWLANBandSelection, createSSIDRequest.enableWLANBandSelection) &&
        Objects.equals(this.wirelessNetworkProfileName, createSSIDRequest.wirelessNetworkProfileName) &&
        Objects.equals(this.sitesNameHierarchyToMapTheProfile, createSSIDRequest.sitesNameHierarchyToMapTheProfile) &&
        Objects.equals(this.deviceName, createSSIDRequest.deviceName) &&
        Objects.equals(this.siteNameHierarchyToMapDevicePhysicalLocation, createSSIDRequest.siteNameHierarchyToMapDevicePhysicalLocation) &&
        Objects.equals(this.managedAPLocations, createSSIDRequest.managedAPLocations) &&
        Objects.equals(this.interfaceIPAddress, createSSIDRequest.interfaceIPAddress) &&
        Objects.equals(this.interfaceNetMaskInCIDRFormat, createSSIDRequest.interfaceNetMaskInCIDRFormat) &&
        Objects.equals(this.interfaceGatewayIPAddress, createSSIDRequest.interfaceGatewayIPAddress) &&
        Objects.equals(this.interfaceLAGPortNumber, createSSIDRequest.interfaceLAGPortNumber) &&
        Objects.equals(this.siteNameHierarchyToMapAPPhysicalLocation, createSSIDRequest.siteNameHierarchyToMapAPPhysicalLocation) &&
        Objects.equals(this.apNames, createSSIDRequest.apNames) &&
        Objects.equals(this.rfProfile, createSSIDRequest.rfProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interfaceName, vlanId, ssidName, wlanType, authenticationType, authenticationServer, passpharse, trafficType, radioPolicy, fastTransition, enableFastlane, enableMACFilering, enableBroadcastSSID, enableWLANBandSelection, wirelessNetworkProfileName, sitesNameHierarchyToMapTheProfile, deviceName, siteNameHierarchyToMapDevicePhysicalLocation, managedAPLocations, interfaceIPAddress, interfaceNetMaskInCIDRFormat, interfaceGatewayIPAddress, interfaceLAGPortNumber, siteNameHierarchyToMapAPPhysicalLocation, apNames, rfProfile);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSSIDRequest {\n");
    
    sb.append("    interfaceName: ").append(toIndentedString(interfaceName)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("    ssidName: ").append(toIndentedString(ssidName)).append("\n");
    sb.append("    wlanType: ").append(toIndentedString(wlanType)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    authenticationServer: ").append(toIndentedString(authenticationServer)).append("\n");
    sb.append("    passpharse: ").append(toIndentedString(passpharse)).append("\n");
    sb.append("    trafficType: ").append(toIndentedString(trafficType)).append("\n");
    sb.append("    radioPolicy: ").append(toIndentedString(radioPolicy)).append("\n");
    sb.append("    fastTransition: ").append(toIndentedString(fastTransition)).append("\n");
    sb.append("    enableFastlane: ").append(toIndentedString(enableFastlane)).append("\n");
    sb.append("    enableMACFilering: ").append(toIndentedString(enableMACFilering)).append("\n");
    sb.append("    enableBroadcastSSID: ").append(toIndentedString(enableBroadcastSSID)).append("\n");
    sb.append("    enableWLANBandSelection: ").append(toIndentedString(enableWLANBandSelection)).append("\n");
    sb.append("    wirelessNetworkProfileName: ").append(toIndentedString(wirelessNetworkProfileName)).append("\n");
    sb.append("    sitesNameHierarchyToMapTheProfile: ").append(toIndentedString(sitesNameHierarchyToMapTheProfile)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    siteNameHierarchyToMapDevicePhysicalLocation: ").append(toIndentedString(siteNameHierarchyToMapDevicePhysicalLocation)).append("\n");
    sb.append("    managedAPLocations: ").append(toIndentedString(managedAPLocations)).append("\n");
    sb.append("    interfaceIPAddress: ").append(toIndentedString(interfaceIPAddress)).append("\n");
    sb.append("    interfaceNetMaskInCIDRFormat: ").append(toIndentedString(interfaceNetMaskInCIDRFormat)).append("\n");
    sb.append("    interfaceGatewayIPAddress: ").append(toIndentedString(interfaceGatewayIPAddress)).append("\n");
    sb.append("    interfaceLAGPortNumber: ").append(toIndentedString(interfaceLAGPortNumber)).append("\n");
    sb.append("    siteNameHierarchyToMapAPPhysicalLocation: ").append(toIndentedString(siteNameHierarchyToMapAPPhysicalLocation)).append("\n");
    sb.append("    apNames: ").append(toIndentedString(apNames)).append("\n");
    sb.append("    rfProfile: ").append(toIndentedString(rfProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

