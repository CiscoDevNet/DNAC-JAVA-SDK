/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiCallback;
import cisco.com.dnac.v1.api.client.ApiClient;
import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.ApiResponse;
import cisco.com.dnac.v1.api.client.Configuration;
import cisco.com.dnac.v1.api.client.Pair;
import cisco.com.dnac.v1.api.client.ProgressRequestBody;
import cisco.com.dnac.v1.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cisco.com.dnac.v1.api.client.model.CountResult;
import cisco.com.dnac.v1.api.client.model.TaskDTOListResponse;
import cisco.com.dnac.v1.api.client.model.TaskDTOResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskApi {
    private ApiClient apiClient;

    public TaskApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getTask
     * @param startTime This is the epoch start time from which tasks need to be fetched (optional)
     * @param endTime This is the epoch end time upto which audit records need to be fetched (optional)
     * @param data Fetch tasks that contains this data (optional)
     * @param errorCode Fetch tasks that have this error code (optional)
     * @param serviceType Fetch tasks with this service type (optional)
     * @param username Fetch tasks with this username (optional)
     * @param progress Fetch tasks that contains this progress (optional)
     * @param isError Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param failureReason Fetch tasks that contains this failure reason (optional)
     * @param parentId Fetch tasks that have this parent Id (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param sortBy Sort results by this field (optional)
     * @param order Sort order - asc or dsc (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskCall(String startTime, String endTime, String data, String errorCode, String serviceType, String username, String progress, String isError, String failureReason, String parentId, String offset, String limit, String sortBy, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/task";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (data != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("data", data));
        if (errorCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("errorCode", errorCode));
        if (serviceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceType", serviceType));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (progress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("progress", progress));
        if (isError != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isError", isError));
        if (failureReason != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("failureReason", failureReason));
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parentId", parentId));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskValidateBeforeCall(String startTime, String endTime, String data, String errorCode, String serviceType, String username, String progress, String isError, String failureReason, String parentId, String offset, String limit, String sortBy, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaskCall(startTime, endTime, data, errorCode, serviceType, username, progress, isError, failureReason, parentId, offset, limit, sortBy, order, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get filtered tasks
     * This method is used to retrieve task(s) based on various filters
     * @param startTime This is the epoch start time from which tasks need to be fetched (optional)
     * @param endTime This is the epoch end time upto which audit records need to be fetched (optional)
     * @param data Fetch tasks that contains this data (optional)
     * @param errorCode Fetch tasks that have this error code (optional)
     * @param serviceType Fetch tasks with this service type (optional)
     * @param username Fetch tasks with this username (optional)
     * @param progress Fetch tasks that contains this progress (optional)
     * @param isError Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param failureReason Fetch tasks that contains this failure reason (optional)
     * @param parentId Fetch tasks that have this parent Id (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param sortBy Sort results by this field (optional)
     * @param order Sort order - asc or dsc (optional)
     * @return TaskDTOListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskDTOListResponse getTask(String startTime, String endTime, String data, String errorCode, String serviceType, String username, String progress, String isError, String failureReason, String parentId, String offset, String limit, String sortBy, String order) throws ApiException {
        ApiResponse<TaskDTOListResponse> resp = getTaskWithHttpInfo(startTime, endTime, data, errorCode, serviceType, username, progress, isError, failureReason, parentId, offset, limit, sortBy, order);
        return resp.getData();
    }

    /**
     * Get filtered tasks
     * This method is used to retrieve task(s) based on various filters
     * @param startTime This is the epoch start time from which tasks need to be fetched (optional)
     * @param endTime This is the epoch end time upto which audit records need to be fetched (optional)
     * @param data Fetch tasks that contains this data (optional)
     * @param errorCode Fetch tasks that have this error code (optional)
     * @param serviceType Fetch tasks with this service type (optional)
     * @param username Fetch tasks with this username (optional)
     * @param progress Fetch tasks that contains this progress (optional)
     * @param isError Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param failureReason Fetch tasks that contains this failure reason (optional)
     * @param parentId Fetch tasks that have this parent Id (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param sortBy Sort results by this field (optional)
     * @param order Sort order - asc or dsc (optional)
     * @return ApiResponse&lt;TaskDTOListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskDTOListResponse> getTaskWithHttpInfo(String startTime, String endTime, String data, String errorCode, String serviceType, String username, String progress, String isError, String failureReason, String parentId, String offset, String limit, String sortBy, String order) throws ApiException {
        com.squareup.okhttp.Call call = getTaskValidateBeforeCall(startTime, endTime, data, errorCode, serviceType, username, progress, isError, failureReason, parentId, offset, limit, sortBy, order, null, null);
        Type localVarReturnType = new TypeToken<TaskDTOListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get filtered tasks (asynchronously)
     * This method is used to retrieve task(s) based on various filters
     * @param startTime This is the epoch start time from which tasks need to be fetched (optional)
     * @param endTime This is the epoch end time upto which audit records need to be fetched (optional)
     * @param data Fetch tasks that contains this data (optional)
     * @param errorCode Fetch tasks that have this error code (optional)
     * @param serviceType Fetch tasks with this service type (optional)
     * @param username Fetch tasks with this username (optional)
     * @param progress Fetch tasks that contains this progress (optional)
     * @param isError Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param failureReason Fetch tasks that contains this failure reason (optional)
     * @param parentId Fetch tasks that have this parent Id (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param sortBy Sort results by this field (optional)
     * @param order Sort order - asc or dsc (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskAsync(String startTime, String endTime, String data, String errorCode, String serviceType, String username, String progress, String isError, String failureReason, String parentId, String offset, String limit, String sortBy, String order, final ApiCallback<TaskDTOListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskValidateBeforeCall(startTime, endTime, data, errorCode, serviceType, username, progress, isError, failureReason, parentId, offset, limit, sortBy, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskDTOListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaskByTaskId
     * @param taskId UUID of the Task (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskByTaskIdCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/task/${taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskByTaskIdValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskByTaskId(Async)");
        }
        

        com.squareup.okhttp.Call call = getTaskByTaskIdCall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getTruststoreFileCount
     * This method is used to retrieve a task based on their id
     * @param taskId UUID of the Task (required)
     * @return TaskDTOResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskDTOResponse getTaskByTaskId(String taskId) throws ApiException {
        ApiResponse<TaskDTOResponse> resp = getTaskByTaskIdWithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * getTruststoreFileCount
     * This method is used to retrieve a task based on their id
     * @param taskId UUID of the Task (required)
     * @return ApiResponse&lt;TaskDTOResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskDTOResponse> getTaskByTaskIdWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskByTaskIdValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<TaskDTOResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getTruststoreFileCount (asynchronously)
     * This method is used to retrieve a task based on their id
     * @param taskId UUID of the Task (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskByTaskIdAsync(String taskId, final ApiCallback<TaskDTOResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskByTaskIdValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskDTOResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaskCount
     * @param startTime This is the epoch start time from which tasks need to be fetched (optional)
     * @param endTime This is the epoch end time upto which audit records need to be fetched (optional)
     * @param data Fetch tasks that contains this data (optional)
     * @param errorCode Fetch tasks that have this error code (optional)
     * @param serviceType Fetch tasks with this service type (optional)
     * @param username Fetch tasks with this username (optional)
     * @param progress Fetch tasks that contains this progress (optional)
     * @param isError Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param failureReason Fetch tasks that contains this failure reason (optional)
     * @param parentId Fetch tasks that have this parent Id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskCountCall(String startTime, String endTime, String data, String errorCode, String serviceType, String username, String progress, String isError, String failureReason, String parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/task/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        if (data != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("data", data));
        if (errorCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("errorCode", errorCode));
        if (serviceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceType", serviceType));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (progress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("progress", progress));
        if (isError != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isError", isError));
        if (failureReason != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("failureReason", failureReason));
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parentId", parentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskCountValidateBeforeCall(String startTime, String endTime, String data, String errorCode, String serviceType, String username, String progress, String isError, String failureReason, String parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaskCountCall(startTime, endTime, data, errorCode, serviceType, username, progress, isError, failureReason, parentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get task count
     * This method is used to retrieve task count
     * @param startTime This is the epoch start time from which tasks need to be fetched (optional)
     * @param endTime This is the epoch end time upto which audit records need to be fetched (optional)
     * @param data Fetch tasks that contains this data (optional)
     * @param errorCode Fetch tasks that have this error code (optional)
     * @param serviceType Fetch tasks with this service type (optional)
     * @param username Fetch tasks with this username (optional)
     * @param progress Fetch tasks that contains this progress (optional)
     * @param isError Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param failureReason Fetch tasks that contains this failure reason (optional)
     * @param parentId Fetch tasks that have this parent Id (optional)
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountResult getTaskCount(String startTime, String endTime, String data, String errorCode, String serviceType, String username, String progress, String isError, String failureReason, String parentId) throws ApiException {
        ApiResponse<CountResult> resp = getTaskCountWithHttpInfo(startTime, endTime, data, errorCode, serviceType, username, progress, isError, failureReason, parentId);
        return resp.getData();
    }

    /**
     * Get task count
     * This method is used to retrieve task count
     * @param startTime This is the epoch start time from which tasks need to be fetched (optional)
     * @param endTime This is the epoch end time upto which audit records need to be fetched (optional)
     * @param data Fetch tasks that contains this data (optional)
     * @param errorCode Fetch tasks that have this error code (optional)
     * @param serviceType Fetch tasks with this service type (optional)
     * @param username Fetch tasks with this username (optional)
     * @param progress Fetch tasks that contains this progress (optional)
     * @param isError Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param failureReason Fetch tasks that contains this failure reason (optional)
     * @param parentId Fetch tasks that have this parent Id (optional)
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountResult> getTaskCountWithHttpInfo(String startTime, String endTime, String data, String errorCode, String serviceType, String username, String progress, String isError, String failureReason, String parentId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskCountValidateBeforeCall(startTime, endTime, data, errorCode, serviceType, username, progress, isError, failureReason, parentId, null, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get task count (asynchronously)
     * This method is used to retrieve task count
     * @param startTime This is the epoch start time from which tasks need to be fetched (optional)
     * @param endTime This is the epoch end time upto which audit records need to be fetched (optional)
     * @param data Fetch tasks that contains this data (optional)
     * @param errorCode Fetch tasks that have this error code (optional)
     * @param serviceType Fetch tasks with this service type (optional)
     * @param username Fetch tasks with this username (optional)
     * @param progress Fetch tasks that contains this progress (optional)
     * @param isError Fetch tasks ended as success or failure. Valid values: true, false (optional)
     * @param failureReason Fetch tasks that contains this failure reason (optional)
     * @param parentId Fetch tasks that have this parent Id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskCountAsync(String startTime, String endTime, String data, String errorCode, String serviceType, String username, String progress, String isError, String failureReason, String parentId, final ApiCallback<CountResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskCountValidateBeforeCall(startTime, endTime, data, errorCode, serviceType, username, progress, isError, failureReason, parentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaskOperationByOperationIdRange
     * @param operationId operationId (required)
     * @param offset Index, minimum value is 0 (required)
     * @param limit The maximum value of {limit} supported is 500. &lt;br/&gt; Base 1 indexing for {limit}, minimum value is 1 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskOperationByOperationIdRangeCall(String operationId, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/task/operation/${operationId}/${offset}/${limit}"
            .replaceAll("\\{" + "operationId" + "\\}", apiClient.escapeString(operationId.toString()))
            .replaceAll("\\{" + "offset" + "\\}", apiClient.escapeString(offset.toString()))
            .replaceAll("\\{" + "limit" + "\\}", apiClient.escapeString(limit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskOperationByOperationIdRangeValidateBeforeCall(String operationId, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling getTaskOperationByOperationIdRange(Async)");
        }
        
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling getTaskOperationByOperationIdRange(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling getTaskOperationByOperationIdRange(Async)");
        }
        

        com.squareup.okhttp.Call call = getTaskOperationByOperationIdRangeCall(operationId, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getTaskByOperationId
     * This method is used to find root tasks assoicated to an operationid 
     * @param operationId operationId (required)
     * @param offset Index, minimum value is 0 (required)
     * @param limit The maximum value of {limit} supported is 500. &lt;br/&gt; Base 1 indexing for {limit}, minimum value is 1 (required)
     * @return TaskDTOListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskDTOListResponse getTaskOperationByOperationIdRange(String operationId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<TaskDTOListResponse> resp = getTaskOperationByOperationIdRangeWithHttpInfo(operationId, offset, limit);
        return resp.getData();
    }

    /**
     * getTaskByOperationId
     * This method is used to find root tasks assoicated to an operationid 
     * @param operationId operationId (required)
     * @param offset Index, minimum value is 0 (required)
     * @param limit The maximum value of {limit} supported is 500. &lt;br/&gt; Base 1 indexing for {limit}, minimum value is 1 (required)
     * @return ApiResponse&lt;TaskDTOListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskDTOListResponse> getTaskOperationByOperationIdRangeWithHttpInfo(String operationId, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getTaskOperationByOperationIdRangeValidateBeforeCall(operationId, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<TaskDTOListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getTaskByOperationId (asynchronously)
     * This method is used to find root tasks assoicated to an operationid 
     * @param operationId operationId (required)
     * @param offset Index, minimum value is 0 (required)
     * @param limit The maximum value of {limit} supported is 500. &lt;br/&gt; Base 1 indexing for {limit}, minimum value is 1 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskOperationByOperationIdRangeAsync(String operationId, Integer offset, Integer limit, final ApiCallback<TaskDTOListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskOperationByOperationIdRangeValidateBeforeCall(operationId, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskDTOListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaskTreeByTaskId
     * @param taskId UUID of the Task (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaskTreeByTaskIdCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/task/${taskId}/tree"
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskTreeByTaskIdValidateBeforeCall(String taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskTreeByTaskId(Async)");
        }
        

        com.squareup.okhttp.Call call = getTaskTreeByTaskIdCall(taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Task Tree
     * This method is used to retrieve a task with its children tasks based on their id
     * @param taskId UUID of the Task (required)
     * @return TaskDTOListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskDTOListResponse getTaskTreeByTaskId(String taskId) throws ApiException {
        ApiResponse<TaskDTOListResponse> resp = getTaskTreeByTaskIdWithHttpInfo(taskId);
        return resp.getData();
    }

    /**
     * Get Task Tree
     * This method is used to retrieve a task with its children tasks based on their id
     * @param taskId UUID of the Task (required)
     * @return ApiResponse&lt;TaskDTOListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskDTOListResponse> getTaskTreeByTaskIdWithHttpInfo(String taskId) throws ApiException {
        com.squareup.okhttp.Call call = getTaskTreeByTaskIdValidateBeforeCall(taskId, null, null);
        Type localVarReturnType = new TypeToken<TaskDTOListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Task Tree (asynchronously)
     * This method is used to retrieve a task with its children tasks based on their id
     * @param taskId UUID of the Task (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskTreeByTaskIdAsync(String taskId, final ApiCallback<TaskDTOListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskTreeByTaskIdValidateBeforeCall(taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskDTOListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
