/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiCallback;
import cisco.com.dnac.v1.api.client.ApiClient;
import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.ApiResponse;
import cisco.com.dnac.v1.api.client.Configuration;
import cisco.com.dnac.v1.api.client.Pair;
import cisco.com.dnac.v1.api.client.ProgressRequestBody;
import cisco.com.dnac.v1.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cisco.com.dnac.v1.api.client.model.CollectionProjectDTO;
import cisco.com.dnac.v1.api.client.model.CollectionTemplateInfo;
import cisco.com.dnac.v1.api.client.model.ProjectDTO;
import cisco.com.dnac.v1.api.client.model.TaskIdResult;
import cisco.com.dnac.v1.api.client.model.TemplateDTO;
import cisco.com.dnac.v1.api.client.model.TemplateDeploymentInfo;
import cisco.com.dnac.v1.api.client.model.TemplateDeploymentStatusDTO;
import cisco.com.dnac.v1.api.client.model.TemplatePreviewRequestDTO;
import cisco.com.dnac.v1.api.client.model.TemplatePreviewResponseDTO;
import cisco.com.dnac.v1.api.client.model.TemplateVersionRequestDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplateProgrammerApi {
    private ApiClient apiClient;

    public TemplateProgrammerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateProgrammerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteTemplateProgrammerProjectByProjectId
     * @param projectId projectId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTemplateProgrammerProjectByProjectIdCall(String projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/project/${projectId}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTemplateProgrammerProjectByProjectIdValidateBeforeCall(String projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteTemplateProgrammerProjectByProjectId(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTemplateProgrammerProjectByProjectIdCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes the project
     * Deletes the project
     * @param projectId projectId (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult deleteTemplateProgrammerProjectByProjectId(String projectId) throws ApiException {
        ApiResponse<TaskIdResult> resp = deleteTemplateProgrammerProjectByProjectIdWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Deletes the project
     * Deletes the project
     * @param projectId projectId (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> deleteTemplateProgrammerProjectByProjectIdWithHttpInfo(String projectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTemplateProgrammerProjectByProjectIdValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the project (asynchronously)
     * Deletes the project
     * @param projectId projectId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTemplateProgrammerProjectByProjectIdAsync(String projectId, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTemplateProgrammerProjectByProjectIdValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTemplateProgrammerTemplateByTemplateId
     * @param templateId templateId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTemplateProgrammerTemplateByTemplateIdCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/template/${templateId}"
            .replaceAll("\\{" + "templateId" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTemplateProgrammerTemplateByTemplateIdValidateBeforeCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling deleteTemplateProgrammerTemplateByTemplateId(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTemplateProgrammerTemplateByTemplateIdCall(templateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes the template
     * Deletes the template
     * @param templateId templateId (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult deleteTemplateProgrammerTemplateByTemplateId(String templateId) throws ApiException {
        ApiResponse<TaskIdResult> resp = deleteTemplateProgrammerTemplateByTemplateIdWithHttpInfo(templateId);
        return resp.getData();
    }

    /**
     * Deletes the template
     * Deletes the template
     * @param templateId templateId (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> deleteTemplateProgrammerTemplateByTemplateIdWithHttpInfo(String templateId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTemplateProgrammerTemplateByTemplateIdValidateBeforeCall(templateId, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the template (asynchronously)
     * Deletes the template
     * @param templateId templateId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTemplateProgrammerTemplateByTemplateIdAsync(String templateId, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTemplateProgrammerTemplateByTemplateIdValidateBeforeCall(templateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTemplateProgrammerProject
     * @param name Name of project to be searched (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTemplateProgrammerProjectCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTemplateProgrammerProjectValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTemplateProgrammerProjectCall(name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of projects
     * List the projects
     * @param name Name of project to be searched (optional)
     * @return CollectionProjectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionProjectDTO getTemplateProgrammerProject(String name) throws ApiException {
        ApiResponse<CollectionProjectDTO> resp = getTemplateProgrammerProjectWithHttpInfo(name);
        return resp.getData();
    }

    /**
     * Gets a list of projects
     * List the projects
     * @param name Name of project to be searched (optional)
     * @return ApiResponse&lt;CollectionProjectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionProjectDTO> getTemplateProgrammerProjectWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = getTemplateProgrammerProjectValidateBeforeCall(name, null, null);
        Type localVarReturnType = new TypeToken<CollectionProjectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of projects (asynchronously)
     * List the projects
     * @param name Name of project to be searched (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTemplateProgrammerProjectAsync(String name, final ApiCallback<CollectionProjectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTemplateProgrammerProjectValidateBeforeCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionProjectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTemplateProgrammerTemplate
     * @param projectId projectId (optional)
     * @param softwareType softwareType (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param productFamily productFamily (optional)
     * @param productSeries productSeries (optional)
     * @param productType productType (optional)
     * @param includeHead includeHead (optional)
     * @param filterConflictingTemplates filterConflictingTemplates (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTemplateProgrammerTemplateCall(String projectId, String softwareType, String softwareVersion, String productFamily, String productSeries, String productType, Boolean includeHead, Boolean filterConflictingTemplates, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectId", projectId));
        if (softwareType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("softwareType", softwareType));
        if (softwareVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("softwareVersion", softwareVersion));
        if (productFamily != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("productFamily", productFamily));
        if (productSeries != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("productSeries", productSeries));
        if (productType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("productType", productType));
        if (includeHead != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeHead", includeHead));
        if (filterConflictingTemplates != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filterConflictingTemplates", filterConflictingTemplates));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTemplateProgrammerTemplateValidateBeforeCall(String projectId, String softwareType, String softwareVersion, String productFamily, String productSeries, String productType, Boolean includeHead, Boolean filterConflictingTemplates, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTemplateProgrammerTemplateCall(projectId, softwareType, softwareVersion, productFamily, productSeries, productType, includeHead, filterConflictingTemplates, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the templates available depending on the criteria
     * Gets the templates available depending on the criteria
     * @param projectId projectId (optional)
     * @param softwareType softwareType (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param productFamily productFamily (optional)
     * @param productSeries productSeries (optional)
     * @param productType productType (optional)
     * @param includeHead includeHead (optional)
     * @param filterConflictingTemplates filterConflictingTemplates (optional)
     * @return CollectionTemplateInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionTemplateInfo getTemplateProgrammerTemplate(String projectId, String softwareType, String softwareVersion, String productFamily, String productSeries, String productType, Boolean includeHead, Boolean filterConflictingTemplates) throws ApiException {
        ApiResponse<CollectionTemplateInfo> resp = getTemplateProgrammerTemplateWithHttpInfo(projectId, softwareType, softwareVersion, productFamily, productSeries, productType, includeHead, filterConflictingTemplates);
        return resp.getData();
    }

    /**
     * Gets the templates available depending on the criteria
     * Gets the templates available depending on the criteria
     * @param projectId projectId (optional)
     * @param softwareType softwareType (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param productFamily productFamily (optional)
     * @param productSeries productSeries (optional)
     * @param productType productType (optional)
     * @param includeHead includeHead (optional)
     * @param filterConflictingTemplates filterConflictingTemplates (optional)
     * @return ApiResponse&lt;CollectionTemplateInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionTemplateInfo> getTemplateProgrammerTemplateWithHttpInfo(String projectId, String softwareType, String softwareVersion, String productFamily, String productSeries, String productType, Boolean includeHead, Boolean filterConflictingTemplates) throws ApiException {
        com.squareup.okhttp.Call call = getTemplateProgrammerTemplateValidateBeforeCall(projectId, softwareType, softwareVersion, productFamily, productSeries, productType, includeHead, filterConflictingTemplates, null, null);
        Type localVarReturnType = new TypeToken<CollectionTemplateInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the templates available depending on the criteria (asynchronously)
     * Gets the templates available depending on the criteria
     * @param projectId projectId (optional)
     * @param softwareType softwareType (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param productFamily productFamily (optional)
     * @param productSeries productSeries (optional)
     * @param productType productType (optional)
     * @param includeHead includeHead (optional)
     * @param filterConflictingTemplates filterConflictingTemplates (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTemplateProgrammerTemplateAsync(String projectId, String softwareType, String softwareVersion, String productFamily, String productSeries, String productType, Boolean includeHead, Boolean filterConflictingTemplates, final ApiCallback<CollectionTemplateInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTemplateProgrammerTemplateValidateBeforeCall(projectId, softwareType, softwareVersion, productFamily, productSeries, productType, includeHead, filterConflictingTemplates, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionTemplateInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTemplateProgrammerTemplateDeployStatusByDeploymentId
     * @param deploymentId deploymentId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTemplateProgrammerTemplateDeployStatusByDeploymentIdCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/template/deploy/status/${deploymentId}"
            .replaceAll("\\{" + "deploymentId" + "\\}", apiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTemplateProgrammerTemplateDeployStatusByDeploymentIdValidateBeforeCall(String deploymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling getTemplateProgrammerTemplateDeployStatusByDeploymentId(Async)");
        }
        

        com.squareup.okhttp.Call call = getTemplateProgrammerTemplateDeployStatusByDeploymentIdCall(deploymentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Status of template deployment
     * API to retrieve the status of template deployment.
     * @param deploymentId deploymentId (required)
     * @return TemplateDeploymentStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemplateDeploymentStatusDTO getTemplateProgrammerTemplateDeployStatusByDeploymentId(String deploymentId) throws ApiException {
        ApiResponse<TemplateDeploymentStatusDTO> resp = getTemplateProgrammerTemplateDeployStatusByDeploymentIdWithHttpInfo(deploymentId);
        return resp.getData();
    }

    /**
     * Status of template deployment
     * API to retrieve the status of template deployment.
     * @param deploymentId deploymentId (required)
     * @return ApiResponse&lt;TemplateDeploymentStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemplateDeploymentStatusDTO> getTemplateProgrammerTemplateDeployStatusByDeploymentIdWithHttpInfo(String deploymentId) throws ApiException {
        com.squareup.okhttp.Call call = getTemplateProgrammerTemplateDeployStatusByDeploymentIdValidateBeforeCall(deploymentId, null, null);
        Type localVarReturnType = new TypeToken<TemplateDeploymentStatusDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Status of template deployment (asynchronously)
     * API to retrieve the status of template deployment.
     * @param deploymentId deploymentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTemplateProgrammerTemplateDeployStatusByDeploymentIdAsync(String deploymentId, final ApiCallback<TemplateDeploymentStatusDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTemplateProgrammerTemplateDeployStatusByDeploymentIdValidateBeforeCall(deploymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemplateDeploymentStatusDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTemplateProgrammerTemplateVersionByTempleteId
     * @param templateId templateId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTemplateProgrammerTemplateVersionByTempleteIdCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/template/version/${templateId}"
            .replaceAll("\\{" + "templateId" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTemplateProgrammerTemplateVersionByTempleteIdValidateBeforeCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplateProgrammerTemplateVersionByTempleteId(Async)");
        }
        

        com.squareup.okhttp.Call call = getTemplateProgrammerTemplateVersionByTempleteIdCall(templateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all the versions of a given template
     * Get all the versions of template
     * @param templateId templateId (required)
     * @return CollectionTemplateInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionTemplateInfo getTemplateProgrammerTemplateVersionByTempleteId(String templateId) throws ApiException {
        ApiResponse<CollectionTemplateInfo> resp = getTemplateProgrammerTemplateVersionByTempleteIdWithHttpInfo(templateId);
        return resp.getData();
    }

    /**
     * Gets all the versions of a given template
     * Get all the versions of template
     * @param templateId templateId (required)
     * @return ApiResponse&lt;CollectionTemplateInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionTemplateInfo> getTemplateProgrammerTemplateVersionByTempleteIdWithHttpInfo(String templateId) throws ApiException {
        com.squareup.okhttp.Call call = getTemplateProgrammerTemplateVersionByTempleteIdValidateBeforeCall(templateId, null, null);
        Type localVarReturnType = new TypeToken<CollectionTemplateInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all the versions of a given template (asynchronously)
     * Get all the versions of template
     * @param templateId templateId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTemplateProgrammerTemplateVersionByTempleteIdAsync(String templateId, final ApiCallback<CollectionTemplateInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTemplateProgrammerTemplateVersionByTempleteIdValidateBeforeCall(templateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionTemplateInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTemplateProgrammerProject
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTemplateProgrammerProjectCall(ProjectDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTemplateProgrammerProjectValidateBeforeCall(ProjectDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postTemplateProgrammerProject(Async)");
        }
        

        com.squareup.okhttp.Call call = postTemplateProgrammerProjectCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Project
     * This API is used to create a new project.
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postTemplateProgrammerProject(ProjectDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postTemplateProgrammerProjectWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create Project
     * This API is used to create a new project.
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postTemplateProgrammerProjectWithHttpInfo(ProjectDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postTemplateProgrammerProjectValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Project (asynchronously)
     * This API is used to create a new project.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTemplateProgrammerProjectAsync(ProjectDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTemplateProgrammerProjectValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTemplateProgrammerProjectTemplateByProjectId
     * @param request request (required)
     * @param projectId projectId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTemplateProgrammerProjectTemplateByProjectIdCall(TemplateDTO request, String projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/project/${projectId}/template"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTemplateProgrammerProjectTemplateByProjectIdValidateBeforeCall(TemplateDTO request, String projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postTemplateProgrammerProjectTemplateByProjectId(Async)");
        }
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling postTemplateProgrammerProjectTemplateByProjectId(Async)");
        }
        

        com.squareup.okhttp.Call call = postTemplateProgrammerProjectTemplateByProjectIdCall(request, projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Template
     * API to create a template.
     * @param request request (required)
     * @param projectId projectId (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postTemplateProgrammerProjectTemplateByProjectId(TemplateDTO request, String projectId) throws ApiException {
        ApiResponse<TaskIdResult> resp = postTemplateProgrammerProjectTemplateByProjectIdWithHttpInfo(request, projectId);
        return resp.getData();
    }

    /**
     * Create Template
     * API to create a template.
     * @param request request (required)
     * @param projectId projectId (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postTemplateProgrammerProjectTemplateByProjectIdWithHttpInfo(TemplateDTO request, String projectId) throws ApiException {
        com.squareup.okhttp.Call call = postTemplateProgrammerProjectTemplateByProjectIdValidateBeforeCall(request, projectId, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Template (asynchronously)
     * API to create a template.
     * @param request request (required)
     * @param projectId projectId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTemplateProgrammerProjectTemplateByProjectIdAsync(TemplateDTO request, String projectId, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTemplateProgrammerProjectTemplateByProjectIdValidateBeforeCall(request, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTemplateProgrammerTemplateDeploy
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTemplateProgrammerTemplateDeployCall(TemplateDeploymentInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/template/deploy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTemplateProgrammerTemplateDeployValidateBeforeCall(TemplateDeploymentInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postTemplateProgrammerTemplateDeploy(Async)");
        }
        

        com.squareup.okhttp.Call call = postTemplateProgrammerTemplateDeployCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deploy Template
     * API to deploy a template.
     * @param request request (required)
     * @return TemplateDeploymentStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemplateDeploymentStatusDTO postTemplateProgrammerTemplateDeploy(TemplateDeploymentInfo request) throws ApiException {
        ApiResponse<TemplateDeploymentStatusDTO> resp = postTemplateProgrammerTemplateDeployWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Deploy Template
     * API to deploy a template.
     * @param request request (required)
     * @return ApiResponse&lt;TemplateDeploymentStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemplateDeploymentStatusDTO> postTemplateProgrammerTemplateDeployWithHttpInfo(TemplateDeploymentInfo request) throws ApiException {
        com.squareup.okhttp.Call call = postTemplateProgrammerTemplateDeployValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TemplateDeploymentStatusDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deploy Template (asynchronously)
     * API to deploy a template.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTemplateProgrammerTemplateDeployAsync(TemplateDeploymentInfo request, final ApiCallback<TemplateDeploymentStatusDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTemplateProgrammerTemplateDeployValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemplateDeploymentStatusDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTemplateProgrammerTemplateVersion
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTemplateProgrammerTemplateVersionCall(TemplateVersionRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/template/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTemplateProgrammerTemplateVersionValidateBeforeCall(TemplateVersionRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postTemplateProgrammerTemplateVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = postTemplateProgrammerTemplateVersionCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Version Template
     * API to version the current contents of the template.
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postTemplateProgrammerTemplateVersion(TemplateVersionRequestDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postTemplateProgrammerTemplateVersionWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Version Template
     * API to version the current contents of the template.
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postTemplateProgrammerTemplateVersionWithHttpInfo(TemplateVersionRequestDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postTemplateProgrammerTemplateVersionValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Version Template (asynchronously)
     * API to version the current contents of the template.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTemplateProgrammerTemplateVersionAsync(TemplateVersionRequestDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTemplateProgrammerTemplateVersionValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTemplateProgrammerProject
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTemplateProgrammerProjectCall(ProjectDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTemplateProgrammerProjectValidateBeforeCall(ProjectDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putTemplateProgrammerProject(Async)");
        }
        

        com.squareup.okhttp.Call call = putTemplateProgrammerProjectCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Project
     * This API is used to update an existing project.
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putTemplateProgrammerProject(ProjectDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putTemplateProgrammerProjectWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Update Project
     * This API is used to update an existing project.
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putTemplateProgrammerProjectWithHttpInfo(ProjectDTO request) throws ApiException {
        com.squareup.okhttp.Call call = putTemplateProgrammerProjectValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Project (asynchronously)
     * This API is used to update an existing project.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTemplateProgrammerProjectAsync(ProjectDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTemplateProgrammerProjectValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTemplateProgrammerTemplate
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTemplateProgrammerTemplateCall(TemplateDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTemplateProgrammerTemplateValidateBeforeCall(TemplateDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putTemplateProgrammerTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = putTemplateProgrammerTemplateCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Template
     * API to update a template.
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putTemplateProgrammerTemplate(TemplateDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putTemplateProgrammerTemplateWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Update Template
     * API to update a template.
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putTemplateProgrammerTemplateWithHttpInfo(TemplateDTO request) throws ApiException {
        com.squareup.okhttp.Call call = putTemplateProgrammerTemplateValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Template (asynchronously)
     * API to update a template.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTemplateProgrammerTemplateAsync(TemplateDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTemplateProgrammerTemplateValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTemplateProgrammerTemplatePreview
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTemplateProgrammerTemplatePreviewCall(TemplatePreviewRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/template/preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTemplateProgrammerTemplatePreviewValidateBeforeCall(TemplatePreviewRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putTemplateProgrammerTemplatePreview(Async)");
        }
        

        com.squareup.okhttp.Call call = putTemplateProgrammerTemplatePreviewCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Preview Template
     * API to preview a template.
     * @param request request (required)
     * @return TemplatePreviewResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemplatePreviewResponseDTO putTemplateProgrammerTemplatePreview(TemplatePreviewRequestDTO request) throws ApiException {
        ApiResponse<TemplatePreviewResponseDTO> resp = putTemplateProgrammerTemplatePreviewWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Preview Template
     * API to preview a template.
     * @param request request (required)
     * @return ApiResponse&lt;TemplatePreviewResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemplatePreviewResponseDTO> putTemplateProgrammerTemplatePreviewWithHttpInfo(TemplatePreviewRequestDTO request) throws ApiException {
        com.squareup.okhttp.Call call = putTemplateProgrammerTemplatePreviewValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TemplatePreviewResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preview Template (asynchronously)
     * API to preview a template.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTemplateProgrammerTemplatePreviewAsync(TemplatePreviewRequestDTO request, final ApiCallback<TemplatePreviewResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTemplateProgrammerTemplatePreviewValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemplatePreviewResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for templateProgrammerTemplateByTemplateId
     * @param templateId templateId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call templateProgrammerTemplateByTemplateIdCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/template-programmer/template/${templateId}"
            .replaceAll("\\{" + "templateId" + "\\}", apiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call templateProgrammerTemplateByTemplateIdValidateBeforeCall(String templateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templateProgrammerTemplateByTemplateId(Async)");
        }
        

        com.squareup.okhttp.Call call = templateProgrammerTemplateByTemplateIdCall(templateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets details of a given template
     * Details of the template
     * @param templateId templateId (required)
     * @return TemplateDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemplateDTO templateProgrammerTemplateByTemplateId(String templateId) throws ApiException {
        ApiResponse<TemplateDTO> resp = templateProgrammerTemplateByTemplateIdWithHttpInfo(templateId);
        return resp.getData();
    }

    /**
     * Gets details of a given template
     * Details of the template
     * @param templateId templateId (required)
     * @return ApiResponse&lt;TemplateDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemplateDTO> templateProgrammerTemplateByTemplateIdWithHttpInfo(String templateId) throws ApiException {
        com.squareup.okhttp.Call call = templateProgrammerTemplateByTemplateIdValidateBeforeCall(templateId, null, null);
        Type localVarReturnType = new TypeToken<TemplateDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets details of a given template (asynchronously)
     * Details of the template
     * @param templateId templateId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call templateProgrammerTemplateByTemplateIdAsync(String templateId, final ApiCallback<TemplateDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = templateProgrammerTemplateByTemplateIdValidateBeforeCall(templateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemplateDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
