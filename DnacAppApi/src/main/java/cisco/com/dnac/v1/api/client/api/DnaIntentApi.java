/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiCallback;
import cisco.com.dnac.v1.api.client.ApiClient;
import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.ApiResponse;
import cisco.com.dnac.v1.api.client.Configuration;
import cisco.com.dnac.v1.api.client.Pair;
import cisco.com.dnac.v1.api.client.ProgressRequestBody;
import cisco.com.dnac.v1.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import cisco.com.dnac.v1.api.client.model.ClientDetailResponse;
import cisco.com.dnac.v1.api.client.model.ClientHealthResponse;
import cisco.com.dnac.v1.api.client.model.CreateSSIDRequest;
import cisco.com.dnac.v1.api.client.model.CreateSSIDResponse;
import cisco.com.dnac.v1.api.client.model.DeleteSSIDResponse;
import cisco.com.dnac.v1.api.client.model.NetworkDeviceDetailResponse;
import cisco.com.dnac.v1.api.client.model.SiteHierarchyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DnaIntentApi {
    private ApiClient apiClient;

    public DnaIntentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DnaIntentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteDnaIntentDeleteApplication
     * @param applicationId  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDnaIntentDeleteApplicationCall(String applicationId, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/delete-application";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));
        if (applicationId != null)
        localVarHeaderParams.put("applicationId", apiClient.parameterToString(applicationId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDnaIntentDeleteApplicationValidateBeforeCall(String applicationId, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling deleteDnaIntentDeleteApplication(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDnaIntentDeleteApplicationCall(applicationId, runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Application
     * Invoke the API to delete a custom application
     * @param applicationId  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDnaIntentDeleteApplication(String applicationId, Boolean runsync, BigDecimal timeout) throws ApiException {
        deleteDnaIntentDeleteApplicationWithHttpInfo(applicationId, runsync, timeout);
    }

    /**
     * Delete Application
     * Invoke the API to delete a custom application
     * @param applicationId  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDnaIntentDeleteApplicationWithHttpInfo(String applicationId, Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = deleteDnaIntentDeleteApplicationValidateBeforeCall(applicationId, runsync, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Application (asynchronously)
     * Invoke the API to delete a custom application
     * @param applicationId  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDnaIntentDeleteApplicationAsync(String applicationId, Boolean runsync, BigDecimal timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDnaIntentDeleteApplicationValidateBeforeCall(applicationId, runsync, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDnaIntentDeleteApplicationSet
     * @param applicationSetId  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDnaIntentDeleteApplicationSetCall(String applicationSetId, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/delete-application-set";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));
        if (applicationSetId != null)
        localVarHeaderParams.put("applicationSetId", apiClient.parameterToString(applicationSetId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDnaIntentDeleteApplicationSetValidateBeforeCall(String applicationSetId, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applicationSetId' is set
        if (applicationSetId == null) {
            throw new ApiException("Missing the required parameter 'applicationSetId' when calling deleteDnaIntentDeleteApplicationSet(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDnaIntentDeleteApplicationSetCall(applicationSetId, runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Application Set
     * Invoke the API to delete a custom application
     * @param applicationSetId  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDnaIntentDeleteApplicationSet(String applicationSetId, Boolean runsync, BigDecimal timeout) throws ApiException {
        deleteDnaIntentDeleteApplicationSetWithHttpInfo(applicationSetId, runsync, timeout);
    }

    /**
     * Delete Application Set
     * Invoke the API to delete a custom application
     * @param applicationSetId  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDnaIntentDeleteApplicationSetWithHttpInfo(String applicationSetId, Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = deleteDnaIntentDeleteApplicationSetValidateBeforeCall(applicationSetId, runsync, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Application Set (asynchronously)
     * Invoke the API to delete a custom application
     * @param applicationSetId  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDnaIntentDeleteApplicationSetAsync(String applicationSetId, Boolean runsync, BigDecimal timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDnaIntentDeleteApplicationSetValidateBeforeCall(applicationSetId, runsync, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDnaIntentDeleteSsid
     * @param deviceName  (required)
     * @param wirelessNetworkProfileName  (required)
     * @param ssidName  (required)
     * @param interfaceName  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDnaIntentDeleteSsidCall(String deviceName, String wirelessNetworkProfileName, String ssidName, String interfaceName, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/delete-ssid/${deviceName}/${wirelessNetworkProfileName}/${ssidName}/${interfaceName}"
            .replaceAll("\\{" + "deviceName" + "\\}", apiClient.escapeString(deviceName.toString()))
            .replaceAll("\\{" + "wirelessNetworkProfileName" + "\\}", apiClient.escapeString(wirelessNetworkProfileName.toString()))
            .replaceAll("\\{" + "ssidName" + "\\}", apiClient.escapeString(ssidName.toString()))
            .replaceAll("\\{" + "interfaceName" + "\\}", apiClient.escapeString(interfaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDnaIntentDeleteSsidValidateBeforeCall(String deviceName, String wirelessNetworkProfileName, String ssidName, String interfaceName, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling deleteDnaIntentDeleteSsid(Async)");
        }
        
        // verify the required parameter 'wirelessNetworkProfileName' is set
        if (wirelessNetworkProfileName == null) {
            throw new ApiException("Missing the required parameter 'wirelessNetworkProfileName' when calling deleteDnaIntentDeleteSsid(Async)");
        }
        
        // verify the required parameter 'ssidName' is set
        if (ssidName == null) {
            throw new ApiException("Missing the required parameter 'ssidName' when calling deleteDnaIntentDeleteSsid(Async)");
        }
        
        // verify the required parameter 'interfaceName' is set
        if (interfaceName == null) {
            throw new ApiException("Missing the required parameter 'interfaceName' when calling deleteDnaIntentDeleteSsid(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDnaIntentDeleteSsidCall(deviceName, wirelessNetworkProfileName, ssidName, interfaceName, runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete SSID
     * De-provision WLC, also removes wireless network profile, SSID and dynamic interface
     * @param deviceName  (required)
     * @param wirelessNetworkProfileName  (required)
     * @param ssidName  (required)
     * @param interfaceName  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return DeleteSSIDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteSSIDResponse deleteDnaIntentDeleteSsid(String deviceName, String wirelessNetworkProfileName, String ssidName, String interfaceName, Boolean runsync, BigDecimal timeout) throws ApiException {
        ApiResponse<DeleteSSIDResponse> resp = deleteDnaIntentDeleteSsidWithHttpInfo(deviceName, wirelessNetworkProfileName, ssidName, interfaceName, runsync, timeout);
        return resp.getData();
    }

    /**
     * Delete SSID
     * De-provision WLC, also removes wireless network profile, SSID and dynamic interface
     * @param deviceName  (required)
     * @param wirelessNetworkProfileName  (required)
     * @param ssidName  (required)
     * @param interfaceName  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;DeleteSSIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteSSIDResponse> deleteDnaIntentDeleteSsidWithHttpInfo(String deviceName, String wirelessNetworkProfileName, String ssidName, String interfaceName, Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = deleteDnaIntentDeleteSsidValidateBeforeCall(deviceName, wirelessNetworkProfileName, ssidName, interfaceName, runsync, timeout, null, null);
        Type localVarReturnType = new TypeToken<DeleteSSIDResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete SSID (asynchronously)
     * De-provision WLC, also removes wireless network profile, SSID and dynamic interface
     * @param deviceName  (required)
     * @param wirelessNetworkProfileName  (required)
     * @param ssidName  (required)
     * @param interfaceName  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDnaIntentDeleteSsidAsync(String deviceName, String wirelessNetworkProfileName, String ssidName, String interfaceName, Boolean runsync, BigDecimal timeout, final ApiCallback<DeleteSSIDResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDnaIntentDeleteSsidValidateBeforeCall(deviceName, wirelessNetworkProfileName, ssidName, interfaceName, runsync, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteSSIDResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDnaIntentApplicationCount
     * @param count  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentApplicationCountCall(String count, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/application/count"
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnaIntentApplicationCountValidateBeforeCall(String count, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling getDnaIntentApplicationCount(Async)");
        }
        

        com.squareup.okhttp.Call call = getDnaIntentApplicationCountCall(count, runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Applications Count
     * Invoke the API to return the number of defined applications
     * @param count  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getDnaIntentApplicationCount(String count, Boolean runsync, BigDecimal timeout) throws ApiException {
        getDnaIntentApplicationCountWithHttpInfo(count, runsync, timeout);
    }

    /**
     * Get Applications Count
     * Invoke the API to return the number of defined applications
     * @param count  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getDnaIntentApplicationCountWithHttpInfo(String count, Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getDnaIntentApplicationCountValidateBeforeCall(count, runsync, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Applications Count (asynchronously)
     * Invoke the API to return the number of defined applications
     * @param count  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentApplicationCountAsync(String count, Boolean runsync, BigDecimal timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnaIntentApplicationCountValidateBeforeCall(count, runsync, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDnaIntentApplicationPolicy
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationPolicyNamespace  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentApplicationPolicyCall(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationPolicyNamespace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/application-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));
        if (offset != null)
        localVarHeaderParams.put("offset", apiClient.parameterToString(offset));
        if (limit != null)
        localVarHeaderParams.put("limit", apiClient.parameterToString(limit));
        if (applicationPolicyNamespace != null)
        localVarHeaderParams.put("applicationPolicyNamespace", apiClient.parameterToString(applicationPolicyNamespace));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnaIntentApplicationPolicyValidateBeforeCall(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationPolicyNamespace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDnaIntentApplicationPolicyCall(runsync, timeout, offset, limit, applicationPolicyNamespace, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Application Policies
     * Invoke the API to return all (or specific) application-policy(ies)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationPolicyNamespace  (optional, default to )
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getDnaIntentApplicationPolicy(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationPolicyNamespace) throws ApiException {
        getDnaIntentApplicationPolicyWithHttpInfo(runsync, timeout, offset, limit, applicationPolicyNamespace);
    }

    /**
     * Get Application Policies
     * Invoke the API to return all (or specific) application-policy(ies)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationPolicyNamespace  (optional, default to )
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getDnaIntentApplicationPolicyWithHttpInfo(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationPolicyNamespace) throws ApiException {
        com.squareup.okhttp.Call call = getDnaIntentApplicationPolicyValidateBeforeCall(runsync, timeout, offset, limit, applicationPolicyNamespace, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Application Policies (asynchronously)
     * Invoke the API to return all (or specific) application-policy(ies)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationPolicyNamespace  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentApplicationPolicyAsync(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationPolicyNamespace, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnaIntentApplicationPolicyValidateBeforeCall(runsync, timeout, offset, limit, applicationPolicyNamespace, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDnaIntentApplicationSetCount
     * @param count  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentApplicationSetCountCall(String count, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/application-set/count"
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnaIntentApplicationSetCountValidateBeforeCall(String count, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling getDnaIntentApplicationSetCount(Async)");
        }
        

        com.squareup.okhttp.Call call = getDnaIntentApplicationSetCountCall(count, runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Application Sets Count
     * Invoke the API to return the number of defined application sets
     * @param count  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getDnaIntentApplicationSetCount(String count, Boolean runsync, BigDecimal timeout) throws ApiException {
        getDnaIntentApplicationSetCountWithHttpInfo(count, runsync, timeout);
    }

    /**
     * Get Application Sets Count
     * Invoke the API to return the number of defined application sets
     * @param count  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getDnaIntentApplicationSetCountWithHttpInfo(String count, Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getDnaIntentApplicationSetCountValidateBeforeCall(count, runsync, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Application Sets Count (asynchronously)
     * Invoke the API to return the number of defined application sets
     * @param count  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentApplicationSetCountAsync(String count, Boolean runsync, BigDecimal timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnaIntentApplicationSetCountValidateBeforeCall(count, runsync, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDnaIntentApplicationSets
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationSetName  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentApplicationSetsCall(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationSetName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/application-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));
        if (offset != null)
        localVarHeaderParams.put("offset", apiClient.parameterToString(offset));
        if (limit != null)
        localVarHeaderParams.put("limit", apiClient.parameterToString(limit));
        if (applicationSetName != null)
        localVarHeaderParams.put("applicationSetName", apiClient.parameterToString(applicationSetName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnaIntentApplicationSetsValidateBeforeCall(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationSetName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDnaIntentApplicationSetsCall(runsync, timeout, offset, limit, applicationSetName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Application Sets
     * Invoke the API to return all (or specific) defined application-set(s)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationSetName  (optional, default to )
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getDnaIntentApplicationSets(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationSetName) throws ApiException {
        getDnaIntentApplicationSetsWithHttpInfo(runsync, timeout, offset, limit, applicationSetName);
    }

    /**
     * Get Application Sets
     * Invoke the API to return all (or specific) defined application-set(s)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationSetName  (optional, default to )
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getDnaIntentApplicationSetsWithHttpInfo(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationSetName) throws ApiException {
        com.squareup.okhttp.Call call = getDnaIntentApplicationSetsValidateBeforeCall(runsync, timeout, offset, limit, applicationSetName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Application Sets (asynchronously)
     * Invoke the API to return all (or specific) defined application-set(s)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationSetName  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentApplicationSetsAsync(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationSetName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnaIntentApplicationSetsValidateBeforeCall(runsync, timeout, offset, limit, applicationSetName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDnaIntentApplications
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationName  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentApplicationsCall(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));
        if (offset != null)
        localVarHeaderParams.put("offset", apiClient.parameterToString(offset));
        if (limit != null)
        localVarHeaderParams.put("limit", apiClient.parameterToString(limit));
        if (applicationName != null)
        localVarHeaderParams.put("applicationName", apiClient.parameterToString(applicationName));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnaIntentApplicationsValidateBeforeCall(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDnaIntentApplicationsCall(runsync, timeout, offset, limit, applicationName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Applications
     * Invoke the API to return the list of all (or specific) defined application(s)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationName  (optional, default to )
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getDnaIntentApplications(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationName) throws ApiException {
        getDnaIntentApplicationsWithHttpInfo(runsync, timeout, offset, limit, applicationName);
    }

    /**
     * Get Applications
     * Invoke the API to return the list of all (or specific) defined application(s)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationName  (optional, default to )
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getDnaIntentApplicationsWithHttpInfo(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationName) throws ApiException {
        com.squareup.okhttp.Call call = getDnaIntentApplicationsValidateBeforeCall(runsync, timeout, offset, limit, applicationName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Applications (asynchronously)
     * Invoke the API to return the list of all (or specific) defined application(s)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param offset  (optional, default to 1)
     * @param limit  (optional, default to 500)
     * @param applicationName  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentApplicationsAsync(Boolean runsync, BigDecimal timeout, BigDecimal offset, BigDecimal limit, String applicationName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnaIntentApplicationsValidateBeforeCall(runsync, timeout, offset, limit, applicationName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDnaIntentClieDetail
     * @param timestamp timestamp (required)
     * @param macAddress MAC Address of the client (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentClieDetailCall(String timestamp, String macAddress, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/client-detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (macAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("macAddress", macAddress));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnaIntentClieDetailValidateBeforeCall(String timestamp, String macAddress, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling getDnaIntentClieDetail(Async)");
        }
        
        // verify the required parameter 'macAddress' is set
        if (macAddress == null) {
            throw new ApiException("Missing the required parameter 'macAddress' when calling getDnaIntentClieDetail(Async)");
        }
        

        com.squareup.okhttp.Call call = getDnaIntentClieDetailCall(timestamp, macAddress, runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client Detail
     * Get Client Details for a single client
     * @param timestamp timestamp (required)
     * @param macAddress MAC Address of the client (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ClientDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientDetailResponse getDnaIntentClieDetail(String timestamp, String macAddress, Boolean runsync, BigDecimal timeout) throws ApiException {
        ApiResponse<ClientDetailResponse> resp = getDnaIntentClieDetailWithHttpInfo(timestamp, macAddress, runsync, timeout);
        return resp.getData();
    }

    /**
     * Client Detail
     * Get Client Details for a single client
     * @param timestamp timestamp (required)
     * @param macAddress MAC Address of the client (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;ClientDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientDetailResponse> getDnaIntentClieDetailWithHttpInfo(String timestamp, String macAddress, Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getDnaIntentClieDetailValidateBeforeCall(timestamp, macAddress, runsync, timeout, null, null);
        Type localVarReturnType = new TypeToken<ClientDetailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client Detail (asynchronously)
     * Get Client Details for a single client
     * @param timestamp timestamp (required)
     * @param macAddress MAC Address of the client (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentClieDetailAsync(String timestamp, String macAddress, Boolean runsync, BigDecimal timeout, final ApiCallback<ClientDetailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnaIntentClieDetailValidateBeforeCall(timestamp, macAddress, runsync, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientDetailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDnaIntentClientHealth
     * @param startTime Start Time (required)
     * @param endTime End Time (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentClientHealthCall(String startTime, String endTime, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/client-health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnaIntentClientHealthValidateBeforeCall(String startTime, String endTime, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getDnaIntentClientHealth(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getDnaIntentClientHealth(Async)");
        }
        

        com.squareup.okhttp.Call call = getDnaIntentClientHealthCall(startTime, endTime, runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client Health
     * Get overall Client Health along with beak down on categories of wired and wireless
     * @param startTime Start Time (required)
     * @param endTime End Time (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ClientHealthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientHealthResponse getDnaIntentClientHealth(String startTime, String endTime, Boolean runsync, BigDecimal timeout) throws ApiException {
        ApiResponse<ClientHealthResponse> resp = getDnaIntentClientHealthWithHttpInfo(startTime, endTime, runsync, timeout);
        return resp.getData();
    }

    /**
     * Client Health
     * Get overall Client Health along with beak down on categories of wired and wireless
     * @param startTime Start Time (required)
     * @param endTime End Time (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;ClientHealthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientHealthResponse> getDnaIntentClientHealthWithHttpInfo(String startTime, String endTime, Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getDnaIntentClientHealthValidateBeforeCall(startTime, endTime, runsync, timeout, null, null);
        Type localVarReturnType = new TypeToken<ClientHealthResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client Health (asynchronously)
     * Get overall Client Health along with beak down on categories of wired and wireless
     * @param startTime Start Time (required)
     * @param endTime End Time (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentClientHealthAsync(String startTime, String endTime, Boolean runsync, BigDecimal timeout, final ApiCallback<ClientHealthResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnaIntentClientHealthValidateBeforeCall(startTime, endTime, runsync, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientHealthResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDnaIntentNetworkDeviceDetail
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param timestamp timestamp (optional, default to )
     * @param searchBy MAC Address or UUID or Name of the Device (optional, default to )
     * @param identifier macAddress or uuid or nwDeviceName (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentNetworkDeviceDetailCall(Boolean runsync, BigDecimal timeout, String timestamp, String searchBy, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/network-device-detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));
        if (searchBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchBy", searchBy));
        if (identifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("identifier", identifier));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnaIntentNetworkDeviceDetailValidateBeforeCall(Boolean runsync, BigDecimal timeout, String timestamp, String searchBy, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDnaIntentNetworkDeviceDetailCall(runsync, timeout, timestamp, searchBy, identifier, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Network Device Detail
     * Get Network Device Detail
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param timestamp timestamp (optional, default to )
     * @param searchBy MAC Address or UUID or Name of the Device (optional, default to )
     * @param identifier macAddress or uuid or nwDeviceName (optional, default to )
     * @return NetworkDeviceDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkDeviceDetailResponse getDnaIntentNetworkDeviceDetail(Boolean runsync, BigDecimal timeout, String timestamp, String searchBy, String identifier) throws ApiException {
        ApiResponse<NetworkDeviceDetailResponse> resp = getDnaIntentNetworkDeviceDetailWithHttpInfo(runsync, timeout, timestamp, searchBy, identifier);
        return resp.getData();
    }

    /**
     * Network Device Detail
     * Get Network Device Detail
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param timestamp timestamp (optional, default to )
     * @param searchBy MAC Address or UUID or Name of the Device (optional, default to )
     * @param identifier macAddress or uuid or nwDeviceName (optional, default to )
     * @return ApiResponse&lt;NetworkDeviceDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkDeviceDetailResponse> getDnaIntentNetworkDeviceDetailWithHttpInfo(Boolean runsync, BigDecimal timeout, String timestamp, String searchBy, String identifier) throws ApiException {
        com.squareup.okhttp.Call call = getDnaIntentNetworkDeviceDetailValidateBeforeCall(runsync, timeout, timestamp, searchBy, identifier, null, null);
        Type localVarReturnType = new TypeToken<NetworkDeviceDetailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Network Device Detail (asynchronously)
     * Get Network Device Detail
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param timestamp timestamp (optional, default to )
     * @param searchBy MAC Address or UUID or Name of the Device (optional, default to )
     * @param identifier macAddress or uuid or nwDeviceName (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentNetworkDeviceDetailAsync(Boolean runsync, BigDecimal timeout, String timestamp, String searchBy, String identifier, final ApiCallback<NetworkDeviceDetailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnaIntentNetworkDeviceDetailValidateBeforeCall(runsync, timeout, timestamp, searchBy, identifier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkDeviceDetailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDnaIntentNetworkHealth
     * @param startTime Start Time (required)
     * @param endTime End Time (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentNetworkHealthCall(String startTime, String endTime, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/network-health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnaIntentNetworkHealthValidateBeforeCall(String startTime, String endTime, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getDnaIntentNetworkHealth(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getDnaIntentNetworkHealth(Async)");
        }
        

        com.squareup.okhttp.Call call = getDnaIntentNetworkHealthCall(startTime, endTime, runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Network Health
     * Network Devices and their health by category
     * @param startTime Start Time (required)
     * @param endTime End Time (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getDnaIntentNetworkHealth(String startTime, String endTime, Boolean runsync, BigDecimal timeout) throws ApiException {
        getDnaIntentNetworkHealthWithHttpInfo(startTime, endTime, runsync, timeout);
    }

    /**
     * Network Health
     * Network Devices and their health by category
     * @param startTime Start Time (required)
     * @param endTime End Time (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getDnaIntentNetworkHealthWithHttpInfo(String startTime, String endTime, Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getDnaIntentNetworkHealthValidateBeforeCall(startTime, endTime, runsync, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     * Network Health (asynchronously)
     * Network Devices and their health by category
     * @param startTime Start Time (required)
     * @param endTime End Time (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentNetworkHealthAsync(String startTime, String endTime, Boolean runsync, BigDecimal timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnaIntentNetworkHealthValidateBeforeCall(startTime, endTime, runsync, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDnaIntentSiteHierarchy
     * @param timestamp Timestamp  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentSiteHierarchyCall(String timestamp, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/site-hierarchy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDnaIntentSiteHierarchyValidateBeforeCall(String timestamp, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling getDnaIntentSiteHierarchy(Async)");
        }
        

        com.squareup.okhttp.Call call = getDnaIntentSiteHierarchyCall(timestamp, runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Site Hierarchy
     * Site Hierarchy along with health Info
     * @param timestamp Timestamp  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return SiteHierarchyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SiteHierarchyResponse getDnaIntentSiteHierarchy(String timestamp, Boolean runsync, BigDecimal timeout) throws ApiException {
        ApiResponse<SiteHierarchyResponse> resp = getDnaIntentSiteHierarchyWithHttpInfo(timestamp, runsync, timeout);
        return resp.getData();
    }

    /**
     * Site Hierarchy
     * Site Hierarchy along with health Info
     * @param timestamp Timestamp  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;SiteHierarchyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SiteHierarchyResponse> getDnaIntentSiteHierarchyWithHttpInfo(String timestamp, Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getDnaIntentSiteHierarchyValidateBeforeCall(timestamp, runsync, timeout, null, null);
        Type localVarReturnType = new TypeToken<SiteHierarchyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Site Hierarchy (asynchronously)
     * Site Hierarchy along with health Info
     * @param timestamp Timestamp  (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDnaIntentSiteHierarchyAsync(String timestamp, Boolean runsync, BigDecimal timeout, final ApiCallback<SiteHierarchyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDnaIntentSiteHierarchyValidateBeforeCall(timestamp, runsync, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SiteHierarchyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDnaIntentCreateApplication
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDnaIntentCreateApplicationCall(Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/create-application";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDnaIntentCreateApplicationValidateBeforeCall(Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postDnaIntentCreateApplicationCall(runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Post Application
     * Invoke the API to create a custom application
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postDnaIntentCreateApplication(Boolean runsync, BigDecimal timeout) throws ApiException {
        postDnaIntentCreateApplicationWithHttpInfo(runsync, timeout);
    }

    /**
     * Post Application
     * Invoke the API to create a custom application
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postDnaIntentCreateApplicationWithHttpInfo(Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = postDnaIntentCreateApplicationValidateBeforeCall(runsync, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     * Post Application (asynchronously)
     * Invoke the API to create a custom application
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDnaIntentCreateApplicationAsync(Boolean runsync, BigDecimal timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDnaIntentCreateApplicationValidateBeforeCall(runsync, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postDnaIntentCreateApplicationPolicy
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDnaIntentCreateApplicationPolicyCall(Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/create-application-policy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDnaIntentCreateApplicationPolicyValidateBeforeCall(Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postDnaIntentCreateApplicationPolicyCall(runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Post Application Policy Intent
     * Invoke the API to create, modify or delete an application-policy
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postDnaIntentCreateApplicationPolicy(Boolean runsync, BigDecimal timeout) throws ApiException {
        postDnaIntentCreateApplicationPolicyWithHttpInfo(runsync, timeout);
    }

    /**
     * Post Application Policy Intent
     * Invoke the API to create, modify or delete an application-policy
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postDnaIntentCreateApplicationPolicyWithHttpInfo(Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = postDnaIntentCreateApplicationPolicyValidateBeforeCall(runsync, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     * Post Application Policy Intent (asynchronously)
     * Invoke the API to create, modify or delete an application-policy
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDnaIntentCreateApplicationPolicyAsync(Boolean runsync, BigDecimal timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDnaIntentCreateApplicationPolicyValidateBeforeCall(runsync, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postDnaIntentCreateApplicationSet
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDnaIntentCreateApplicationSetCall(Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/create-application-set";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDnaIntentCreateApplicationSetValidateBeforeCall(Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postDnaIntentCreateApplicationSetCall(runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Post Application Set
     * Invoke the API to create a custom application set
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postDnaIntentCreateApplicationSet(Boolean runsync, BigDecimal timeout) throws ApiException {
        postDnaIntentCreateApplicationSetWithHttpInfo(runsync, timeout);
    }

    /**
     * Post Application Set
     * Invoke the API to create a custom application set
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postDnaIntentCreateApplicationSetWithHttpInfo(Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = postDnaIntentCreateApplicationSetValidateBeforeCall(runsync, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     * Post Application Set (asynchronously)
     * Invoke the API to create a custom application set
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDnaIntentCreateApplicationSetAsync(Boolean runsync, BigDecimal timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDnaIntentCreateApplicationSetValidateBeforeCall(runsync, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postDnaIntentCreateSsid
     * @param request request (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDnaIntentCreateSsidCall(CreateSSIDRequest request, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/create-ssid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDnaIntentCreateSsidValidateBeforeCall(CreateSSIDRequest request, Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postDnaIntentCreateSsid(Async)");
        }
        

        com.squareup.okhttp.Call call = postDnaIntentCreateSsidCall(request, runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create SSID
     * Creates non fabric enterprise SSID, dynamic interface, Wireless Network Profile and provisions WLC and AP
     * @param request request (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return CreateSSIDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSSIDResponse postDnaIntentCreateSsid(CreateSSIDRequest request, Boolean runsync, BigDecimal timeout) throws ApiException {
        ApiResponse<CreateSSIDResponse> resp = postDnaIntentCreateSsidWithHttpInfo(request, runsync, timeout);
        return resp.getData();
    }

    /**
     * Create SSID
     * Creates non fabric enterprise SSID, dynamic interface, Wireless Network Profile and provisions WLC and AP
     * @param request request (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;CreateSSIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSSIDResponse> postDnaIntentCreateSsidWithHttpInfo(CreateSSIDRequest request, Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = postDnaIntentCreateSsidValidateBeforeCall(request, runsync, timeout, null, null);
        Type localVarReturnType = new TypeToken<CreateSSIDResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create SSID (asynchronously)
     * Creates non fabric enterprise SSID, dynamic interface, Wireless Network Profile and provisions WLC and AP
     * @param request request (required)
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDnaIntentCreateSsidAsync(CreateSSIDRequest request, Boolean runsync, BigDecimal timeout, final ApiCallback<CreateSSIDResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDnaIntentCreateSsidValidateBeforeCall(request, runsync, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSSIDResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putDnaIntentUpdateApplication
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putDnaIntentUpdateApplicationCall(Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dna/intent/api/v1/update-application";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (runsync != null)
        localVarHeaderParams.put("__runsync", apiClient.parameterToString(runsync));
        if (timeout != null)
        localVarHeaderParams.put("__timeout", apiClient.parameterToString(timeout));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putDnaIntentUpdateApplicationValidateBeforeCall(Boolean runsync, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = putDnaIntentUpdateApplicationCall(runsync, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit Application
     * Invoke the API to create a custom application
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putDnaIntentUpdateApplication(Boolean runsync, BigDecimal timeout) throws ApiException {
        putDnaIntentUpdateApplicationWithHttpInfo(runsync, timeout);
    }

    /**
     * Edit Application
     * Invoke the API to create a custom application
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putDnaIntentUpdateApplicationWithHttpInfo(Boolean runsync, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = putDnaIntentUpdateApplicationValidateBeforeCall(runsync, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit Application (asynchronously)
     * Invoke the API to create a custom application
     * @param runsync Enable this parameter to execute the API and return a response synchronously (optional, default to false)
     * @param timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putDnaIntentUpdateApplicationAsync(Boolean runsync, BigDecimal timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putDnaIntentUpdateApplicationValidateBeforeCall(runsync, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
