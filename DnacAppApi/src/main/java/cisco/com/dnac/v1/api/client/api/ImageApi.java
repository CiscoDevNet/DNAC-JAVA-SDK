/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiCallback;
import cisco.com.dnac.v1.api.client.ApiClient;
import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.ApiResponse;
import cisco.com.dnac.v1.api.client.Configuration;
import cisco.com.dnac.v1.api.client.Pair;
import cisco.com.dnac.v1.api.client.ProgressRequestBody;
import cisco.com.dnac.v1.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cisco.com.dnac.v1.api.client.model.ActivateDTO;
import cisco.com.dnac.v1.api.client.model.DistributeDTO;
import cisco.com.dnac.v1.api.client.model.ImageImportFromUrlDTO;
import cisco.com.dnac.v1.api.client.model.ImageInfoListResponse;
import cisco.com.dnac.v1.api.client.model.TaskIdResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImageApi {
    private ApiClient apiClient;

    public ImageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getImageImportation
     * @param imageUuid imageUuid (optional)
     * @param name name (optional)
     * @param family family (optional)
     * @param applicationType applicationType (optional)
     * @param imageIntegrityStatus imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED (optional)
     * @param version software Image Version (optional)
     * @param imageSeries image Series (optional)
     * @param imageName image Name (optional)
     * @param isTaggedGolden is Tagged Golden (optional)
     * @param isCCORecommended is recommended from cisco.com (optional)
     * @param isCCOLatest is latest from cisco.com (optional)
     * @param createdTime time in milliseconds (epoch format) (optional)
     * @param imageSizeGreaterThan size in bytes (optional)
     * @param imageSizeLesserThan size in bytes (optional)
     * @param sortBy sort results by this field (optional)
     * @param sortOrder sort order - &#39;asc&#39; or &#39;des&#39;. Default is asc (optional)
     * @param limit limit (optional)
     * @param offset offset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImageImportationCall(String imageUuid, String name, String family, String applicationType, String imageIntegrityStatus, String version, String imageSeries, String imageName, Boolean isTaggedGolden, Boolean isCCORecommended, Boolean isCCOLatest, Integer createdTime, Integer imageSizeGreaterThan, Integer imageSizeLesserThan, String sortBy, String sortOrder, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/image/importation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (imageUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageUuid", imageUuid));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (family != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("family", family));
        if (applicationType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applicationType", applicationType));
        if (imageIntegrityStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageIntegrityStatus", imageIntegrityStatus));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (imageSeries != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageSeries", imageSeries));
        if (imageName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageName", imageName));
        if (isTaggedGolden != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isTaggedGolden", isTaggedGolden));
        if (isCCORecommended != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isCCORecommended", isCCORecommended));
        if (isCCOLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isCCOLatest", isCCOLatest));
        if (createdTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdTime", createdTime));
        if (imageSizeGreaterThan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageSizeGreaterThan", imageSizeGreaterThan));
        if (imageSizeLesserThan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imageSizeLesserThan", imageSizeLesserThan));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImageImportationValidateBeforeCall(String imageUuid, String name, String family, String applicationType, String imageIntegrityStatus, String version, String imageSeries, String imageName, Boolean isTaggedGolden, Boolean isCCORecommended, Boolean isCCOLatest, Integer createdTime, Integer imageSizeGreaterThan, Integer imageSizeLesserThan, String sortBy, String sortOrder, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getImageImportationCall(imageUuid, name, family, applicationType, imageIntegrityStatus, version, imageSeries, imageName, isTaggedGolden, isCCORecommended, isCCOLatest, createdTime, imageSizeGreaterThan, imageSizeLesserThan, sortBy, sortOrder, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get image details with filter
     * Get image details based on filter criteria, use % for like operations. Example: filterByName &#x3D; cat3k%
     * @param imageUuid imageUuid (optional)
     * @param name name (optional)
     * @param family family (optional)
     * @param applicationType applicationType (optional)
     * @param imageIntegrityStatus imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED (optional)
     * @param version software Image Version (optional)
     * @param imageSeries image Series (optional)
     * @param imageName image Name (optional)
     * @param isTaggedGolden is Tagged Golden (optional)
     * @param isCCORecommended is recommended from cisco.com (optional)
     * @param isCCOLatest is latest from cisco.com (optional)
     * @param createdTime time in milliseconds (epoch format) (optional)
     * @param imageSizeGreaterThan size in bytes (optional)
     * @param imageSizeLesserThan size in bytes (optional)
     * @param sortBy sort results by this field (optional)
     * @param sortOrder sort order - &#39;asc&#39; or &#39;des&#39;. Default is asc (optional)
     * @param limit limit (optional)
     * @param offset offset (optional)
     * @return ImageInfoListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageInfoListResponse getImageImportation(String imageUuid, String name, String family, String applicationType, String imageIntegrityStatus, String version, String imageSeries, String imageName, Boolean isTaggedGolden, Boolean isCCORecommended, Boolean isCCOLatest, Integer createdTime, Integer imageSizeGreaterThan, Integer imageSizeLesserThan, String sortBy, String sortOrder, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ImageInfoListResponse> resp = getImageImportationWithHttpInfo(imageUuid, name, family, applicationType, imageIntegrityStatus, version, imageSeries, imageName, isTaggedGolden, isCCORecommended, isCCOLatest, createdTime, imageSizeGreaterThan, imageSizeLesserThan, sortBy, sortOrder, limit, offset);
        return resp.getData();
    }

    /**
     * Get image details with filter
     * Get image details based on filter criteria, use % for like operations. Example: filterByName &#x3D; cat3k%
     * @param imageUuid imageUuid (optional)
     * @param name name (optional)
     * @param family family (optional)
     * @param applicationType applicationType (optional)
     * @param imageIntegrityStatus imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED (optional)
     * @param version software Image Version (optional)
     * @param imageSeries image Series (optional)
     * @param imageName image Name (optional)
     * @param isTaggedGolden is Tagged Golden (optional)
     * @param isCCORecommended is recommended from cisco.com (optional)
     * @param isCCOLatest is latest from cisco.com (optional)
     * @param createdTime time in milliseconds (epoch format) (optional)
     * @param imageSizeGreaterThan size in bytes (optional)
     * @param imageSizeLesserThan size in bytes (optional)
     * @param sortBy sort results by this field (optional)
     * @param sortOrder sort order - &#39;asc&#39; or &#39;des&#39;. Default is asc (optional)
     * @param limit limit (optional)
     * @param offset offset (optional)
     * @return ApiResponse&lt;ImageInfoListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageInfoListResponse> getImageImportationWithHttpInfo(String imageUuid, String name, String family, String applicationType, String imageIntegrityStatus, String version, String imageSeries, String imageName, Boolean isTaggedGolden, Boolean isCCORecommended, Boolean isCCOLatest, Integer createdTime, Integer imageSizeGreaterThan, Integer imageSizeLesserThan, String sortBy, String sortOrder, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getImageImportationValidateBeforeCall(imageUuid, name, family, applicationType, imageIntegrityStatus, version, imageSeries, imageName, isTaggedGolden, isCCORecommended, isCCOLatest, createdTime, imageSizeGreaterThan, imageSizeLesserThan, sortBy, sortOrder, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<ImageInfoListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get image details with filter (asynchronously)
     * Get image details based on filter criteria, use % for like operations. Example: filterByName &#x3D; cat3k%
     * @param imageUuid imageUuid (optional)
     * @param name name (optional)
     * @param family family (optional)
     * @param applicationType applicationType (optional)
     * @param imageIntegrityStatus imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED (optional)
     * @param version software Image Version (optional)
     * @param imageSeries image Series (optional)
     * @param imageName image Name (optional)
     * @param isTaggedGolden is Tagged Golden (optional)
     * @param isCCORecommended is recommended from cisco.com (optional)
     * @param isCCOLatest is latest from cisco.com (optional)
     * @param createdTime time in milliseconds (epoch format) (optional)
     * @param imageSizeGreaterThan size in bytes (optional)
     * @param imageSizeLesserThan size in bytes (optional)
     * @param sortBy sort results by this field (optional)
     * @param sortOrder sort order - &#39;asc&#39; or &#39;des&#39;. Default is asc (optional)
     * @param limit limit (optional)
     * @param offset offset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImageImportationAsync(String imageUuid, String name, String family, String applicationType, String imageIntegrityStatus, String version, String imageSeries, String imageName, Boolean isTaggedGolden, Boolean isCCORecommended, Boolean isCCOLatest, Integer createdTime, Integer imageSizeGreaterThan, Integer imageSizeLesserThan, String sortBy, String sortOrder, Integer limit, Integer offset, final ApiCallback<ImageInfoListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImageImportationValidateBeforeCall(imageUuid, name, family, applicationType, imageIntegrityStatus, version, imageSeries, imageName, isTaggedGolden, isCCORecommended, isCCOLatest, createdTime, imageSizeGreaterThan, imageSizeLesserThan, sortBy, sortOrder, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageInfoListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postImageActivationDevice
     * @param request request (required)
     * @param clientType Client-type (Optional) (optional)
     * @param clientUrl Client-url (Optional) (optional)
     * @param scheduleValidate scheduleValidate, validates data before schedule (Optional) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postImageActivationDeviceCall(ActivateDTO request, String clientType, String clientUrl, Boolean scheduleValidate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/image/activation/device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scheduleValidate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scheduleValidate", scheduleValidate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientType != null)
        localVarHeaderParams.put("Client-Type", apiClient.parameterToString(clientType));
        if (clientUrl != null)
        localVarHeaderParams.put("Client-Url", apiClient.parameterToString(clientUrl));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postImageActivationDeviceValidateBeforeCall(ActivateDTO request, String clientType, String clientUrl, Boolean scheduleValidate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postImageActivationDevice(Async)");
        }
        

        com.squareup.okhttp.Call call = postImageActivationDeviceCall(request, clientType, clientUrl, scheduleValidate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Trigger activation on a device
     * Performs activation of an image on a given device.
     * @param request request (required)
     * @param clientType Client-type (Optional) (optional)
     * @param clientUrl Client-url (Optional) (optional)
     * @param scheduleValidate scheduleValidate, validates data before schedule (Optional) (optional)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postImageActivationDevice(ActivateDTO request, String clientType, String clientUrl, Boolean scheduleValidate) throws ApiException {
        ApiResponse<TaskIdResult> resp = postImageActivationDeviceWithHttpInfo(request, clientType, clientUrl, scheduleValidate);
        return resp.getData();
    }

    /**
     * Trigger activation on a device
     * Performs activation of an image on a given device.
     * @param request request (required)
     * @param clientType Client-type (Optional) (optional)
     * @param clientUrl Client-url (Optional) (optional)
     * @param scheduleValidate scheduleValidate, validates data before schedule (Optional) (optional)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postImageActivationDeviceWithHttpInfo(ActivateDTO request, String clientType, String clientUrl, Boolean scheduleValidate) throws ApiException {
        com.squareup.okhttp.Call call = postImageActivationDeviceValidateBeforeCall(request, clientType, clientUrl, scheduleValidate, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trigger activation on a device (asynchronously)
     * Performs activation of an image on a given device.
     * @param request request (required)
     * @param clientType Client-type (Optional) (optional)
     * @param clientUrl Client-url (Optional) (optional)
     * @param scheduleValidate scheduleValidate, validates data before schedule (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postImageActivationDeviceAsync(ActivateDTO request, String clientType, String clientUrl, Boolean scheduleValidate, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postImageActivationDeviceValidateBeforeCall(request, clientType, clientUrl, scheduleValidate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postImageDistribution
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postImageDistributionCall(DistributeDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/image/distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postImageDistributionValidateBeforeCall(DistributeDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postImageDistribution(Async)");
        }
        

        com.squareup.okhttp.Call call = postImageDistributionCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Trigger distribution of an image
     * Performs distribution of an image to a given device.
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postImageDistribution(DistributeDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postImageDistributionWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Trigger distribution of an image
     * Performs distribution of an image to a given device.
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postImageDistributionWithHttpInfo(DistributeDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postImageDistributionValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trigger distribution of an image (asynchronously)
     * Performs distribution of an image to a given device.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postImageDistributionAsync(DistributeDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postImageDistributionValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postImageImportationSourceFile
     * @param isThirdParty Third party Image check (optional)
     * @param thirdPartyVendor Third Party Vendor (optional)
     * @param thirdPartyImageFamily Third Party image family (optional)
     * @param thirdPartyApplicationType Third Party Application Type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postImageImportationSourceFileCall(Boolean isThirdParty, String thirdPartyVendor, String thirdPartyImageFamily, String thirdPartyApplicationType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/image/importation/source/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isThirdParty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isThirdParty", isThirdParty));
        if (thirdPartyVendor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("thirdPartyVendor", thirdPartyVendor));
        if (thirdPartyImageFamily != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("thirdPartyImageFamily", thirdPartyImageFamily));
        if (thirdPartyApplicationType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("thirdPartyApplicationType", thirdPartyApplicationType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postImageImportationSourceFileValidateBeforeCall(Boolean isThirdParty, String thirdPartyVendor, String thirdPartyImageFamily, String thirdPartyApplicationType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postImageImportationSourceFileCall(isThirdParty, thirdPartyVendor, thirdPartyImageFamily, thirdPartyApplicationType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import an image from local file system
     * Imports an image to SWIM image repository from local file system. The image files with extensions bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2 are supported. Set siteUuid as -1 to tag as golden image.
     * @param isThirdParty Third party Image check (optional)
     * @param thirdPartyVendor Third Party Vendor (optional)
     * @param thirdPartyImageFamily Third Party image family (optional)
     * @param thirdPartyApplicationType Third Party Application Type (optional)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postImageImportationSourceFile(Boolean isThirdParty, String thirdPartyVendor, String thirdPartyImageFamily, String thirdPartyApplicationType) throws ApiException {
        ApiResponse<TaskIdResult> resp = postImageImportationSourceFileWithHttpInfo(isThirdParty, thirdPartyVendor, thirdPartyImageFamily, thirdPartyApplicationType);
        return resp.getData();
    }

    /**
     * Import an image from local file system
     * Imports an image to SWIM image repository from local file system. The image files with extensions bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2 are supported. Set siteUuid as -1 to tag as golden image.
     * @param isThirdParty Third party Image check (optional)
     * @param thirdPartyVendor Third Party Vendor (optional)
     * @param thirdPartyImageFamily Third Party image family (optional)
     * @param thirdPartyApplicationType Third Party Application Type (optional)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postImageImportationSourceFileWithHttpInfo(Boolean isThirdParty, String thirdPartyVendor, String thirdPartyImageFamily, String thirdPartyApplicationType) throws ApiException {
        com.squareup.okhttp.Call call = postImageImportationSourceFileValidateBeforeCall(isThirdParty, thirdPartyVendor, thirdPartyImageFamily, thirdPartyApplicationType, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import an image from local file system (asynchronously)
     * Imports an image to SWIM image repository from local file system. The image files with extensions bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2 are supported. Set siteUuid as -1 to tag as golden image.
     * @param isThirdParty Third party Image check (optional)
     * @param thirdPartyVendor Third Party Vendor (optional)
     * @param thirdPartyImageFamily Third Party image family (optional)
     * @param thirdPartyApplicationType Third Party Application Type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postImageImportationSourceFileAsync(Boolean isThirdParty, String thirdPartyVendor, String thirdPartyImageFamily, String thirdPartyApplicationType, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postImageImportationSourceFileValidateBeforeCall(isThirdParty, thirdPartyVendor, thirdPartyImageFamily, thirdPartyApplicationType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postImageImportationSourceUrl
     * @param request request (required)
     * @param scheduleAt Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional)  (optional)
     * @param scheduleDesc Custom Description (Optional) (optional)
     * @param scheduleOrigin Originator of this call (Optional) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postImageImportationSourceUrlCall(ImageImportFromUrlDTO request, String scheduleAt, String scheduleDesc, String scheduleOrigin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/image/importation/source/url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scheduleAt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scheduleAt", scheduleAt));
        if (scheduleDesc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scheduleDesc", scheduleDesc));
        if (scheduleOrigin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scheduleOrigin", scheduleOrigin));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postImageImportationSourceUrlValidateBeforeCall(ImageImportFromUrlDTO request, String scheduleAt, String scheduleDesc, String scheduleOrigin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postImageImportationSourceUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = postImageImportationSourceUrlCall(request, scheduleAt, scheduleDesc, scheduleOrigin, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Trigger now or schedule import of an image from a URL
     * Imports an image to SWIM image repository, source is any ftp or http URL. The image files with extensions bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2 are supported. Set siteUuid as -1 to tag as golden image.
     * @param request request (required)
     * @param scheduleAt Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional)  (optional)
     * @param scheduleDesc Custom Description (Optional) (optional)
     * @param scheduleOrigin Originator of this call (Optional) (optional)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postImageImportationSourceUrl(ImageImportFromUrlDTO request, String scheduleAt, String scheduleDesc, String scheduleOrigin) throws ApiException {
        ApiResponse<TaskIdResult> resp = postImageImportationSourceUrlWithHttpInfo(request, scheduleAt, scheduleDesc, scheduleOrigin);
        return resp.getData();
    }

    /**
     * Trigger now or schedule import of an image from a URL
     * Imports an image to SWIM image repository, source is any ftp or http URL. The image files with extensions bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2 are supported. Set siteUuid as -1 to tag as golden image.
     * @param request request (required)
     * @param scheduleAt Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional)  (optional)
     * @param scheduleDesc Custom Description (Optional) (optional)
     * @param scheduleOrigin Originator of this call (Optional) (optional)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postImageImportationSourceUrlWithHttpInfo(ImageImportFromUrlDTO request, String scheduleAt, String scheduleDesc, String scheduleOrigin) throws ApiException {
        com.squareup.okhttp.Call call = postImageImportationSourceUrlValidateBeforeCall(request, scheduleAt, scheduleDesc, scheduleOrigin, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trigger now or schedule import of an image from a URL (asynchronously)
     * Imports an image to SWIM image repository, source is any ftp or http URL. The image files with extensions bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2 are supported. Set siteUuid as -1 to tag as golden image.
     * @param request request (required)
     * @param scheduleAt Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional)  (optional)
     * @param scheduleDesc Custom Description (Optional) (optional)
     * @param scheduleOrigin Originator of this call (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postImageImportationSourceUrlAsync(ImageImportFromUrlDTO request, String scheduleAt, String scheduleDesc, String scheduleOrigin, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postImageImportationSourceUrlValidateBeforeCall(request, scheduleAt, scheduleDesc, scheduleOrigin, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
