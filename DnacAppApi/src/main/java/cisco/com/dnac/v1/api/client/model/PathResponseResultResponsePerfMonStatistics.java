/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * PathResponseResultResponsePerfMonStatistics
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-06T09:46:49.053-05:00")
public class PathResponseResultResponsePerfMonStatistics {
  @SerializedName("byteRate")
  private Integer byteRate = null;

  @SerializedName("destIpAddress")
  private String destIpAddress = null;

  @SerializedName("destPort")
  private String destPort = null;

  @SerializedName("inputInterface")
  private String inputInterface = null;

  @SerializedName("ipv4DSCP")
  private String ipv4DSCP = null;

  @SerializedName("ipv4TTL")
  private Integer ipv4TTL = null;

  @SerializedName("outputInterface")
  private String outputInterface = null;

  @SerializedName("packetBytes")
  private Integer packetBytes = null;

  @SerializedName("packetCount")
  private Integer packetCount = null;

  @SerializedName("packetLoss")
  private Integer packetLoss = null;

  @SerializedName("packetLossPercentage")
  private BigDecimal packetLossPercentage = null;

  @SerializedName("protocol")
  private String protocol = null;

  @SerializedName("refreshedAt")
  private Integer refreshedAt = null;

  @SerializedName("rtpJitterMax")
  private Integer rtpJitterMax = null;

  @SerializedName("rtpJitterMean")
  private Integer rtpJitterMean = null;

  @SerializedName("rtpJitterMin")
  private Integer rtpJitterMin = null;

  @SerializedName("sourceIpAddress")
  private String sourceIpAddress = null;

  @SerializedName("sourcePort")
  private String sourcePort = null;

  public PathResponseResultResponsePerfMonStatistics byteRate(Integer byteRate) {
    this.byteRate = byteRate;
    return this;
  }

   /**
   * Get byteRate
   * @return byteRate
  **/
  @ApiModelProperty(value = "")
  public Integer getByteRate() {
    return byteRate;
  }

  public void setByteRate(Integer byteRate) {
    this.byteRate = byteRate;
  }

  public PathResponseResultResponsePerfMonStatistics destIpAddress(String destIpAddress) {
    this.destIpAddress = destIpAddress;
    return this;
  }

   /**
   * Get destIpAddress
   * @return destIpAddress
  **/
  @ApiModelProperty(value = "")
  public String getDestIpAddress() {
    return destIpAddress;
  }

  public void setDestIpAddress(String destIpAddress) {
    this.destIpAddress = destIpAddress;
  }

  public PathResponseResultResponsePerfMonStatistics destPort(String destPort) {
    this.destPort = destPort;
    return this;
  }

   /**
   * Get destPort
   * @return destPort
  **/
  @ApiModelProperty(value = "")
  public String getDestPort() {
    return destPort;
  }

  public void setDestPort(String destPort) {
    this.destPort = destPort;
  }

  public PathResponseResultResponsePerfMonStatistics inputInterface(String inputInterface) {
    this.inputInterface = inputInterface;
    return this;
  }

   /**
   * Get inputInterface
   * @return inputInterface
  **/
  @ApiModelProperty(value = "")
  public String getInputInterface() {
    return inputInterface;
  }

  public void setInputInterface(String inputInterface) {
    this.inputInterface = inputInterface;
  }

  public PathResponseResultResponsePerfMonStatistics ipv4DSCP(String ipv4DSCP) {
    this.ipv4DSCP = ipv4DSCP;
    return this;
  }

   /**
   * Get ipv4DSCP
   * @return ipv4DSCP
  **/
  @ApiModelProperty(value = "")
  public String getIpv4DSCP() {
    return ipv4DSCP;
  }

  public void setIpv4DSCP(String ipv4DSCP) {
    this.ipv4DSCP = ipv4DSCP;
  }

  public PathResponseResultResponsePerfMonStatistics ipv4TTL(Integer ipv4TTL) {
    this.ipv4TTL = ipv4TTL;
    return this;
  }

   /**
   * Get ipv4TTL
   * @return ipv4TTL
  **/
  @ApiModelProperty(value = "")
  public Integer getIpv4TTL() {
    return ipv4TTL;
  }

  public void setIpv4TTL(Integer ipv4TTL) {
    this.ipv4TTL = ipv4TTL;
  }

  public PathResponseResultResponsePerfMonStatistics outputInterface(String outputInterface) {
    this.outputInterface = outputInterface;
    return this;
  }

   /**
   * Get outputInterface
   * @return outputInterface
  **/
  @ApiModelProperty(value = "")
  public String getOutputInterface() {
    return outputInterface;
  }

  public void setOutputInterface(String outputInterface) {
    this.outputInterface = outputInterface;
  }

  public PathResponseResultResponsePerfMonStatistics packetBytes(Integer packetBytes) {
    this.packetBytes = packetBytes;
    return this;
  }

   /**
   * Get packetBytes
   * @return packetBytes
  **/
  @ApiModelProperty(value = "")
  public Integer getPacketBytes() {
    return packetBytes;
  }

  public void setPacketBytes(Integer packetBytes) {
    this.packetBytes = packetBytes;
  }

  public PathResponseResultResponsePerfMonStatistics packetCount(Integer packetCount) {
    this.packetCount = packetCount;
    return this;
  }

   /**
   * Get packetCount
   * @return packetCount
  **/
  @ApiModelProperty(value = "")
  public Integer getPacketCount() {
    return packetCount;
  }

  public void setPacketCount(Integer packetCount) {
    this.packetCount = packetCount;
  }

  public PathResponseResultResponsePerfMonStatistics packetLoss(Integer packetLoss) {
    this.packetLoss = packetLoss;
    return this;
  }

   /**
   * Get packetLoss
   * @return packetLoss
  **/
  @ApiModelProperty(value = "")
  public Integer getPacketLoss() {
    return packetLoss;
  }

  public void setPacketLoss(Integer packetLoss) {
    this.packetLoss = packetLoss;
  }

  public PathResponseResultResponsePerfMonStatistics packetLossPercentage(BigDecimal packetLossPercentage) {
    this.packetLossPercentage = packetLossPercentage;
    return this;
  }

   /**
   * Get packetLossPercentage
   * @return packetLossPercentage
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getPacketLossPercentage() {
    return packetLossPercentage;
  }

  public void setPacketLossPercentage(BigDecimal packetLossPercentage) {
    this.packetLossPercentage = packetLossPercentage;
  }

  public PathResponseResultResponsePerfMonStatistics protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @ApiModelProperty(value = "")
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }

  public PathResponseResultResponsePerfMonStatistics refreshedAt(Integer refreshedAt) {
    this.refreshedAt = refreshedAt;
    return this;
  }

   /**
   * Get refreshedAt
   * @return refreshedAt
  **/
  @ApiModelProperty(value = "")
  public Integer getRefreshedAt() {
    return refreshedAt;
  }

  public void setRefreshedAt(Integer refreshedAt) {
    this.refreshedAt = refreshedAt;
  }

  public PathResponseResultResponsePerfMonStatistics rtpJitterMax(Integer rtpJitterMax) {
    this.rtpJitterMax = rtpJitterMax;
    return this;
  }

   /**
   * Get rtpJitterMax
   * @return rtpJitterMax
  **/
  @ApiModelProperty(value = "")
  public Integer getRtpJitterMax() {
    return rtpJitterMax;
  }

  public void setRtpJitterMax(Integer rtpJitterMax) {
    this.rtpJitterMax = rtpJitterMax;
  }

  public PathResponseResultResponsePerfMonStatistics rtpJitterMean(Integer rtpJitterMean) {
    this.rtpJitterMean = rtpJitterMean;
    return this;
  }

   /**
   * Get rtpJitterMean
   * @return rtpJitterMean
  **/
  @ApiModelProperty(value = "")
  public Integer getRtpJitterMean() {
    return rtpJitterMean;
  }

  public void setRtpJitterMean(Integer rtpJitterMean) {
    this.rtpJitterMean = rtpJitterMean;
  }

  public PathResponseResultResponsePerfMonStatistics rtpJitterMin(Integer rtpJitterMin) {
    this.rtpJitterMin = rtpJitterMin;
    return this;
  }

   /**
   * Get rtpJitterMin
   * @return rtpJitterMin
  **/
  @ApiModelProperty(value = "")
  public Integer getRtpJitterMin() {
    return rtpJitterMin;
  }

  public void setRtpJitterMin(Integer rtpJitterMin) {
    this.rtpJitterMin = rtpJitterMin;
  }

  public PathResponseResultResponsePerfMonStatistics sourceIpAddress(String sourceIpAddress) {
    this.sourceIpAddress = sourceIpAddress;
    return this;
  }

   /**
   * Get sourceIpAddress
   * @return sourceIpAddress
  **/
  @ApiModelProperty(value = "")
  public String getSourceIpAddress() {
    return sourceIpAddress;
  }

  public void setSourceIpAddress(String sourceIpAddress) {
    this.sourceIpAddress = sourceIpAddress;
  }

  public PathResponseResultResponsePerfMonStatistics sourcePort(String sourcePort) {
    this.sourcePort = sourcePort;
    return this;
  }

   /**
   * Get sourcePort
   * @return sourcePort
  **/
  @ApiModelProperty(value = "")
  public String getSourcePort() {
    return sourcePort;
  }

  public void setSourcePort(String sourcePort) {
    this.sourcePort = sourcePort;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PathResponseResultResponsePerfMonStatistics pathResponseResultResponsePerfMonStatistics = (PathResponseResultResponsePerfMonStatistics) o;
    return Objects.equals(this.byteRate, pathResponseResultResponsePerfMonStatistics.byteRate) &&
        Objects.equals(this.destIpAddress, pathResponseResultResponsePerfMonStatistics.destIpAddress) &&
        Objects.equals(this.destPort, pathResponseResultResponsePerfMonStatistics.destPort) &&
        Objects.equals(this.inputInterface, pathResponseResultResponsePerfMonStatistics.inputInterface) &&
        Objects.equals(this.ipv4DSCP, pathResponseResultResponsePerfMonStatistics.ipv4DSCP) &&
        Objects.equals(this.ipv4TTL, pathResponseResultResponsePerfMonStatistics.ipv4TTL) &&
        Objects.equals(this.outputInterface, pathResponseResultResponsePerfMonStatistics.outputInterface) &&
        Objects.equals(this.packetBytes, pathResponseResultResponsePerfMonStatistics.packetBytes) &&
        Objects.equals(this.packetCount, pathResponseResultResponsePerfMonStatistics.packetCount) &&
        Objects.equals(this.packetLoss, pathResponseResultResponsePerfMonStatistics.packetLoss) &&
        Objects.equals(this.packetLossPercentage, pathResponseResultResponsePerfMonStatistics.packetLossPercentage) &&
        Objects.equals(this.protocol, pathResponseResultResponsePerfMonStatistics.protocol) &&
        Objects.equals(this.refreshedAt, pathResponseResultResponsePerfMonStatistics.refreshedAt) &&
        Objects.equals(this.rtpJitterMax, pathResponseResultResponsePerfMonStatistics.rtpJitterMax) &&
        Objects.equals(this.rtpJitterMean, pathResponseResultResponsePerfMonStatistics.rtpJitterMean) &&
        Objects.equals(this.rtpJitterMin, pathResponseResultResponsePerfMonStatistics.rtpJitterMin) &&
        Objects.equals(this.sourceIpAddress, pathResponseResultResponsePerfMonStatistics.sourceIpAddress) &&
        Objects.equals(this.sourcePort, pathResponseResultResponsePerfMonStatistics.sourcePort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(byteRate, destIpAddress, destPort, inputInterface, ipv4DSCP, ipv4TTL, outputInterface, packetBytes, packetCount, packetLoss, packetLossPercentage, protocol, refreshedAt, rtpJitterMax, rtpJitterMean, rtpJitterMin, sourceIpAddress, sourcePort);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PathResponseResultResponsePerfMonStatistics {\n");
    
    sb.append("    byteRate: ").append(toIndentedString(byteRate)).append("\n");
    sb.append("    destIpAddress: ").append(toIndentedString(destIpAddress)).append("\n");
    sb.append("    destPort: ").append(toIndentedString(destPort)).append("\n");
    sb.append("    inputInterface: ").append(toIndentedString(inputInterface)).append("\n");
    sb.append("    ipv4DSCP: ").append(toIndentedString(ipv4DSCP)).append("\n");
    sb.append("    ipv4TTL: ").append(toIndentedString(ipv4TTL)).append("\n");
    sb.append("    outputInterface: ").append(toIndentedString(outputInterface)).append("\n");
    sb.append("    packetBytes: ").append(toIndentedString(packetBytes)).append("\n");
    sb.append("    packetCount: ").append(toIndentedString(packetCount)).append("\n");
    sb.append("    packetLoss: ").append(toIndentedString(packetLoss)).append("\n");
    sb.append("    packetLossPercentage: ").append(toIndentedString(packetLossPercentage)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    refreshedAt: ").append(toIndentedString(refreshedAt)).append("\n");
    sb.append("    rtpJitterMax: ").append(toIndentedString(rtpJitterMax)).append("\n");
    sb.append("    rtpJitterMean: ").append(toIndentedString(rtpJitterMean)).append("\n");
    sb.append("    rtpJitterMin: ").append(toIndentedString(rtpJitterMin)).append("\n");
    sb.append("    sourceIpAddress: ").append(toIndentedString(sourceIpAddress)).append("\n");
    sb.append("    sourcePort: ").append(toIndentedString(sourcePort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

