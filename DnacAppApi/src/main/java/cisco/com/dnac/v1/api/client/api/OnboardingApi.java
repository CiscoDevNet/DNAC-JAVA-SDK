/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiCallback;
import cisco.com.dnac.v1.api.client.ApiClient;
import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.ApiResponse;
import cisco.com.dnac.v1.api.client.Configuration;
import cisco.com.dnac.v1.api.client.Pair;
import cisco.com.dnac.v1.api.client.ProgressRequestBody;
import cisco.com.dnac.v1.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cisco.com.dnac.v1.api.client.model.AddVirtualAccountResponse;
import cisco.com.dnac.v1.api.client.model.ClaimDeviceRequest;
import cisco.com.dnac.v1.api.client.model.ClaimDevicesResponse;
import cisco.com.dnac.v1.api.client.model.CreateDeviceResponse;
import cisco.com.dnac.v1.api.client.model.CreateWorkflowResponse;
import cisco.com.dnac.v1.api.client.model.DeleteDeviceResponse;
import cisco.com.dnac.v1.api.client.model.DeleteWorkflowResponse;
import cisco.com.dnac.v1.api.client.model.DeregisterVirtualAccountResponse;
import cisco.com.dnac.v1.api.client.model.Device;
import cisco.com.dnac.v1.api.client.model.EditPnPServerProfileResponse;
import cisco.com.dnac.v1.api.client.model.GetCategorizedDeviceCountResponse;
import cisco.com.dnac.v1.api.client.model.GetDeviceByIDResponse;
import cisco.com.dnac.v1.api.client.model.GetDeviceCountResponse;
import cisco.com.dnac.v1.api.client.model.GetDeviceHistoryResponse;
import cisco.com.dnac.v1.api.client.model.GetSmartAccountListResponse;
import cisco.com.dnac.v1.api.client.model.GetSyncResultForVirtualAccountResponse;
import cisco.com.dnac.v1.api.client.model.GetVirtualAccountListResponse;
import cisco.com.dnac.v1.api.client.model.GetWorkflowCountResponse;
import cisco.com.dnac.v1.api.client.model.GetWorkflowResponse;
import cisco.com.dnac.v1.api.client.model.ImportManyDevicesResponse;
import cisco.com.dnac.v1.api.client.model.ListDevicesResponse;
import cisco.com.dnac.v1.api.client.model.ListWorkflowsResponse;
import cisco.com.dnac.v1.api.client.model.ProvisionDeviceResponse;
import cisco.com.dnac.v1.api.client.model.PushProvisionRequest;
import cisco.com.dnac.v1.api.client.model.ResetDeviceResponse;
import cisco.com.dnac.v1.api.client.model.ResetRequest;
import cisco.com.dnac.v1.api.client.model.SAVAMapping;
import cisco.com.dnac.v1.api.client.model.Settings;
import cisco.com.dnac.v1.api.client.model.SyncVirtualAccountDevicesResponse;
import cisco.com.dnac.v1.api.client.model.UnClaimDeviceResponse;
import cisco.com.dnac.v1.api.client.model.UnclaimRequest;
import cisco.com.dnac.v1.api.client.model.UpdateDeviceResponse;
import cisco.com.dnac.v1.api.client.model.UpdateSettingsResponse;
import cisco.com.dnac.v1.api.client.model.UpdateWorkflowResponse;
import cisco.com.dnac.v1.api.client.model.ViewSettingsResponse;
import cisco.com.dnac.v1.api.client.model.Workflow;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnboardingApi {
    private ApiClient apiClient;

    public OnboardingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnboardingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteOnboardingPnpDeviceById
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOnboardingPnpDeviceByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOnboardingPnpDeviceByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOnboardingPnpDeviceById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOnboardingPnpDeviceByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Device
     * This API is used to delete the specified device from the database.
     * @param id id (required)
     * @return DeleteDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteDeviceResponse deleteOnboardingPnpDeviceById(String id) throws ApiException {
        ApiResponse<DeleteDeviceResponse> resp = deleteOnboardingPnpDeviceByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete Device
     * This API is used to delete the specified device from the database.
     * @param id id (required)
     * @return ApiResponse&lt;DeleteDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteDeviceResponse> deleteOnboardingPnpDeviceByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteOnboardingPnpDeviceByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<DeleteDeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Device (asynchronously)
     * This API is used to delete the specified device from the database.
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOnboardingPnpDeviceByIdAsync(String id, final ApiCallback<DeleteDeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOnboardingPnpDeviceByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteDeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteOnboardingPnpSettingsVacct
     * @param domain Smart Account Domain (required)
     * @param name Virtual Account Name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOnboardingPnpSettingsVacctCall(String domain, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-settings/vacct";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domain != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domain", domain));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOnboardingPnpSettingsVacctValidateBeforeCall(String domain, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteOnboardingPnpSettingsVacct(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteOnboardingPnpSettingsVacct(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOnboardingPnpSettingsVacctCall(domain, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deregister Virtual Account
     * This API is used to deregister the specified smart account &amp; virtual account info and the associated device information from the PnP System &amp; database. The devices associated with the deregistered virtual account are removed from the PnP database as well. The deregistered smart &amp; virtual account info is returned in the response.
     * @param domain Smart Account Domain (required)
     * @param name Virtual Account Name (required)
     * @return DeregisterVirtualAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeregisterVirtualAccountResponse deleteOnboardingPnpSettingsVacct(String domain, String name) throws ApiException {
        ApiResponse<DeregisterVirtualAccountResponse> resp = deleteOnboardingPnpSettingsVacctWithHttpInfo(domain, name);
        return resp.getData();
    }

    /**
     * Deregister Virtual Account
     * This API is used to deregister the specified smart account &amp; virtual account info and the associated device information from the PnP System &amp; database. The devices associated with the deregistered virtual account are removed from the PnP database as well. The deregistered smart &amp; virtual account info is returned in the response.
     * @param domain Smart Account Domain (required)
     * @param name Virtual Account Name (required)
     * @return ApiResponse&lt;DeregisterVirtualAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeregisterVirtualAccountResponse> deleteOnboardingPnpSettingsVacctWithHttpInfo(String domain, String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteOnboardingPnpSettingsVacctValidateBeforeCall(domain, name, null, null);
        Type localVarReturnType = new TypeToken<DeregisterVirtualAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deregister Virtual Account (asynchronously)
     * This API is used to deregister the specified smart account &amp; virtual account info and the associated device information from the PnP System &amp; database. The devices associated with the deregistered virtual account are removed from the PnP database as well. The deregistered smart &amp; virtual account info is returned in the response.
     * @param domain Smart Account Domain (required)
     * @param name Virtual Account Name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOnboardingPnpSettingsVacctAsync(String domain, String name, final ApiCallback<DeregisterVirtualAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOnboardingPnpSettingsVacctValidateBeforeCall(domain, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeregisterVirtualAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteOnboardingPnpWorkflowById
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOnboardingPnpWorkflowByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-workflow/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOnboardingPnpWorkflowByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOnboardingPnpWorkflowById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOnboardingPnpWorkflowByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Workflow
     * Delete a workflow given its id
     * @param id id (required)
     * @return DeleteWorkflowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteWorkflowResponse deleteOnboardingPnpWorkflowById(String id) throws ApiException {
        ApiResponse<DeleteWorkflowResponse> resp = deleteOnboardingPnpWorkflowByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete Workflow
     * Delete a workflow given its id
     * @param id id (required)
     * @return ApiResponse&lt;DeleteWorkflowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteWorkflowResponse> deleteOnboardingPnpWorkflowByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteOnboardingPnpWorkflowByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<DeleteWorkflowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Workflow (asynchronously)
     * Delete a workflow given its id
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOnboardingPnpWorkflowByIdAsync(String id, final ApiCallback<DeleteWorkflowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOnboardingPnpWorkflowByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteWorkflowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpDevice
     * @param limit Limits number of results (optional)
     * @param offset Index of first result (optional)
     * @param sort Comma seperated list of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @param serialNumber Device Serial Number (optional)
     * @param state Device State (optional)
     * @param onbState Device Onboarding State (optional)
     * @param cmState Device Connection Manager State (optional)
     * @param name Device Name (optional)
     * @param pid Device ProductId (optional)
     * @param source Device Source (optional)
     * @param projectId Device Project Id (optional)
     * @param workflowId Device Workflow Id (optional)
     * @param projectName Device Project Name (optional)
     * @param workflowName Device Workflow Name (optional)
     * @param smartAccountId Device Smart Account (optional)
     * @param virtualAccountId Device Virtual Account (optional)
     * @param lastContact Device Has Contacted lastContact &gt; 0 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceCall(Integer limit, Integer offset, List<String> sort, String sortOrder, List<String> serialNumber, List<String> state, List<String> onbState, List<String> cmState, List<String> name, List<String> pid, List<String> source, List<String> projectId, List<String> workflowId, List<String> projectName, List<String> workflowName, List<String> smartAccountId, List<String> virtualAccountId, Boolean lastContact, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (serialNumber != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "serialNumber", serialNumber));
        if (state != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "state", state));
        if (onbState != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "onbState", onbState));
        if (cmState != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "cmState", cmState));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "name", name));
        if (pid != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "pid", pid));
        if (source != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "source", source));
        if (projectId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "projectId", projectId));
        if (workflowId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "workflowId", workflowId));
        if (projectName != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "projectName", projectName));
        if (workflowName != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "workflowName", workflowName));
        if (smartAccountId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "smartAccountId", smartAccountId));
        if (virtualAccountId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "virtualAccountId", virtualAccountId));
        if (lastContact != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastContact", lastContact));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpDeviceValidateBeforeCall(Integer limit, Integer offset, List<String> sort, String sortOrder, List<String> serialNumber, List<String> state, List<String> onbState, List<String> cmState, List<String> name, List<String> pid, List<String> source, List<String> projectId, List<String> workflowId, List<String> projectName, List<String> workflowName, List<String> smartAccountId, List<String> virtualAccountId, Boolean lastContact, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceCall(limit, offset, sort, sortOrder, serialNumber, state, onbState, cmState, name, pid, source, projectId, workflowId, projectName, workflowName, smartAccountId, virtualAccountId, lastContact, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List devices
     * This API is used to get the list of devices that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 devices.
     * @param limit Limits number of results (optional)
     * @param offset Index of first result (optional)
     * @param sort Comma seperated list of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @param serialNumber Device Serial Number (optional)
     * @param state Device State (optional)
     * @param onbState Device Onboarding State (optional)
     * @param cmState Device Connection Manager State (optional)
     * @param name Device Name (optional)
     * @param pid Device ProductId (optional)
     * @param source Device Source (optional)
     * @param projectId Device Project Id (optional)
     * @param workflowId Device Workflow Id (optional)
     * @param projectName Device Project Name (optional)
     * @param workflowName Device Workflow Name (optional)
     * @param smartAccountId Device Smart Account (optional)
     * @param virtualAccountId Device Virtual Account (optional)
     * @param lastContact Device Has Contacted lastContact &gt; 0 (optional)
     * @return ListDevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListDevicesResponse getOnboardingPnpDevice(Integer limit, Integer offset, List<String> sort, String sortOrder, List<String> serialNumber, List<String> state, List<String> onbState, List<String> cmState, List<String> name, List<String> pid, List<String> source, List<String> projectId, List<String> workflowId, List<String> projectName, List<String> workflowName, List<String> smartAccountId, List<String> virtualAccountId, Boolean lastContact) throws ApiException {
        ApiResponse<ListDevicesResponse> resp = getOnboardingPnpDeviceWithHttpInfo(limit, offset, sort, sortOrder, serialNumber, state, onbState, cmState, name, pid, source, projectId, workflowId, projectName, workflowName, smartAccountId, virtualAccountId, lastContact);
        return resp.getData();
    }

    /**
     * List devices
     * This API is used to get the list of devices that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 devices.
     * @param limit Limits number of results (optional)
     * @param offset Index of first result (optional)
     * @param sort Comma seperated list of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @param serialNumber Device Serial Number (optional)
     * @param state Device State (optional)
     * @param onbState Device Onboarding State (optional)
     * @param cmState Device Connection Manager State (optional)
     * @param name Device Name (optional)
     * @param pid Device ProductId (optional)
     * @param source Device Source (optional)
     * @param projectId Device Project Id (optional)
     * @param workflowId Device Workflow Id (optional)
     * @param projectName Device Project Name (optional)
     * @param workflowName Device Workflow Name (optional)
     * @param smartAccountId Device Smart Account (optional)
     * @param virtualAccountId Device Virtual Account (optional)
     * @param lastContact Device Has Contacted lastContact &gt; 0 (optional)
     * @return ApiResponse&lt;ListDevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListDevicesResponse> getOnboardingPnpDeviceWithHttpInfo(Integer limit, Integer offset, List<String> sort, String sortOrder, List<String> serialNumber, List<String> state, List<String> onbState, List<String> cmState, List<String> name, List<String> pid, List<String> source, List<String> projectId, List<String> workflowId, List<String> projectName, List<String> workflowName, List<String> smartAccountId, List<String> virtualAccountId, Boolean lastContact) throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpDeviceValidateBeforeCall(limit, offset, sort, sortOrder, serialNumber, state, onbState, cmState, name, pid, source, projectId, workflowId, projectName, workflowName, smartAccountId, virtualAccountId, lastContact, null, null);
        Type localVarReturnType = new TypeToken<ListDevicesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List devices (asynchronously)
     * This API is used to get the list of devices that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 devices.
     * @param limit Limits number of results (optional)
     * @param offset Index of first result (optional)
     * @param sort Comma seperated list of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @param serialNumber Device Serial Number (optional)
     * @param state Device State (optional)
     * @param onbState Device Onboarding State (optional)
     * @param cmState Device Connection Manager State (optional)
     * @param name Device Name (optional)
     * @param pid Device ProductId (optional)
     * @param source Device Source (optional)
     * @param projectId Device Project Id (optional)
     * @param workflowId Device Workflow Id (optional)
     * @param projectName Device Project Name (optional)
     * @param workflowName Device Workflow Name (optional)
     * @param smartAccountId Device Smart Account (optional)
     * @param virtualAccountId Device Virtual Account (optional)
     * @param lastContact Device Has Contacted lastContact &gt; 0 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceAsync(Integer limit, Integer offset, List<String> sort, String sortOrder, List<String> serialNumber, List<String> state, List<String> onbState, List<String> cmState, List<String> name, List<String> pid, List<String> source, List<String> projectId, List<String> workflowId, List<String> projectName, List<String> workflowName, List<String> smartAccountId, List<String> virtualAccountId, Boolean lastContact, final ApiCallback<ListDevicesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceValidateBeforeCall(limit, offset, sort, sortOrder, serialNumber, state, onbState, cmState, name, pid, source, projectId, workflowId, projectName, workflowName, smartAccountId, virtualAccountId, lastContact, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListDevicesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpDeviceById
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpDeviceByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOnboardingPnpDeviceById(Async)");
        }
        

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Device by ID
     * Get device details of the device with input device id
     * @param id id (required)
     * @return GetDeviceByIDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDeviceByIDResponse getOnboardingPnpDeviceById(String id) throws ApiException {
        ApiResponse<GetDeviceByIDResponse> resp = getOnboardingPnpDeviceByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Device by ID
     * Get device details of the device with input device id
     * @param id id (required)
     * @return ApiResponse&lt;GetDeviceByIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDeviceByIDResponse> getOnboardingPnpDeviceByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpDeviceByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<GetDeviceByIDResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Device by ID (asynchronously)
     * Get device details of the device with input device id
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceByIdAsync(String id, final ApiCallback<GetDeviceByIDResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDeviceByIDResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpDeviceCcount
     * @param serialNumber Device Serial Number (optional)
     * @param state Device State (optional)
     * @param onbState Device Onboarding State (optional)
     * @param cmState Device Connection Manager State (optional)
     * @param name Device Name (optional)
     * @param pid Device ProductId (optional)
     * @param source Device Source (optional)
     * @param projectId Device Project Id (optional)
     * @param workflowId Device Workflow Id (optional)
     * @param projectName Device Project Name (optional)
     * @param workflowName Device Workflow Name (optional)
     * @param smartAccountId Device Smart Account (optional)
     * @param virtualAccountId Device Virtual Account (optional)
     * @param lastContact Device Has Contacted lastContact &gt; 0 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceCcountCall(List<String> serialNumber, List<String> state, List<String> onbState, List<String> cmState, List<String> name, List<String> pid, List<String> source, List<String> projectId, List<String> workflowId, List<String> projectName, List<String> workflowName, List<String> smartAccountId, List<String> virtualAccountId, Boolean lastContact, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serialNumber != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "serialNumber", serialNumber));
        if (state != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "state", state));
        if (onbState != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "onbState", onbState));
        if (cmState != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "cmState", cmState));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "name", name));
        if (pid != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "pid", pid));
        if (source != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "source", source));
        if (projectId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "projectId", projectId));
        if (workflowId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "workflowId", workflowId));
        if (projectName != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "projectName", projectName));
        if (workflowName != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "workflowName", workflowName));
        if (smartAccountId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "smartAccountId", smartAccountId));
        if (virtualAccountId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "virtualAccountId", virtualAccountId));
        if (lastContact != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastContact", lastContact));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpDeviceCcountValidateBeforeCall(List<String> serialNumber, List<String> state, List<String> onbState, List<String> cmState, List<String> name, List<String> pid, List<String> source, List<String> projectId, List<String> workflowId, List<String> projectName, List<String> workflowName, List<String> smartAccountId, List<String> virtualAccountId, Boolean lastContact, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceCcountCall(serialNumber, state, onbState, cmState, name, pid, source, projectId, workflowId, projectName, workflowName, smartAccountId, virtualAccountId, lastContact, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Device Count
     * This API is used to get the number of the devices matching provided filters. This is useful for pageination.
     * @param serialNumber Device Serial Number (optional)
     * @param state Device State (optional)
     * @param onbState Device Onboarding State (optional)
     * @param cmState Device Connection Manager State (optional)
     * @param name Device Name (optional)
     * @param pid Device ProductId (optional)
     * @param source Device Source (optional)
     * @param projectId Device Project Id (optional)
     * @param workflowId Device Workflow Id (optional)
     * @param projectName Device Project Name (optional)
     * @param workflowName Device Workflow Name (optional)
     * @param smartAccountId Device Smart Account (optional)
     * @param virtualAccountId Device Virtual Account (optional)
     * @param lastContact Device Has Contacted lastContact &gt; 0 (optional)
     * @return GetDeviceCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDeviceCountResponse getOnboardingPnpDeviceCcount(List<String> serialNumber, List<String> state, List<String> onbState, List<String> cmState, List<String> name, List<String> pid, List<String> source, List<String> projectId, List<String> workflowId, List<String> projectName, List<String> workflowName, List<String> smartAccountId, List<String> virtualAccountId, Boolean lastContact) throws ApiException {
        ApiResponse<GetDeviceCountResponse> resp = getOnboardingPnpDeviceCcountWithHttpInfo(serialNumber, state, onbState, cmState, name, pid, source, projectId, workflowId, projectName, workflowName, smartAccountId, virtualAccountId, lastContact);
        return resp.getData();
    }

    /**
     * Get Device Count
     * This API is used to get the number of the devices matching provided filters. This is useful for pageination.
     * @param serialNumber Device Serial Number (optional)
     * @param state Device State (optional)
     * @param onbState Device Onboarding State (optional)
     * @param cmState Device Connection Manager State (optional)
     * @param name Device Name (optional)
     * @param pid Device ProductId (optional)
     * @param source Device Source (optional)
     * @param projectId Device Project Id (optional)
     * @param workflowId Device Workflow Id (optional)
     * @param projectName Device Project Name (optional)
     * @param workflowName Device Workflow Name (optional)
     * @param smartAccountId Device Smart Account (optional)
     * @param virtualAccountId Device Virtual Account (optional)
     * @param lastContact Device Has Contacted lastContact &gt; 0 (optional)
     * @return ApiResponse&lt;GetDeviceCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDeviceCountResponse> getOnboardingPnpDeviceCcountWithHttpInfo(List<String> serialNumber, List<String> state, List<String> onbState, List<String> cmState, List<String> name, List<String> pid, List<String> source, List<String> projectId, List<String> workflowId, List<String> projectName, List<String> workflowName, List<String> smartAccountId, List<String> virtualAccountId, Boolean lastContact) throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpDeviceCcountValidateBeforeCall(serialNumber, state, onbState, cmState, name, pid, source, projectId, workflowId, projectName, workflowName, smartAccountId, virtualAccountId, lastContact, null, null);
        Type localVarReturnType = new TypeToken<GetDeviceCountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Device Count (asynchronously)
     * This API is used to get the number of the devices matching provided filters. This is useful for pageination.
     * @param serialNumber Device Serial Number (optional)
     * @param state Device State (optional)
     * @param onbState Device Onboarding State (optional)
     * @param cmState Device Connection Manager State (optional)
     * @param name Device Name (optional)
     * @param pid Device ProductId (optional)
     * @param source Device Source (optional)
     * @param projectId Device Project Id (optional)
     * @param workflowId Device Workflow Id (optional)
     * @param projectName Device Project Name (optional)
     * @param workflowName Device Workflow Name (optional)
     * @param smartAccountId Device Smart Account (optional)
     * @param virtualAccountId Device Virtual Account (optional)
     * @param lastContact Device Has Contacted lastContact &gt; 0 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceCcountAsync(List<String> serialNumber, List<String> state, List<String> onbState, List<String> cmState, List<String> name, List<String> pid, List<String> source, List<String> projectId, List<String> workflowId, List<String> projectName, List<String> workflowName, List<String> smartAccountId, List<String> virtualAccountId, Boolean lastContact, final ApiCallback<GetDeviceCountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceCcountValidateBeforeCall(serialNumber, state, onbState, cmState, name, pid, source, projectId, workflowId, projectName, workflowName, smartAccountId, virtualAccountId, lastContact, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDeviceCountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpDeviceDashboardCount
     * @param category Valid Values: state, errorState, onbState or source (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceDashboardCountCall(String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/dashboard/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpDeviceDashboardCountValidateBeforeCall(String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getOnboardingPnpDeviceDashboardCount(Async)");
        }
        

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceDashboardCountCall(category, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Categorized Device Count
     * Get Categorized Device Count
     * @param category Valid Values: state, errorState, onbState or source (required)
     * @return GetCategorizedDeviceCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetCategorizedDeviceCountResponse getOnboardingPnpDeviceDashboardCount(String category) throws ApiException {
        ApiResponse<GetCategorizedDeviceCountResponse> resp = getOnboardingPnpDeviceDashboardCountWithHttpInfo(category);
        return resp.getData();
    }

    /**
     * Get Categorized Device Count
     * Get Categorized Device Count
     * @param category Valid Values: state, errorState, onbState or source (required)
     * @return ApiResponse&lt;GetCategorizedDeviceCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetCategorizedDeviceCountResponse> getOnboardingPnpDeviceDashboardCountWithHttpInfo(String category) throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpDeviceDashboardCountValidateBeforeCall(category, null, null);
        Type localVarReturnType = new TypeToken<GetCategorizedDeviceCountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Categorized Device Count (asynchronously)
     * Get Categorized Device Count
     * @param category Valid Values: state, errorState, onbState or source (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceDashboardCountAsync(String category, final ApiCallback<GetCategorizedDeviceCountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceDashboardCountValidateBeforeCall(category, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCategorizedDeviceCountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpDeviceHistory
     * @param serialNumber Device Serial Number (required)
     * @param sort Comma seperated list of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceHistoryCall(String serialNumber, List<String> sort, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serialNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serialNumber", serialNumber));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpDeviceHistoryValidateBeforeCall(String serialNumber, List<String> sort, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling getOnboardingPnpDeviceHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceHistoryCall(serialNumber, sort, sortOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Device History
     * Retrieves history for a specific device. Serial Number is a required parameter
     * @param serialNumber Device Serial Number (required)
     * @param sort Comma seperated list of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @return GetDeviceHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetDeviceHistoryResponse getOnboardingPnpDeviceHistory(String serialNumber, List<String> sort, String sortOrder) throws ApiException {
        ApiResponse<GetDeviceHistoryResponse> resp = getOnboardingPnpDeviceHistoryWithHttpInfo(serialNumber, sort, sortOrder);
        return resp.getData();
    }

    /**
     * Get Device History
     * Retrieves history for a specific device. Serial Number is a required parameter
     * @param serialNumber Device Serial Number (required)
     * @param sort Comma seperated list of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @return ApiResponse&lt;GetDeviceHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetDeviceHistoryResponse> getOnboardingPnpDeviceHistoryWithHttpInfo(String serialNumber, List<String> sort, String sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpDeviceHistoryValidateBeforeCall(serialNumber, sort, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<GetDeviceHistoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Device History (asynchronously)
     * Retrieves history for a specific device. Serial Number is a required parameter
     * @param serialNumber Device Serial Number (required)
     * @param sort Comma seperated list of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceHistoryAsync(String serialNumber, List<String> sort, String sortOrder, final ApiCallback<GetDeviceHistoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceHistoryValidateBeforeCall(serialNumber, sort, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDeviceHistoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName
     * @param domain Smart Account Domain (required)
     * @param name Virtual Account Name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameCall(String domain, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/sacct/${domain}/vacct/${name}/sync-result"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameValidateBeforeCall(String domain, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName(Async)");
        }
        

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameCall(domain, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Sync Result for Virtual Account
     * This API is used to get the device sync info from the given smart account &amp; virtual account with the PnP database. The SAVAMapping object which has the list of devices synced since the last sync is returned in the response.
     * @param domain Smart Account Domain (required)
     * @param name Virtual Account Name (required)
     * @return GetSyncResultForVirtualAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSyncResultForVirtualAccountResponse getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName(String domain, String name) throws ApiException {
        ApiResponse<GetSyncResultForVirtualAccountResponse> resp = getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameWithHttpInfo(domain, name);
        return resp.getData();
    }

    /**
     * Get Sync Result for Virtual Account
     * This API is used to get the device sync info from the given smart account &amp; virtual account with the PnP database. The SAVAMapping object which has the list of devices synced since the last sync is returned in the response.
     * @param domain Smart Account Domain (required)
     * @param name Virtual Account Name (required)
     * @return ApiResponse&lt;GetSyncResultForVirtualAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSyncResultForVirtualAccountResponse> getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameWithHttpInfo(String domain, String name) throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameValidateBeforeCall(domain, name, null, null);
        Type localVarReturnType = new TypeToken<GetSyncResultForVirtualAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Sync Result for Virtual Account (asynchronously)
     * This API is used to get the device sync info from the given smart account &amp; virtual account with the PnP database. The SAVAMapping object which has the list of devices synced since the last sync is returned in the response.
     * @param domain Smart Account Domain (required)
     * @param name Virtual Account Name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameAsync(String domain, String name, final ApiCallback<GetSyncResultForVirtualAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameValidateBeforeCall(domain, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSyncResultForVirtualAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOnboardingPnpSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * View Settings
     * Get this user&#39;s list of global PnP settings
     * @return ViewSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewSettingsResponse getOnboardingPnpSettings() throws ApiException {
        ApiResponse<ViewSettingsResponse> resp = getOnboardingPnpSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * View Settings
     * Get this user&#39;s list of global PnP settings
     * @return ApiResponse&lt;ViewSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewSettingsResponse> getOnboardingPnpSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ViewSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View Settings (asynchronously)
     * Get this user&#39;s list of global PnP settings
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpSettingsAsync(final ApiCallback<ViewSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpSettingsSacct
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpSettingsSacctCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-settings/sacct";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpSettingsSacctValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOnboardingPnpSettingsSacctCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Smart Account List
     * This API is used to get list of Smart Accounts. The list of smart account domains is returned in the response.
     * @return GetSmartAccountListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSmartAccountListResponse getOnboardingPnpSettingsSacct() throws ApiException {
        ApiResponse<GetSmartAccountListResponse> resp = getOnboardingPnpSettingsSacctWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Smart Account List
     * This API is used to get list of Smart Accounts. The list of smart account domains is returned in the response.
     * @return ApiResponse&lt;GetSmartAccountListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSmartAccountListResponse> getOnboardingPnpSettingsSacctWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpSettingsSacctValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetSmartAccountListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Smart Account List (asynchronously)
     * This API is used to get list of Smart Accounts. The list of smart account domains is returned in the response.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpSettingsSacctAsync(final ApiCallback<GetSmartAccountListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpSettingsSacctValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSmartAccountListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpSettingsSacctVacctByDomain
     * @param domain Smart Account Domain (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpSettingsSacctVacctByDomainCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-settings/sacct/${domain}/vacct"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpSettingsSacctVacctByDomainValidateBeforeCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getOnboardingPnpSettingsSacctVacctByDomain(Async)");
        }
        

        com.squareup.okhttp.Call call = getOnboardingPnpSettingsSacctVacctByDomainCall(domain, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Virtual Account List
     * This API is used to get list of Virtual Accounts associated with the specified Smart Account. The list of virtual account names is returned in the response.
     * @param domain Smart Account Domain (required)
     * @return GetVirtualAccountListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetVirtualAccountListResponse getOnboardingPnpSettingsSacctVacctByDomain(String domain) throws ApiException {
        ApiResponse<GetVirtualAccountListResponse> resp = getOnboardingPnpSettingsSacctVacctByDomainWithHttpInfo(domain);
        return resp.getData();
    }

    /**
     * Get Virtual Account List
     * This API is used to get list of Virtual Accounts associated with the specified Smart Account. The list of virtual account names is returned in the response.
     * @param domain Smart Account Domain (required)
     * @return ApiResponse&lt;GetVirtualAccountListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetVirtualAccountListResponse> getOnboardingPnpSettingsSacctVacctByDomainWithHttpInfo(String domain) throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpSettingsSacctVacctByDomainValidateBeforeCall(domain, null, null);
        Type localVarReturnType = new TypeToken<GetVirtualAccountListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Virtual Account List (asynchronously)
     * This API is used to get list of Virtual Accounts associated with the specified Smart Account. The list of virtual account names is returned in the response.
     * @param domain Smart Account Domain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpSettingsSacctVacctByDomainAsync(String domain, final ApiCallback<GetVirtualAccountListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpSettingsSacctVacctByDomainValidateBeforeCall(domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetVirtualAccountListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpWorkflow
     * @param limit Limits number of results (optional)
     * @param offset Index of first result (optional)
     * @param sort Comma seperated lost of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @param type Workflow Type (optional)
     * @param name Workflow Name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpWorkflowCall(Integer limit, Integer offset, List<String> sort, String sortOrder, List<String> type, List<String> name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-workflow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (type != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "type", type));
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpWorkflowValidateBeforeCall(Integer limit, Integer offset, List<String> sort, String sortOrder, List<String> type, List<String> name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOnboardingPnpWorkflowCall(limit, offset, sort, sortOrder, type, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Workflows
     * This API is used to get the list of workflows that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 workflows.
     * @param limit Limits number of results (optional)
     * @param offset Index of first result (optional)
     * @param sort Comma seperated lost of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @param type Workflow Type (optional)
     * @param name Workflow Name (optional)
     * @return ListWorkflowsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListWorkflowsResponse getOnboardingPnpWorkflow(Integer limit, Integer offset, List<String> sort, String sortOrder, List<String> type, List<String> name) throws ApiException {
        ApiResponse<ListWorkflowsResponse> resp = getOnboardingPnpWorkflowWithHttpInfo(limit, offset, sort, sortOrder, type, name);
        return resp.getData();
    }

    /**
     * List Workflows
     * This API is used to get the list of workflows that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 workflows.
     * @param limit Limits number of results (optional)
     * @param offset Index of first result (optional)
     * @param sort Comma seperated lost of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @param type Workflow Type (optional)
     * @param name Workflow Name (optional)
     * @return ApiResponse&lt;ListWorkflowsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListWorkflowsResponse> getOnboardingPnpWorkflowWithHttpInfo(Integer limit, Integer offset, List<String> sort, String sortOrder, List<String> type, List<String> name) throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpWorkflowValidateBeforeCall(limit, offset, sort, sortOrder, type, name, null, null);
        Type localVarReturnType = new TypeToken<ListWorkflowsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Workflows (asynchronously)
     * This API is used to get the list of workflows that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 workflows.
     * @param limit Limits number of results (optional)
     * @param offset Index of first result (optional)
     * @param sort Comma seperated lost of fields to sort on (optional)
     * @param sortOrder Sort Order Ascending (asc) or Descending (des) (optional)
     * @param type Workflow Type (optional)
     * @param name Workflow Name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpWorkflowAsync(Integer limit, Integer offset, List<String> sort, String sortOrder, List<String> type, List<String> name, final ApiCallback<ListWorkflowsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpWorkflowValidateBeforeCall(limit, offset, sort, sortOrder, type, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListWorkflowsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpWorkflowById
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpWorkflowByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-workflow/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpWorkflowByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOnboardingPnpWorkflowById(Async)");
        }
        

        com.squareup.okhttp.Call call = getOnboardingPnpWorkflowByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Workflow
     * Get a workflow given its id
     * @param id id (required)
     * @return GetWorkflowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetWorkflowResponse getOnboardingPnpWorkflowById(String id) throws ApiException {
        ApiResponse<GetWorkflowResponse> resp = getOnboardingPnpWorkflowByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Workflow
     * Get a workflow given its id
     * @param id id (required)
     * @return ApiResponse&lt;GetWorkflowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetWorkflowResponse> getOnboardingPnpWorkflowByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpWorkflowByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<GetWorkflowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Workflow (asynchronously)
     * Get a workflow given its id
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpWorkflowByIdAsync(String id, final ApiCallback<GetWorkflowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpWorkflowByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetWorkflowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnboardingPnpWorkflowCount
     * @param name Workflow Name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpWorkflowCountCall(List<String> name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-workflow/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnboardingPnpWorkflowCountValidateBeforeCall(List<String> name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOnboardingPnpWorkflowCountCall(name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Workflow Count
     * This API is used to get the number of the workflows.
     * @param name Workflow Name (optional)
     * @return GetWorkflowCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetWorkflowCountResponse getOnboardingPnpWorkflowCount(List<String> name) throws ApiException {
        ApiResponse<GetWorkflowCountResponse> resp = getOnboardingPnpWorkflowCountWithHttpInfo(name);
        return resp.getData();
    }

    /**
     * Get Workflow Count
     * This API is used to get the number of the workflows.
     * @param name Workflow Name (optional)
     * @return ApiResponse&lt;GetWorkflowCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetWorkflowCountResponse> getOnboardingPnpWorkflowCountWithHttpInfo(List<String> name) throws ApiException {
        com.squareup.okhttp.Call call = getOnboardingPnpWorkflowCountValidateBeforeCall(name, null, null);
        Type localVarReturnType = new TypeToken<GetWorkflowCountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Workflow Count (asynchronously)
     * This API is used to get the number of the workflows.
     * @param name Workflow Name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnboardingPnpWorkflowCountAsync(List<String> name, final ApiCallback<GetWorkflowCountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOnboardingPnpWorkflowCountValidateBeforeCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetWorkflowCountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOnboardingPnpDevice
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceCall(Device request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOnboardingPnpDeviceValidateBeforeCall(Device request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postOnboardingPnpDevice(Async)");
        }
        

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Device
     * This API is used to add a Planned device to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.
     * @param request request (required)
     * @return CreateDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateDeviceResponse postOnboardingPnpDevice(Device request) throws ApiException {
        ApiResponse<CreateDeviceResponse> resp = postOnboardingPnpDeviceWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create Device
     * This API is used to add a Planned device to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.
     * @param request request (required)
     * @return ApiResponse&lt;CreateDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateDeviceResponse> postOnboardingPnpDeviceWithHttpInfo(Device request) throws ApiException {
        com.squareup.okhttp.Call call = postOnboardingPnpDeviceValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<CreateDeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Device (asynchronously)
     * This API is used to add a Planned device to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceAsync(Device request, final ApiCallback<CreateDeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateDeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOnboardingPnpDeviceClaim
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceClaimCall(ClaimDeviceRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/claim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOnboardingPnpDeviceClaimValidateBeforeCall(ClaimDeviceRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postOnboardingPnpDeviceClaim(Async)");
        }
        

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceClaimCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Claim Device(s)
     * This API is used to assign a project &amp; workflow (i.e. claim) one of more devices.
     * @param request request (required)
     * @return ClaimDevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClaimDevicesResponse postOnboardingPnpDeviceClaim(ClaimDeviceRequest request) throws ApiException {
        ApiResponse<ClaimDevicesResponse> resp = postOnboardingPnpDeviceClaimWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Claim Device(s)
     * This API is used to assign a project &amp; workflow (i.e. claim) one of more devices.
     * @param request request (required)
     * @return ApiResponse&lt;ClaimDevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClaimDevicesResponse> postOnboardingPnpDeviceClaimWithHttpInfo(ClaimDeviceRequest request) throws ApiException {
        com.squareup.okhttp.Call call = postOnboardingPnpDeviceClaimValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<ClaimDevicesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Claim Device(s) (asynchronously)
     * This API is used to assign a project &amp; workflow (i.e. claim) one of more devices.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceClaimAsync(ClaimDeviceRequest request, final ApiCallback<ClaimDevicesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceClaimValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClaimDevicesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOnboardingPnpDeviceImport
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceImportCall(Device request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOnboardingPnpDeviceImportValidateBeforeCall(Device request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postOnboardingPnpDeviceImport(Async)");
        }
        

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceImportCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import Many Devices
     * This API is used to import a list of Planned devices to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.
     * @param request request (required)
     * @return ImportManyDevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImportManyDevicesResponse postOnboardingPnpDeviceImport(Device request) throws ApiException {
        ApiResponse<ImportManyDevicesResponse> resp = postOnboardingPnpDeviceImportWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Import Many Devices
     * This API is used to import a list of Planned devices to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.
     * @param request request (required)
     * @return ApiResponse&lt;ImportManyDevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImportManyDevicesResponse> postOnboardingPnpDeviceImportWithHttpInfo(Device request) throws ApiException {
        com.squareup.okhttp.Call call = postOnboardingPnpDeviceImportValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<ImportManyDevicesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import Many Devices (asynchronously)
     * This API is used to import a list of Planned devices to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceImportAsync(Device request, final ApiCallback<ImportManyDevicesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceImportValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImportManyDevicesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOnboardingPnpDeviceProvision
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceProvisionCall(PushProvisionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/provision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOnboardingPnpDeviceProvisionValidateBeforeCall(PushProvisionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postOnboardingPnpDeviceProvision(Async)");
        }
        

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceProvisionCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Provision Device
     * This API is used push one or more devices to Provisoned state and add them to inventory.
     * @param request request (required)
     * @return ProvisionDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvisionDeviceResponse postOnboardingPnpDeviceProvision(PushProvisionRequest request) throws ApiException {
        ApiResponse<ProvisionDeviceResponse> resp = postOnboardingPnpDeviceProvisionWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Provision Device
     * This API is used push one or more devices to Provisoned state and add them to inventory.
     * @param request request (required)
     * @return ApiResponse&lt;ProvisionDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvisionDeviceResponse> postOnboardingPnpDeviceProvisionWithHttpInfo(PushProvisionRequest request) throws ApiException {
        com.squareup.okhttp.Call call = postOnboardingPnpDeviceProvisionValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<ProvisionDeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Provision Device (asynchronously)
     * This API is used push one or more devices to Provisoned state and add them to inventory.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceProvisionAsync(PushProvisionRequest request, final ApiCallback<ProvisionDeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceProvisionValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvisionDeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOnboardingPnpDeviceReset
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceResetCall(ResetRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOnboardingPnpDeviceResetValidateBeforeCall(ResetRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postOnboardingPnpDeviceReset(Async)");
        }
        

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceResetCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reset Device
     * This API is used to recover a device from a Workflow Execution Error state.
     * @param request request (required)
     * @return ResetDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResetDeviceResponse postOnboardingPnpDeviceReset(ResetRequest request) throws ApiException {
        ApiResponse<ResetDeviceResponse> resp = postOnboardingPnpDeviceResetWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Reset Device
     * This API is used to recover a device from a Workflow Execution Error state.
     * @param request request (required)
     * @return ApiResponse&lt;ResetDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResetDeviceResponse> postOnboardingPnpDeviceResetWithHttpInfo(ResetRequest request) throws ApiException {
        com.squareup.okhttp.Call call = postOnboardingPnpDeviceResetValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<ResetDeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reset Device (asynchronously)
     * This API is used to recover a device from a Workflow Execution Error state.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceResetAsync(ResetRequest request, final ApiCallback<ResetDeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceResetValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResetDeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOnboardingPnpDeviceUnclaim
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceUnclaimCall(UnclaimRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/unclaim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOnboardingPnpDeviceUnclaimValidateBeforeCall(UnclaimRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postOnboardingPnpDeviceUnclaim(Async)");
        }
        

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceUnclaimCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Un-Claim Device
     * This API is used to unassign the project and workflow from one or more device.A device can only be unclaimed if it has not begun provisioning.
     * @param request request (required)
     * @return UnClaimDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnClaimDeviceResponse postOnboardingPnpDeviceUnclaim(UnclaimRequest request) throws ApiException {
        ApiResponse<UnClaimDeviceResponse> resp = postOnboardingPnpDeviceUnclaimWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Un-Claim Device
     * This API is used to unassign the project and workflow from one or more device.A device can only be unclaimed if it has not begun provisioning.
     * @param request request (required)
     * @return ApiResponse&lt;UnClaimDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnClaimDeviceResponse> postOnboardingPnpDeviceUnclaimWithHttpInfo(UnclaimRequest request) throws ApiException {
        com.squareup.okhttp.Call call = postOnboardingPnpDeviceUnclaimValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<UnClaimDeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Un-Claim Device (asynchronously)
     * This API is used to unassign the project and workflow from one or more device.A device can only be unclaimed if it has not begun provisioning.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceUnclaimAsync(UnclaimRequest request, final ApiCallback<UnClaimDeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceUnclaimValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnClaimDeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOnboardingPnpDeviceVacctSync
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceVacctSyncCall(SAVAMapping request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/vacct-sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOnboardingPnpDeviceVacctSyncValidateBeforeCall(SAVAMapping request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postOnboardingPnpDeviceVacctSync(Async)");
        }
        

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceVacctSyncCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sync Virtual Account Devices
     * This API is used to sync the device info from the given smart account &amp; virtual account with the PnP database. The list of synced devices is returned in the response.
     * @param request request (required)
     * @return SyncVirtualAccountDevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncVirtualAccountDevicesResponse postOnboardingPnpDeviceVacctSync(SAVAMapping request) throws ApiException {
        ApiResponse<SyncVirtualAccountDevicesResponse> resp = postOnboardingPnpDeviceVacctSyncWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Sync Virtual Account Devices
     * This API is used to sync the device info from the given smart account &amp; virtual account with the PnP database. The list of synced devices is returned in the response.
     * @param request request (required)
     * @return ApiResponse&lt;SyncVirtualAccountDevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncVirtualAccountDevicesResponse> postOnboardingPnpDeviceVacctSyncWithHttpInfo(SAVAMapping request) throws ApiException {
        com.squareup.okhttp.Call call = postOnboardingPnpDeviceVacctSyncValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<SyncVirtualAccountDevicesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sync Virtual Account Devices (asynchronously)
     * This API is used to sync the device info from the given smart account &amp; virtual account with the PnP database. The list of synced devices is returned in the response.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpDeviceVacctSyncAsync(SAVAMapping request, final ApiCallback<SyncVirtualAccountDevicesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOnboardingPnpDeviceVacctSyncValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncVirtualAccountDevicesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOnboardingPnpSettingsSavacct
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpSettingsSavacctCall(SAVAMapping request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-settings/savacct";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOnboardingPnpSettingsSavacctValidateBeforeCall(SAVAMapping request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postOnboardingPnpSettingsSavacct(Async)");
        }
        

        com.squareup.okhttp.Call call = postOnboardingPnpSettingsSavacctCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add Virtual Account
     * This API is used to register a Smart Account, Virtual Account and the relevant server profile info with the PnP System &amp; database. The devices present in the registered virtual account are synced with the PnP database as well. The new profile is returned in the response.
     * @param request request (required)
     * @return AddVirtualAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddVirtualAccountResponse postOnboardingPnpSettingsSavacct(SAVAMapping request) throws ApiException {
        ApiResponse<AddVirtualAccountResponse> resp = postOnboardingPnpSettingsSavacctWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Add Virtual Account
     * This API is used to register a Smart Account, Virtual Account and the relevant server profile info with the PnP System &amp; database. The devices present in the registered virtual account are synced with the PnP database as well. The new profile is returned in the response.
     * @param request request (required)
     * @return ApiResponse&lt;AddVirtualAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddVirtualAccountResponse> postOnboardingPnpSettingsSavacctWithHttpInfo(SAVAMapping request) throws ApiException {
        com.squareup.okhttp.Call call = postOnboardingPnpSettingsSavacctValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<AddVirtualAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Virtual Account (asynchronously)
     * This API is used to register a Smart Account, Virtual Account and the relevant server profile info with the PnP System &amp; database. The devices present in the registered virtual account are synced with the PnP database as well. The new profile is returned in the response.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpSettingsSavacctAsync(SAVAMapping request, final ApiCallback<AddVirtualAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOnboardingPnpSettingsSavacctValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddVirtualAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOnboardingPnpWorkflow
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpWorkflowCall(Workflow request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-workflow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOnboardingPnpWorkflowValidateBeforeCall(Workflow request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postOnboardingPnpWorkflow(Async)");
        }
        

        com.squareup.okhttp.Call call = postOnboardingPnpWorkflowCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Workflow
     * This API is used to add a PnP Workflow along with the relevant tasks in the workflow into the PnP database.
     * @param request request (required)
     * @return CreateWorkflowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateWorkflowResponse postOnboardingPnpWorkflow(Workflow request) throws ApiException {
        ApiResponse<CreateWorkflowResponse> resp = postOnboardingPnpWorkflowWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create Workflow
     * This API is used to add a PnP Workflow along with the relevant tasks in the workflow into the PnP database.
     * @param request request (required)
     * @return ApiResponse&lt;CreateWorkflowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateWorkflowResponse> postOnboardingPnpWorkflowWithHttpInfo(Workflow request) throws ApiException {
        com.squareup.okhttp.Call call = postOnboardingPnpWorkflowValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<CreateWorkflowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Workflow (asynchronously)
     * This API is used to add a PnP Workflow along with the relevant tasks in the workflow into the PnP database.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOnboardingPnpWorkflowAsync(Workflow request, final ApiCallback<CreateWorkflowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOnboardingPnpWorkflowValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateWorkflowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putOnboardingPnpDeviceById
     * @param request request (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putOnboardingPnpDeviceByIdCall(Device request, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-device/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putOnboardingPnpDeviceByIdValidateBeforeCall(Device request, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putOnboardingPnpDeviceById(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOnboardingPnpDeviceById(Async)");
        }
        

        com.squareup.okhttp.Call call = putOnboardingPnpDeviceByIdCall(request, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Device
     * This API is used to update device details of a device that exists in the PnP database.
     * @param request request (required)
     * @param id id (required)
     * @return UpdateDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateDeviceResponse putOnboardingPnpDeviceById(Device request, String id) throws ApiException {
        ApiResponse<UpdateDeviceResponse> resp = putOnboardingPnpDeviceByIdWithHttpInfo(request, id);
        return resp.getData();
    }

    /**
     * Update Device
     * This API is used to update device details of a device that exists in the PnP database.
     * @param request request (required)
     * @param id id (required)
     * @return ApiResponse&lt;UpdateDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateDeviceResponse> putOnboardingPnpDeviceByIdWithHttpInfo(Device request, String id) throws ApiException {
        com.squareup.okhttp.Call call = putOnboardingPnpDeviceByIdValidateBeforeCall(request, id, null, null);
        Type localVarReturnType = new TypeToken<UpdateDeviceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Device (asynchronously)
     * This API is used to update device details of a device that exists in the PnP database.
     * @param request request (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putOnboardingPnpDeviceByIdAsync(Device request, String id, final ApiCallback<UpdateDeviceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putOnboardingPnpDeviceByIdValidateBeforeCall(request, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateDeviceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putOnboardingPnpSettings
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putOnboardingPnpSettingsCall(Settings request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putOnboardingPnpSettingsValidateBeforeCall(Settings request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putOnboardingPnpSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = putOnboardingPnpSettingsCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Settings
     * Change this user&#39;s list of global PnP settings
     * @param request request (required)
     * @return UpdateSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateSettingsResponse putOnboardingPnpSettings(Settings request) throws ApiException {
        ApiResponse<UpdateSettingsResponse> resp = putOnboardingPnpSettingsWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Update Settings
     * Change this user&#39;s list of global PnP settings
     * @param request request (required)
     * @return ApiResponse&lt;UpdateSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateSettingsResponse> putOnboardingPnpSettingsWithHttpInfo(Settings request) throws ApiException {
        com.squareup.okhttp.Call call = putOnboardingPnpSettingsValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<UpdateSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Settings (asynchronously)
     * Change this user&#39;s list of global PnP settings
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putOnboardingPnpSettingsAsync(Settings request, final ApiCallback<UpdateSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putOnboardingPnpSettingsValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putOnboardingPnpSettingsSavacct
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putOnboardingPnpSettingsSavacctCall(SAVAMapping request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-settings/savacct";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putOnboardingPnpSettingsSavacctValidateBeforeCall(SAVAMapping request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putOnboardingPnpSettingsSavacct(Async)");
        }
        

        com.squareup.okhttp.Call call = putOnboardingPnpSettingsSavacctCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit PnP Server Profile
     * This API is used to edit the PnP Server profile in a registered Virtual Account in the PnP database.The edited smart &amp; virtual account info is returned in the response.
     * @param request request (required)
     * @return EditPnPServerProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EditPnPServerProfileResponse putOnboardingPnpSettingsSavacct(SAVAMapping request) throws ApiException {
        ApiResponse<EditPnPServerProfileResponse> resp = putOnboardingPnpSettingsSavacctWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Edit PnP Server Profile
     * This API is used to edit the PnP Server profile in a registered Virtual Account in the PnP database.The edited smart &amp; virtual account info is returned in the response.
     * @param request request (required)
     * @return ApiResponse&lt;EditPnPServerProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EditPnPServerProfileResponse> putOnboardingPnpSettingsSavacctWithHttpInfo(SAVAMapping request) throws ApiException {
        com.squareup.okhttp.Call call = putOnboardingPnpSettingsSavacctValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<EditPnPServerProfileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Edit PnP Server Profile (asynchronously)
     * This API is used to edit the PnP Server profile in a registered Virtual Account in the PnP database.The edited smart &amp; virtual account info is returned in the response.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putOnboardingPnpSettingsSavacctAsync(SAVAMapping request, final ApiCallback<EditPnPServerProfileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putOnboardingPnpSettingsSavacctValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EditPnPServerProfileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putOnboardingPnpWorkflowById
     * @param request request (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putOnboardingPnpWorkflowByIdCall(Workflow request, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/onboarding/pnp-workflow/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putOnboardingPnpWorkflowByIdValidateBeforeCall(Workflow request, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putOnboardingPnpWorkflowById(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOnboardingPnpWorkflowById(Async)");
        }
        

        com.squareup.okhttp.Call call = putOnboardingPnpWorkflowByIdCall(request, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Workflow
     * Update an existing workflow
     * @param request request (required)
     * @param id id (required)
     * @return UpdateWorkflowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateWorkflowResponse putOnboardingPnpWorkflowById(Workflow request, String id) throws ApiException {
        ApiResponse<UpdateWorkflowResponse> resp = putOnboardingPnpWorkflowByIdWithHttpInfo(request, id);
        return resp.getData();
    }

    /**
     * Update Workflow
     * Update an existing workflow
     * @param request request (required)
     * @param id id (required)
     * @return ApiResponse&lt;UpdateWorkflowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateWorkflowResponse> putOnboardingPnpWorkflowByIdWithHttpInfo(Workflow request, String id) throws ApiException {
        com.squareup.okhttp.Call call = putOnboardingPnpWorkflowByIdValidateBeforeCall(request, id, null, null);
        Type localVarReturnType = new TypeToken<UpdateWorkflowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Workflow (asynchronously)
     * Update an existing workflow
     * @param request request (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putOnboardingPnpWorkflowByIdAsync(Workflow request, String id, final ApiCallback<UpdateWorkflowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putOnboardingPnpWorkflowByIdValidateBeforeCall(request, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateWorkflowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
