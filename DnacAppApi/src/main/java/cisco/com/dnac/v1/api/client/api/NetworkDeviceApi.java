/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiCallback;
import cisco.com.dnac.v1.api.client.ApiClient;
import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.ApiResponse;
import cisco.com.dnac.v1.api.client.Configuration;
import cisco.com.dnac.v1.api.client.Pair;
import cisco.com.dnac.v1.api.client.ProgressRequestBody;
import cisco.com.dnac.v1.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cisco.com.dnac.v1.api.client.model.CommandRunnerDTO;
import cisco.com.dnac.v1.api.client.model.CountResult;
import cisco.com.dnac.v1.api.client.model.ExportDeviceDTO;
import cisco.com.dnac.v1.api.client.model.FunctionalCapabilityListResult;
import cisco.com.dnac.v1.api.client.model.FunctionalCapabilityResult;
import cisco.com.dnac.v1.api.client.model.InventoryDeviceInfo;
import cisco.com.dnac.v1.api.client.model.LegitCliKeyResult;
import cisco.com.dnac.v1.api.client.model.ModuleListResult;
import cisco.com.dnac.v1.api.client.model.ModuleResult;
import cisco.com.dnac.v1.api.client.model.NetworkDeviceBriefNIO;
import cisco.com.dnac.v1.api.client.model.NetworkDeviceBriefNIOResult;
import cisco.com.dnac.v1.api.client.model.NetworkDeviceListResult;
import cisco.com.dnac.v1.api.client.model.NetworkDeviceResult;
import cisco.com.dnac.v1.api.client.model.NetworkDeviceSyncApiRequest;
import cisco.com.dnac.v1.api.client.model.RawCliInfoNIOListResult;
import cisco.com.dnac.v1.api.client.model.RegisterNetworkDeviceResult;
import cisco.com.dnac.v1.api.client.model.RetrievesAllNetworkDevicesResponse;
import cisco.com.dnac.v1.api.client.model.SuccessResult;
import cisco.com.dnac.v1.api.client.model.SuccessResultList;
import cisco.com.dnac.v1.api.client.model.TaskIdResult;
import cisco.com.dnac.v1.api.client.model.VlanListResult;
import cisco.com.dnac.v1.api.client.model.WirelessInfoResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkDeviceApi {
    private ApiClient apiClient;

    public NetworkDeviceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkDeviceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteNetworkDeviceById
     * @param id Device ID (required)
     * @param isForceDelete isForceDelete (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNetworkDeviceByIdCall(String id, Boolean isForceDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isForceDelete != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isForceDelete", isForceDelete));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNetworkDeviceByIdValidateBeforeCall(String id, Boolean isForceDelete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteNetworkDeviceById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNetworkDeviceByIdCall(id, isForceDelete, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete network device by ID
     * Removes the network device for the given ID
     * @param id Device ID (required)
     * @param isForceDelete isForceDelete (optional)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult deleteNetworkDeviceById(String id, Boolean isForceDelete) throws ApiException {
        ApiResponse<TaskIdResult> resp = deleteNetworkDeviceByIdWithHttpInfo(id, isForceDelete);
        return resp.getData();
    }

    /**
     * Delete network device by ID
     * Removes the network device for the given ID
     * @param id Device ID (required)
     * @param isForceDelete isForceDelete (optional)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> deleteNetworkDeviceByIdWithHttpInfo(String id, Boolean isForceDelete) throws ApiException {
        com.squareup.okhttp.Call call = deleteNetworkDeviceByIdValidateBeforeCall(id, isForceDelete, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete network device by ID (asynchronously)
     * Removes the network device for the given ID
     * @param id Device ID (required)
     * @param isForceDelete isForceDelete (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNetworkDeviceByIdAsync(String id, Boolean isForceDelete, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNetworkDeviceByIdValidateBeforeCall(id, isForceDelete, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDevice
     * @param hostname hostname (optional)
     * @param managementIpAddress managementIpAddress (optional)
     * @param macAddress macAddress (optional)
     * @param locationName locationName (optional)
     * @param serialNumber serialNumber (optional)
     * @param location location (optional)
     * @param family family (optional)
     * @param type type (optional)
     * @param series series (optional)
     * @param collectionStatus collectionStatus (optional)
     * @param collectionInterval collectionInterval (optional)
     * @param notSyncedForMinutes notSyncedForMinutes (optional)
     * @param errorCode errorCode (optional)
     * @param errorDescription errorDescription (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param softwareType softwareType (optional)
     * @param platformId platformId (optional)
     * @param role role (optional)
     * @param reachabilityStatus reachabilityStatus (optional)
     * @param upTime upTime (optional)
     * @param associatedWlcIp associatedWlcIp (optional)
     * @param licenseName licenseName (optional)
     * @param licenseType licenseType (optional)
     * @param licenseStatus licenseStatus (optional)
     * @param modulename moduleName (optional)
     * @param moduleequpimenttype moduleEqupimentType (optional)
     * @param moduleservicestate moduleServiceState (optional)
     * @param modulevendorequipmenttype moduleVendorEquipmentType (optional)
     * @param modulepartnumber modulePartNumber (optional)
     * @param moduleoperationstatecode moduleOperationStateCode (optional)
     * @param id Accepts comma separated id&#39;s and return list of network-devices for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceCall(List<String> hostname, List<String> managementIpAddress, List<String> macAddress, List<String> locationName, List<String> serialNumber, List<String> location, List<String> family, List<String> type, List<String> series, List<String> collectionStatus, List<String> collectionInterval, List<String> notSyncedForMinutes, List<String> errorCode, List<String> errorDescription, List<String> softwareVersion, List<String> softwareType, List<String> platformId, List<String> role, List<String> reachabilityStatus, List<String> upTime, List<String> associatedWlcIp, List<String> licenseName, List<String> licenseType, List<String> licenseStatus, List<String> modulename, List<String> moduleequpimenttype, List<String> moduleservicestate, List<String> modulevendorequipmenttype, List<String> modulepartnumber, List<String> moduleoperationstatecode, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hostname != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "hostname", hostname));
        if (managementIpAddress != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "managementIpAddress", managementIpAddress));
        if (macAddress != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "macAddress", macAddress));
        if (locationName != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "locationName", locationName));
        if (serialNumber != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "serialNumber", serialNumber));
        if (location != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "location", location));
        if (family != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "family", family));
        if (type != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "type", type));
        if (series != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "series", series));
        if (collectionStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "collectionStatus", collectionStatus));
        if (collectionInterval != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "collectionInterval", collectionInterval));
        if (notSyncedForMinutes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "notSyncedForMinutes", notSyncedForMinutes));
        if (errorCode != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "errorCode", errorCode));
        if (errorDescription != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "errorDescription", errorDescription));
        if (softwareVersion != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "softwareVersion", softwareVersion));
        if (softwareType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "softwareType", softwareType));
        if (platformId != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "platformId", platformId));
        if (role != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "role", role));
        if (reachabilityStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "reachabilityStatus", reachabilityStatus));
        if (upTime != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "upTime", upTime));
        if (associatedWlcIp != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "associatedWlcIp", associatedWlcIp));
        if (licenseName != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "license.name", licenseName));
        if (licenseType != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "license.type", licenseType));
        if (licenseStatus != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "license.status", licenseStatus));
        if (modulename != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "module+name", modulename));
        if (moduleequpimenttype != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "module+equpimenttype", moduleequpimenttype));
        if (moduleservicestate != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "module+servicestate", moduleservicestate));
        if (modulevendorequipmenttype != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "module+vendorequipmenttype", modulevendorequipmenttype));
        if (modulepartnumber != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "module+partnumber", modulepartnumber));
        if (moduleoperationstatecode != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "module+operationstatecode", moduleoperationstatecode));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceValidateBeforeCall(List<String> hostname, List<String> managementIpAddress, List<String> macAddress, List<String> locationName, List<String> serialNumber, List<String> location, List<String> family, List<String> type, List<String> series, List<String> collectionStatus, List<String> collectionInterval, List<String> notSyncedForMinutes, List<String> errorCode, List<String> errorDescription, List<String> softwareVersion, List<String> softwareType, List<String> platformId, List<String> role, List<String> reachabilityStatus, List<String> upTime, List<String> associatedWlcIp, List<String> licenseName, List<String> licenseType, List<String> licenseStatus, List<String> modulename, List<String> moduleequpimenttype, List<String> moduleservicestate, List<String> modulevendorequipmenttype, List<String> modulepartnumber, List<String> moduleoperationstatecode, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNetworkDeviceCall(hostname, managementIpAddress, macAddress, locationName, serialNumber, location, family, type, series, collectionStatus, collectionInterval, notSyncedForMinutes, errorCode, errorDescription, softwareVersion, softwareType, platformId, role, reachabilityStatus, upTime, associatedWlcIp, licenseName, licenseType, licenseStatus, modulename, moduleequpimenttype, moduleservicestate, modulevendorequipmenttype, modulepartnumber, moduleoperationstatecode, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves all network devices
     * Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id&#39;s and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.
     * @param hostname hostname (optional)
     * @param managementIpAddress managementIpAddress (optional)
     * @param macAddress macAddress (optional)
     * @param locationName locationName (optional)
     * @param serialNumber serialNumber (optional)
     * @param location location (optional)
     * @param family family (optional)
     * @param type type (optional)
     * @param series series (optional)
     * @param collectionStatus collectionStatus (optional)
     * @param collectionInterval collectionInterval (optional)
     * @param notSyncedForMinutes notSyncedForMinutes (optional)
     * @param errorCode errorCode (optional)
     * @param errorDescription errorDescription (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param softwareType softwareType (optional)
     * @param platformId platformId (optional)
     * @param role role (optional)
     * @param reachabilityStatus reachabilityStatus (optional)
     * @param upTime upTime (optional)
     * @param associatedWlcIp associatedWlcIp (optional)
     * @param licenseName licenseName (optional)
     * @param licenseType licenseType (optional)
     * @param licenseStatus licenseStatus (optional)
     * @param modulename moduleName (optional)
     * @param moduleequpimenttype moduleEqupimentType (optional)
     * @param moduleservicestate moduleServiceState (optional)
     * @param modulevendorequipmenttype moduleVendorEquipmentType (optional)
     * @param modulepartnumber modulePartNumber (optional)
     * @param moduleoperationstatecode moduleOperationStateCode (optional)
     * @param id Accepts comma separated id&#39;s and return list of network-devices for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @return NetworkDeviceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkDeviceListResult getNetworkDevice(List<String> hostname, List<String> managementIpAddress, List<String> macAddress, List<String> locationName, List<String> serialNumber, List<String> location, List<String> family, List<String> type, List<String> series, List<String> collectionStatus, List<String> collectionInterval, List<String> notSyncedForMinutes, List<String> errorCode, List<String> errorDescription, List<String> softwareVersion, List<String> softwareType, List<String> platformId, List<String> role, List<String> reachabilityStatus, List<String> upTime, List<String> associatedWlcIp, List<String> licenseName, List<String> licenseType, List<String> licenseStatus, List<String> modulename, List<String> moduleequpimenttype, List<String> moduleservicestate, List<String> modulevendorequipmenttype, List<String> modulepartnumber, List<String> moduleoperationstatecode, String id) throws ApiException {
        ApiResponse<NetworkDeviceListResult> resp = getNetworkDeviceWithHttpInfo(hostname, managementIpAddress, macAddress, locationName, serialNumber, location, family, type, series, collectionStatus, collectionInterval, notSyncedForMinutes, errorCode, errorDescription, softwareVersion, softwareType, platformId, role, reachabilityStatus, upTime, associatedWlcIp, licenseName, licenseType, licenseStatus, modulename, moduleequpimenttype, moduleservicestate, modulevendorequipmenttype, modulepartnumber, moduleoperationstatecode, id);
        return resp.getData();
    }

    /**
     * Retrieves all network devices
     * Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id&#39;s and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.
     * @param hostname hostname (optional)
     * @param managementIpAddress managementIpAddress (optional)
     * @param macAddress macAddress (optional)
     * @param locationName locationName (optional)
     * @param serialNumber serialNumber (optional)
     * @param location location (optional)
     * @param family family (optional)
     * @param type type (optional)
     * @param series series (optional)
     * @param collectionStatus collectionStatus (optional)
     * @param collectionInterval collectionInterval (optional)
     * @param notSyncedForMinutes notSyncedForMinutes (optional)
     * @param errorCode errorCode (optional)
     * @param errorDescription errorDescription (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param softwareType softwareType (optional)
     * @param platformId platformId (optional)
     * @param role role (optional)
     * @param reachabilityStatus reachabilityStatus (optional)
     * @param upTime upTime (optional)
     * @param associatedWlcIp associatedWlcIp (optional)
     * @param licenseName licenseName (optional)
     * @param licenseType licenseType (optional)
     * @param licenseStatus licenseStatus (optional)
     * @param modulename moduleName (optional)
     * @param moduleequpimenttype moduleEqupimentType (optional)
     * @param moduleservicestate moduleServiceState (optional)
     * @param modulevendorequipmenttype moduleVendorEquipmentType (optional)
     * @param modulepartnumber modulePartNumber (optional)
     * @param moduleoperationstatecode moduleOperationStateCode (optional)
     * @param id Accepts comma separated id&#39;s and return list of network-devices for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @return ApiResponse&lt;NetworkDeviceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkDeviceListResult> getNetworkDeviceWithHttpInfo(List<String> hostname, List<String> managementIpAddress, List<String> macAddress, List<String> locationName, List<String> serialNumber, List<String> location, List<String> family, List<String> type, List<String> series, List<String> collectionStatus, List<String> collectionInterval, List<String> notSyncedForMinutes, List<String> errorCode, List<String> errorDescription, List<String> softwareVersion, List<String> softwareType, List<String> platformId, List<String> role, List<String> reachabilityStatus, List<String> upTime, List<String> associatedWlcIp, List<String> licenseName, List<String> licenseType, List<String> licenseStatus, List<String> modulename, List<String> moduleequpimenttype, List<String> moduleservicestate, List<String> modulevendorequipmenttype, List<String> modulepartnumber, List<String> moduleoperationstatecode, String id) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceValidateBeforeCall(hostname, managementIpAddress, macAddress, locationName, serialNumber, location, family, type, series, collectionStatus, collectionInterval, notSyncedForMinutes, errorCode, errorDescription, softwareVersion, softwareType, platformId, role, reachabilityStatus, upTime, associatedWlcIp, licenseName, licenseType, licenseStatus, modulename, moduleequpimenttype, moduleservicestate, modulevendorequipmenttype, modulepartnumber, moduleoperationstatecode, id, null, null);
        Type localVarReturnType = new TypeToken<NetworkDeviceListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves all network devices (asynchronously)
     * Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id&#39;s and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.
     * @param hostname hostname (optional)
     * @param managementIpAddress managementIpAddress (optional)
     * @param macAddress macAddress (optional)
     * @param locationName locationName (optional)
     * @param serialNumber serialNumber (optional)
     * @param location location (optional)
     * @param family family (optional)
     * @param type type (optional)
     * @param series series (optional)
     * @param collectionStatus collectionStatus (optional)
     * @param collectionInterval collectionInterval (optional)
     * @param notSyncedForMinutes notSyncedForMinutes (optional)
     * @param errorCode errorCode (optional)
     * @param errorDescription errorDescription (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param softwareType softwareType (optional)
     * @param platformId platformId (optional)
     * @param role role (optional)
     * @param reachabilityStatus reachabilityStatus (optional)
     * @param upTime upTime (optional)
     * @param associatedWlcIp associatedWlcIp (optional)
     * @param licenseName licenseName (optional)
     * @param licenseType licenseType (optional)
     * @param licenseStatus licenseStatus (optional)
     * @param modulename moduleName (optional)
     * @param moduleequpimenttype moduleEqupimentType (optional)
     * @param moduleservicestate moduleServiceState (optional)
     * @param modulevendorequipmenttype moduleVendorEquipmentType (optional)
     * @param modulepartnumber modulePartNumber (optional)
     * @param moduleoperationstatecode moduleOperationStateCode (optional)
     * @param id Accepts comma separated id&#39;s and return list of network-devices for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceAsync(List<String> hostname, List<String> managementIpAddress, List<String> macAddress, List<String> locationName, List<String> serialNumber, List<String> location, List<String> family, List<String> type, List<String> series, List<String> collectionStatus, List<String> collectionInterval, List<String> notSyncedForMinutes, List<String> errorCode, List<String> errorDescription, List<String> softwareVersion, List<String> softwareType, List<String> platformId, List<String> role, List<String> reachabilityStatus, List<String> upTime, List<String> associatedWlcIp, List<String> licenseName, List<String> licenseType, List<String> licenseStatus, List<String> modulename, List<String> moduleequpimenttype, List<String> moduleservicestate, List<String> modulevendorequipmenttype, List<String> modulepartnumber, List<String> moduleoperationstatecode, String id, final ApiCallback<NetworkDeviceListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceValidateBeforeCall(hostname, managementIpAddress, macAddress, locationName, serialNumber, location, family, type, series, collectionStatus, collectionInterval, notSyncedForMinutes, errorCode, errorDescription, softwareVersion, softwareType, platformId, role, reachabilityStatus, upTime, associatedWlcIp, licenseName, licenseType, licenseStatus, modulename, moduleequpimenttype, moduleservicestate, modulevendorequipmenttype, modulepartnumber, moduleoperationstatecode, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkDeviceListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceAutocomplete
     * @param vrfName vrfName (optional)
     * @param managementIpAddress managementIpAddress (optional)
     * @param hostname hostname (optional)
     * @param macAddress macAddress (optional)
     * @param family family (optional)
     * @param collectionStatus collectionStatus (optional)
     * @param collectionInterval collectionInterval (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param softwareType softwareType (optional)
     * @param reachabilityStatus reachabilityStatus (optional)
     * @param reachabilityFailureReason reachabilityFailureReason (optional)
     * @param errorCode errorCode (optional)
     * @param platformId platformId (optional)
     * @param series series (optional)
     * @param type type (optional)
     * @param serialNumber serialNumber (optional)
     * @param upTime upTime (optional)
     * @param role role (optional)
     * @param roleSource roleSource (optional)
     * @param associatedWlcIp associatedWlcIp (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceAutocompleteCall(String vrfName, String managementIpAddress, String hostname, String macAddress, String family, String collectionStatus, String collectionInterval, String softwareVersion, String softwareType, String reachabilityStatus, String reachabilityFailureReason, String errorCode, String platformId, String series, String type, String serialNumber, String upTime, String role, String roleSource, String associatedWlcIp, String offset, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vrfName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vrfName", vrfName));
        if (managementIpAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("managementIpAddress", managementIpAddress));
        if (hostname != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hostname", hostname));
        if (macAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("macAddress", macAddress));
        if (family != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("family", family));
        if (collectionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("collectionStatus", collectionStatus));
        if (collectionInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("collectionInterval", collectionInterval));
        if (softwareVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("softwareVersion", softwareVersion));
        if (softwareType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("softwareType", softwareType));
        if (reachabilityStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reachabilityStatus", reachabilityStatus));
        if (reachabilityFailureReason != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reachabilityFailureReason", reachabilityFailureReason));
        if (errorCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("errorCode", errorCode));
        if (platformId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("platformId", platformId));
        if (series != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("series", series));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (serialNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serialNumber", serialNumber));
        if (upTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("upTime", upTime));
        if (role != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        if (roleSource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("roleSource", roleSource));
        if (associatedWlcIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("associatedWlcIp", associatedWlcIp));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceAutocompleteValidateBeforeCall(String vrfName, String managementIpAddress, String hostname, String macAddress, String family, String collectionStatus, String collectionInterval, String softwareVersion, String softwareType, String reachabilityStatus, String reachabilityFailureReason, String errorCode, String platformId, String series, String type, String serialNumber, String upTime, String role, String roleSource, String associatedWlcIp, String offset, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNetworkDeviceAutocompleteCall(vrfName, managementIpAddress, hostname, macAddress, family, collectionStatus, collectionInterval, softwareVersion, softwareType, reachabilityStatus, reachabilityFailureReason, errorCode, platformId, series, type, serialNumber, upTime, role, roleSource, associatedWlcIp, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves all network devices
     * Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id&#39;s and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.
     * @param vrfName vrfName (optional)
     * @param managementIpAddress managementIpAddress (optional)
     * @param hostname hostname (optional)
     * @param macAddress macAddress (optional)
     * @param family family (optional)
     * @param collectionStatus collectionStatus (optional)
     * @param collectionInterval collectionInterval (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param softwareType softwareType (optional)
     * @param reachabilityStatus reachabilityStatus (optional)
     * @param reachabilityFailureReason reachabilityFailureReason (optional)
     * @param errorCode errorCode (optional)
     * @param platformId platformId (optional)
     * @param series series (optional)
     * @param type type (optional)
     * @param serialNumber serialNumber (optional)
     * @param upTime upTime (optional)
     * @param role role (optional)
     * @param roleSource roleSource (optional)
     * @param associatedWlcIp associatedWlcIp (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @return RetrievesAllNetworkDevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrievesAllNetworkDevicesResponse getNetworkDeviceAutocomplete(String vrfName, String managementIpAddress, String hostname, String macAddress, String family, String collectionStatus, String collectionInterval, String softwareVersion, String softwareType, String reachabilityStatus, String reachabilityFailureReason, String errorCode, String platformId, String series, String type, String serialNumber, String upTime, String role, String roleSource, String associatedWlcIp, String offset, String limit) throws ApiException {
        ApiResponse<RetrievesAllNetworkDevicesResponse> resp = getNetworkDeviceAutocompleteWithHttpInfo(vrfName, managementIpAddress, hostname, macAddress, family, collectionStatus, collectionInterval, softwareVersion, softwareType, reachabilityStatus, reachabilityFailureReason, errorCode, platformId, series, type, serialNumber, upTime, role, roleSource, associatedWlcIp, offset, limit);
        return resp.getData();
    }

    /**
     * Retrieves all network devices
     * Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id&#39;s and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.
     * @param vrfName vrfName (optional)
     * @param managementIpAddress managementIpAddress (optional)
     * @param hostname hostname (optional)
     * @param macAddress macAddress (optional)
     * @param family family (optional)
     * @param collectionStatus collectionStatus (optional)
     * @param collectionInterval collectionInterval (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param softwareType softwareType (optional)
     * @param reachabilityStatus reachabilityStatus (optional)
     * @param reachabilityFailureReason reachabilityFailureReason (optional)
     * @param errorCode errorCode (optional)
     * @param platformId platformId (optional)
     * @param series series (optional)
     * @param type type (optional)
     * @param serialNumber serialNumber (optional)
     * @param upTime upTime (optional)
     * @param role role (optional)
     * @param roleSource roleSource (optional)
     * @param associatedWlcIp associatedWlcIp (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @return ApiResponse&lt;RetrievesAllNetworkDevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrievesAllNetworkDevicesResponse> getNetworkDeviceAutocompleteWithHttpInfo(String vrfName, String managementIpAddress, String hostname, String macAddress, String family, String collectionStatus, String collectionInterval, String softwareVersion, String softwareType, String reachabilityStatus, String reachabilityFailureReason, String errorCode, String platformId, String series, String type, String serialNumber, String upTime, String role, String roleSource, String associatedWlcIp, String offset, String limit) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceAutocompleteValidateBeforeCall(vrfName, managementIpAddress, hostname, macAddress, family, collectionStatus, collectionInterval, softwareVersion, softwareType, reachabilityStatus, reachabilityFailureReason, errorCode, platformId, series, type, serialNumber, upTime, role, roleSource, associatedWlcIp, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<RetrievesAllNetworkDevicesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves all network devices (asynchronously)
     * Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id&#39;s and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.
     * @param vrfName vrfName (optional)
     * @param managementIpAddress managementIpAddress (optional)
     * @param hostname hostname (optional)
     * @param macAddress macAddress (optional)
     * @param family family (optional)
     * @param collectionStatus collectionStatus (optional)
     * @param collectionInterval collectionInterval (optional)
     * @param softwareVersion softwareVersion (optional)
     * @param softwareType softwareType (optional)
     * @param reachabilityStatus reachabilityStatus (optional)
     * @param reachabilityFailureReason reachabilityFailureReason (optional)
     * @param errorCode errorCode (optional)
     * @param platformId platformId (optional)
     * @param series series (optional)
     * @param type type (optional)
     * @param serialNumber serialNumber (optional)
     * @param upTime upTime (optional)
     * @param role role (optional)
     * @param roleSource roleSource (optional)
     * @param associatedWlcIp associatedWlcIp (optional)
     * @param offset offset (optional)
     * @param limit limit (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceAutocompleteAsync(String vrfName, String managementIpAddress, String hostname, String macAddress, String family, String collectionStatus, String collectionInterval, String softwareVersion, String softwareType, String reachabilityStatus, String reachabilityFailureReason, String errorCode, String platformId, String series, String type, String serialNumber, String upTime, String role, String roleSource, String associatedWlcIp, String offset, String limit, final ApiCallback<RetrievesAllNetworkDevicesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceAutocompleteValidateBeforeCall(vrfName, managementIpAddress, hostname, macAddress, family, collectionStatus, collectionInterval, softwareVersion, softwareType, reachabilityStatus, reachabilityFailureReason, errorCode, platformId, series, type, serialNumber, upTime, role, roleSource, associatedWlcIp, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrievesAllNetworkDevicesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceBriefById
     * @param id Device ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceBriefByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/${id}/brief"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceBriefByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkDeviceBriefById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceBriefByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves network device brief by ID
     * Gets brief network device info such as hostname, management IP address for the given device ID
     * @param id Device ID (required)
     * @return NetworkDeviceBriefNIOResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkDeviceBriefNIOResult getNetworkDeviceBriefById(String id) throws ApiException {
        ApiResponse<NetworkDeviceBriefNIOResult> resp = getNetworkDeviceBriefByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieves network device brief by ID
     * Gets brief network device info such as hostname, management IP address for the given device ID
     * @param id Device ID (required)
     * @return ApiResponse&lt;NetworkDeviceBriefNIOResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkDeviceBriefNIOResult> getNetworkDeviceBriefByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceBriefByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<NetworkDeviceBriefNIOResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves network device brief by ID (asynchronously)
     * Gets brief network device info such as hostname, management IP address for the given device ID
     * @param id Device ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceBriefByIdAsync(String id, final ApiCallback<NetworkDeviceBriefNIOResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceBriefByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkDeviceBriefNIOResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceById
     * @param id Device ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkDeviceById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves network device by ID
     * Gets the network device for the given device ID
     * @param id Device ID (required)
     * @return NetworkDeviceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkDeviceResult getNetworkDeviceById(String id) throws ApiException {
        ApiResponse<NetworkDeviceResult> resp = getNetworkDeviceByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieves network device by ID
     * Gets the network device for the given device ID
     * @param id Device ID (required)
     * @return ApiResponse&lt;NetworkDeviceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkDeviceResult> getNetworkDeviceByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<NetworkDeviceResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves network device by ID (asynchronously)
     * Gets the network device for the given device ID
     * @param id Device ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceByIdAsync(String id, final ApiCallback<NetworkDeviceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkDeviceResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceCollectionScheduleById
     * @param id Device ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceCollectionScheduleByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/${id}/collection-schedule"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceCollectionScheduleByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkDeviceCollectionScheduleById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceCollectionScheduleByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the collection interval specified by device ID
     * Retrieves collection interval by device id
     * @param id Device ID (required)
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountResult getNetworkDeviceCollectionScheduleById(String id) throws ApiException {
        ApiResponse<CountResult> resp = getNetworkDeviceCollectionScheduleByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieves the collection interval specified by device ID
     * Retrieves collection interval by device id
     * @param id Device ID (required)
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountResult> getNetworkDeviceCollectionScheduleByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceCollectionScheduleByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the collection interval specified by device ID (asynchronously)
     * Retrieves collection interval by device id
     * @param id Device ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceCollectionScheduleByIdAsync(String id, final ApiCallback<CountResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceCollectionScheduleByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceCollectionScheduleGlobal
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceCollectionScheduleGlobalCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/collection-schedule/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceCollectionScheduleGlobalValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNetworkDeviceCollectionScheduleGlobalCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the collection interval of all devices
     * Retrieves collection interval of all devices
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountResult getNetworkDeviceCollectionScheduleGlobal() throws ApiException {
        ApiResponse<CountResult> resp = getNetworkDeviceCollectionScheduleGlobalWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the collection interval of all devices
     * Retrieves collection interval of all devices
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountResult> getNetworkDeviceCollectionScheduleGlobalWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceCollectionScheduleGlobalValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the collection interval of all devices (asynchronously)
     * Retrieves collection interval of all devices
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceCollectionScheduleGlobalAsync(final ApiCallback<CountResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceCollectionScheduleGlobalValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceConfig
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceConfigCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceConfigValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNetworkDeviceConfigCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves device config list
     * Gets the config for all devices
     * @return RawCliInfoNIOListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RawCliInfoNIOListResult getNetworkDeviceConfig() throws ApiException {
        ApiResponse<RawCliInfoNIOListResult> resp = getNetworkDeviceConfigWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves device config list
     * Gets the config for all devices
     * @return ApiResponse&lt;RawCliInfoNIOListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RawCliInfoNIOListResult> getNetworkDeviceConfigWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceConfigValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RawCliInfoNIOListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves device config list (asynchronously)
     * Gets the config for all devices
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceConfigAsync(final ApiCallback<RawCliInfoNIOListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceConfigValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RawCliInfoNIOListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceConfigByNetworkDeviceId
     * @param networkDeviceId networkDeviceId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceConfigByNetworkDeviceIdCall(String networkDeviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/${networkDeviceId}/config"
            .replaceAll("\\{" + "networkDeviceId" + "\\}", apiClient.escapeString(networkDeviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceConfigByNetworkDeviceIdValidateBeforeCall(String networkDeviceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'networkDeviceId' is set
        if (networkDeviceId == null) {
            throw new ApiException("Missing the required parameter 'networkDeviceId' when calling getNetworkDeviceConfigByNetworkDeviceId(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceConfigByNetworkDeviceIdCall(networkDeviceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves device config
     * Gets the device config by device ID
     * @param networkDeviceId networkDeviceId (required)
     * @return SuccessResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResult getNetworkDeviceConfigByNetworkDeviceId(String networkDeviceId) throws ApiException {
        ApiResponse<SuccessResult> resp = getNetworkDeviceConfigByNetworkDeviceIdWithHttpInfo(networkDeviceId);
        return resp.getData();
    }

    /**
     * Retrieves device config
     * Gets the device config by device ID
     * @param networkDeviceId networkDeviceId (required)
     * @return ApiResponse&lt;SuccessResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResult> getNetworkDeviceConfigByNetworkDeviceIdWithHttpInfo(String networkDeviceId) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceConfigByNetworkDeviceIdValidateBeforeCall(networkDeviceId, null, null);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves device config (asynchronously)
     * Gets the device config by device ID
     * @param networkDeviceId networkDeviceId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceConfigByNetworkDeviceIdAsync(String networkDeviceId, final ApiCallback<SuccessResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceConfigByNetworkDeviceIdValidateBeforeCall(networkDeviceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceConfigCount
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceConfigCountCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/config/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceConfigCountValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNetworkDeviceConfigCountCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves config count
     * Gets the count of device configs
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountResult getNetworkDeviceConfigCount() throws ApiException {
        ApiResponse<CountResult> resp = getNetworkDeviceConfigCountWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves config count
     * Gets the count of device configs
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountResult> getNetworkDeviceConfigCountWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceConfigCountValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves config count (asynchronously)
     * Gets the count of device configs
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceConfigCountAsync(final ApiCallback<CountResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceConfigCountValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceCount
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceCountCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceCountValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNetworkDeviceCountCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves network device count
     * Gets the count of network devices filtered by management IP address, mac address, hostname and location name
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountResult getNetworkDeviceCount() throws ApiException {
        ApiResponse<CountResult> resp = getNetworkDeviceCountWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves network device count
     * Gets the count of network devices filtered by management IP address, mac address, hostname and location name
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountResult> getNetworkDeviceCountWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceCountValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves network device count (asynchronously)
     * Gets the count of network devices filtered by management IP address, mac address, hostname and location name
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceCountAsync(final ApiCallback<CountResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceCountValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceFunctionalCapability
     * @param deviceId Accepts comma separated deviceid&#39;s and return list of functional-capabilities for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param functionName functionName (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceFunctionalCapabilityCall(String deviceId, List<String> functionName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/functional-capability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));
        if (functionName != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "functionName", functionName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceFunctionalCapabilityValidateBeforeCall(String deviceId, List<String> functionName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNetworkDeviceFunctionalCapabilityCall(deviceId, functionName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves all functional-capability of devices
     * Gets the functional-capability for given devices
     * @param deviceId Accepts comma separated deviceid&#39;s and return list of functional-capabilities for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param functionName functionName (optional)
     * @return FunctionalCapabilityListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FunctionalCapabilityListResult getNetworkDeviceFunctionalCapability(String deviceId, List<String> functionName) throws ApiException {
        ApiResponse<FunctionalCapabilityListResult> resp = getNetworkDeviceFunctionalCapabilityWithHttpInfo(deviceId, functionName);
        return resp.getData();
    }

    /**
     * Retrieves all functional-capability of devices
     * Gets the functional-capability for given devices
     * @param deviceId Accepts comma separated deviceid&#39;s and return list of functional-capabilities for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param functionName functionName (optional)
     * @return ApiResponse&lt;FunctionalCapabilityListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FunctionalCapabilityListResult> getNetworkDeviceFunctionalCapabilityWithHttpInfo(String deviceId, List<String> functionName) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceFunctionalCapabilityValidateBeforeCall(deviceId, functionName, null, null);
        Type localVarReturnType = new TypeToken<FunctionalCapabilityListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves all functional-capability of devices (asynchronously)
     * Gets the functional-capability for given devices
     * @param deviceId Accepts comma separated deviceid&#39;s and return list of functional-capabilities for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list. (optional)
     * @param functionName functionName (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceFunctionalCapabilityAsync(String deviceId, List<String> functionName, final ApiCallback<FunctionalCapabilityListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceFunctionalCapabilityValidateBeforeCall(deviceId, functionName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FunctionalCapabilityListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceFunctionalCapabilityById
     * @param id Device ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceFunctionalCapabilityByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/functional-capability/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceFunctionalCapabilityByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkDeviceFunctionalCapabilityById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceFunctionalCapabilityByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the functional capability by id
     * Retrieve functional capability with given id
     * @param id Device ID (required)
     * @return FunctionalCapabilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FunctionalCapabilityResult getNetworkDeviceFunctionalCapabilityById(String id) throws ApiException {
        ApiResponse<FunctionalCapabilityResult> resp = getNetworkDeviceFunctionalCapabilityByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets the functional capability by id
     * Retrieve functional capability with given id
     * @param id Device ID (required)
     * @return ApiResponse&lt;FunctionalCapabilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FunctionalCapabilityResult> getNetworkDeviceFunctionalCapabilityByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceFunctionalCapabilityByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<FunctionalCapabilityResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the functional capability by id (asynchronously)
     * Retrieve functional capability with given id
     * @param id Device ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceFunctionalCapabilityByIdAsync(String id, final ApiCallback<FunctionalCapabilityResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceFunctionalCapabilityByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FunctionalCapabilityResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceFunctionalCcapabilityAutocomplete
     * @param functionName functionName (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceFunctionalCcapabilityAutocompleteCall(List<String> functionName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/functional-capability/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (functionName != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "functionName", functionName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceFunctionalCcapabilityAutocompleteValidateBeforeCall(List<String> functionName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNetworkDeviceFunctionalCcapabilityAutocompleteCall(functionName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the values of given fields
     * Gets the field values based on given filter
     * @param functionName functionName (optional)
     * @return SuccessResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResultList getNetworkDeviceFunctionalCcapabilityAutocomplete(List<String> functionName) throws ApiException {
        ApiResponse<SuccessResultList> resp = getNetworkDeviceFunctionalCcapabilityAutocompleteWithHttpInfo(functionName);
        return resp.getData();
    }

    /**
     * Retrieve the values of given fields
     * Gets the field values based on given filter
     * @param functionName functionName (optional)
     * @return ApiResponse&lt;SuccessResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResultList> getNetworkDeviceFunctionalCcapabilityAutocompleteWithHttpInfo(List<String> functionName) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceFunctionalCcapabilityAutocompleteValidateBeforeCall(functionName, null, null);
        Type localVarReturnType = new TypeToken<SuccessResultList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the values of given fields (asynchronously)
     * Gets the field values based on given filter
     * @param functionName functionName (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceFunctionalCcapabilityAutocompleteAsync(List<String> functionName, final ApiCallback<SuccessResultList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceFunctionalCcapabilityAutocompleteValidateBeforeCall(functionName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResultList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceIpAddressByIpAddress
     * @param ipAddress Device IP address (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceIpAddressByIpAddressCall(String ipAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/ip-address/${ipAddress}"
            .replaceAll("\\{" + "ipAddress" + "\\}", apiClient.escapeString(ipAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceIpAddressByIpAddressValidateBeforeCall(String ipAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling getNetworkDeviceIpAddressByIpAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceIpAddressByIpAddressCall(ipAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves network device by IP address
     * Gets the network device with the given IP address
     * @param ipAddress Device IP address (required)
     * @return NetworkDeviceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkDeviceResult getNetworkDeviceIpAddressByIpAddress(String ipAddress) throws ApiException {
        ApiResponse<NetworkDeviceResult> resp = getNetworkDeviceIpAddressByIpAddressWithHttpInfo(ipAddress);
        return resp.getData();
    }

    /**
     * Retrieves network device by IP address
     * Gets the network device with the given IP address
     * @param ipAddress Device IP address (required)
     * @return ApiResponse&lt;NetworkDeviceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkDeviceResult> getNetworkDeviceIpAddressByIpAddressWithHttpInfo(String ipAddress) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceIpAddressByIpAddressValidateBeforeCall(ipAddress, null, null);
        Type localVarReturnType = new TypeToken<NetworkDeviceResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves network device by IP address (asynchronously)
     * Gets the network device with the given IP address
     * @param ipAddress Device IP address (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceIpAddressByIpAddressAsync(String ipAddress, final ApiCallback<NetworkDeviceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceIpAddressByIpAddressValidateBeforeCall(ipAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkDeviceResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceMerakiOrganizationById
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceMerakiOrganizationByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/${id}/meraki-organization"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceMerakiOrganizationByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkDeviceMerakiOrganizationById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceMerakiOrganizationByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the organizations chosen while adding the meraki dashboard
     * This method is used to get the selected organizations for the meraki dashboard
     * @param id id (required)
     * @return SuccessResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SuccessResultList getNetworkDeviceMerakiOrganizationById(String id) throws ApiException {
        ApiResponse<SuccessResultList> resp = getNetworkDeviceMerakiOrganizationByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get the organizations chosen while adding the meraki dashboard
     * This method is used to get the selected organizations for the meraki dashboard
     * @param id id (required)
     * @return ApiResponse&lt;SuccessResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SuccessResultList> getNetworkDeviceMerakiOrganizationByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceMerakiOrganizationByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<SuccessResultList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the organizations chosen while adding the meraki dashboard (asynchronously)
     * This method is used to get the selected organizations for the meraki dashboard
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceMerakiOrganizationByIdAsync(String id, final ApiCallback<SuccessResultList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceMerakiOrganizationByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SuccessResultList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceModule
     * @param deviceId deviceId (required)
     * @param limit limit (optional)
     * @param offset offset (optional)
     * @param nameList nameList (optional)
     * @param vendorEquipmentTypeList vendorEquipmentTypeList (optional)
     * @param partNumberList partNumberList (optional)
     * @param operationalStateCodeList operationalStateCodeList (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceModuleCall(String deviceId, String limit, String offset, List<String> nameList, List<String> vendorEquipmentTypeList, List<String> partNumberList, List<String> operationalStateCodeList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/module";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (nameList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "nameList", nameList));
        if (vendorEquipmentTypeList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "vendorEquipmentTypeList", vendorEquipmentTypeList));
        if (partNumberList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "partNumberList", partNumberList));
        if (operationalStateCodeList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "operationalStateCodeList", operationalStateCodeList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceModuleValidateBeforeCall(String deviceId, String limit, String offset, List<String> nameList, List<String> vendorEquipmentTypeList, List<String> partNumberList, List<String> operationalStateCodeList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getNetworkDeviceModule(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceModuleCall(deviceId, limit, offset, nameList, vendorEquipmentTypeList, partNumberList, operationalStateCodeList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gives all the modules associated with given device id
     * Get modules of the given device id
     * @param deviceId deviceId (required)
     * @param limit limit (optional)
     * @param offset offset (optional)
     * @param nameList nameList (optional)
     * @param vendorEquipmentTypeList vendorEquipmentTypeList (optional)
     * @param partNumberList partNumberList (optional)
     * @param operationalStateCodeList operationalStateCodeList (optional)
     * @return ModuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModuleListResult getNetworkDeviceModule(String deviceId, String limit, String offset, List<String> nameList, List<String> vendorEquipmentTypeList, List<String> partNumberList, List<String> operationalStateCodeList) throws ApiException {
        ApiResponse<ModuleListResult> resp = getNetworkDeviceModuleWithHttpInfo(deviceId, limit, offset, nameList, vendorEquipmentTypeList, partNumberList, operationalStateCodeList);
        return resp.getData();
    }

    /**
     * Gives all the modules associated with given device id
     * Get modules of the given device id
     * @param deviceId deviceId (required)
     * @param limit limit (optional)
     * @param offset offset (optional)
     * @param nameList nameList (optional)
     * @param vendorEquipmentTypeList vendorEquipmentTypeList (optional)
     * @param partNumberList partNumberList (optional)
     * @param operationalStateCodeList operationalStateCodeList (optional)
     * @return ApiResponse&lt;ModuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModuleListResult> getNetworkDeviceModuleWithHttpInfo(String deviceId, String limit, String offset, List<String> nameList, List<String> vendorEquipmentTypeList, List<String> partNumberList, List<String> operationalStateCodeList) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceModuleValidateBeforeCall(deviceId, limit, offset, nameList, vendorEquipmentTypeList, partNumberList, operationalStateCodeList, null, null);
        Type localVarReturnType = new TypeToken<ModuleListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gives all the modules associated with given device id (asynchronously)
     * Get modules of the given device id
     * @param deviceId deviceId (required)
     * @param limit limit (optional)
     * @param offset offset (optional)
     * @param nameList nameList (optional)
     * @param vendorEquipmentTypeList vendorEquipmentTypeList (optional)
     * @param partNumberList partNumberList (optional)
     * @param operationalStateCodeList operationalStateCodeList (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceModuleAsync(String deviceId, String limit, String offset, List<String> nameList, List<String> vendorEquipmentTypeList, List<String> partNumberList, List<String> operationalStateCodeList, final ApiCallback<ModuleListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceModuleValidateBeforeCall(deviceId, limit, offset, nameList, vendorEquipmentTypeList, partNumberList, operationalStateCodeList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModuleListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceModuleById
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceModuleByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/module/${id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceModuleByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkDeviceModuleById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceModuleByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gives Module info by its id
     * Get module by id
     * @param id id (required)
     * @return ModuleResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModuleResult getNetworkDeviceModuleById(String id) throws ApiException {
        ApiResponse<ModuleResult> resp = getNetworkDeviceModuleByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gives Module info by its id
     * Get module by id
     * @param id id (required)
     * @return ApiResponse&lt;ModuleResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModuleResult> getNetworkDeviceModuleByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceModuleByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ModuleResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gives Module info by its id (asynchronously)
     * Get module by id
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceModuleByIdAsync(String id, final ApiCallback<ModuleResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceModuleByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModuleResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceModuleCount
     * @param deviceId deviceId (required)
     * @param nameList nameList (optional)
     * @param vendorEquipmentTypeList vendorEquipmentTypeList (optional)
     * @param partNumberList partNumberList (optional)
     * @param operationalStateCodeList operationalStateCodeList (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceModuleCountCall(String deviceId, List<String> nameList, List<String> vendorEquipmentTypeList, List<String> partNumberList, List<String> operationalStateCodeList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/module/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deviceId", deviceId));
        if (nameList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "nameList", nameList));
        if (vendorEquipmentTypeList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "vendorEquipmentTypeList", vendorEquipmentTypeList));
        if (partNumberList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "partNumberList", partNumberList));
        if (operationalStateCodeList != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "operationalStateCodeList", operationalStateCodeList));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceModuleCountValidateBeforeCall(String deviceId, List<String> nameList, List<String> vendorEquipmentTypeList, List<String> partNumberList, List<String> operationalStateCodeList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getNetworkDeviceModuleCount(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceModuleCountCall(deviceId, nameList, vendorEquipmentTypeList, partNumberList, operationalStateCodeList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gives total number of Modules
     * Get Module Count
     * @param deviceId deviceId (required)
     * @param nameList nameList (optional)
     * @param vendorEquipmentTypeList vendorEquipmentTypeList (optional)
     * @param partNumberList partNumberList (optional)
     * @param operationalStateCodeList operationalStateCodeList (optional)
     * @return CountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountResult getNetworkDeviceModuleCount(String deviceId, List<String> nameList, List<String> vendorEquipmentTypeList, List<String> partNumberList, List<String> operationalStateCodeList) throws ApiException {
        ApiResponse<CountResult> resp = getNetworkDeviceModuleCountWithHttpInfo(deviceId, nameList, vendorEquipmentTypeList, partNumberList, operationalStateCodeList);
        return resp.getData();
    }

    /**
     * Gives total number of Modules
     * Get Module Count
     * @param deviceId deviceId (required)
     * @param nameList nameList (optional)
     * @param vendorEquipmentTypeList vendorEquipmentTypeList (optional)
     * @param partNumberList partNumberList (optional)
     * @param operationalStateCodeList operationalStateCodeList (optional)
     * @return ApiResponse&lt;CountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountResult> getNetworkDeviceModuleCountWithHttpInfo(String deviceId, List<String> nameList, List<String> vendorEquipmentTypeList, List<String> partNumberList, List<String> operationalStateCodeList) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceModuleCountValidateBeforeCall(deviceId, nameList, vendorEquipmentTypeList, partNumberList, operationalStateCodeList, null, null);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gives total number of Modules (asynchronously)
     * Get Module Count
     * @param deviceId deviceId (required)
     * @param nameList nameList (optional)
     * @param vendorEquipmentTypeList vendorEquipmentTypeList (optional)
     * @param partNumberList partNumberList (optional)
     * @param operationalStateCodeList operationalStateCodeList (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceModuleCountAsync(String deviceId, List<String> nameList, List<String> vendorEquipmentTypeList, List<String> partNumberList, List<String> operationalStateCodeList, final ApiCallback<CountResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceModuleCountValidateBeforeCall(deviceId, nameList, vendorEquipmentTypeList, partNumberList, operationalStateCodeList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDevicePollerCliLegitReads
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDevicePollerCliLegitReadsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device-poller/cli/legit-reads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDevicePollerCliLegitReadsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNetworkDevicePollerCliLegitReadsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all keywords of CLIs accepted by command runner
     * Get valid keywords
     * @return LegitCliKeyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LegitCliKeyResult getNetworkDevicePollerCliLegitReads() throws ApiException {
        ApiResponse<LegitCliKeyResult> resp = getNetworkDevicePollerCliLegitReadsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all keywords of CLIs accepted by command runner
     * Get valid keywords
     * @return ApiResponse&lt;LegitCliKeyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LegitCliKeyResult> getNetworkDevicePollerCliLegitReadsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDevicePollerCliLegitReadsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<LegitCliKeyResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all keywords of CLIs accepted by command runner (asynchronously)
     * Get valid keywords
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDevicePollerCliLegitReadsAsync(final ApiCallback<LegitCliKeyResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDevicePollerCliLegitReadsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LegitCliKeyResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceRange
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceRangeCall(Integer startIndex, Integer recordsToReturn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/${startIndex}/${recordsToReturn}"
            .replaceAll("\\{" + "startIndex" + "\\}", apiClient.escapeString(startIndex.toString()))
            .replaceAll("\\{" + "recordsToReturn" + "\\}", apiClient.escapeString(recordsToReturn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceRangeValidateBeforeCall(Integer startIndex, Integer recordsToReturn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startIndex' is set
        if (startIndex == null) {
            throw new ApiException("Missing the required parameter 'startIndex' when calling getNetworkDeviceRange(Async)");
        }
        
        // verify the required parameter 'recordsToReturn' is set
        if (recordsToReturn == null) {
            throw new ApiException("Missing the required parameter 'recordsToReturn' when calling getNetworkDeviceRange(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceRangeCall(startIndex, recordsToReturn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves network device by range
     * Gets the list of network devices for the given range
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @return NetworkDeviceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkDeviceListResult getNetworkDeviceRange(Integer startIndex, Integer recordsToReturn) throws ApiException {
        ApiResponse<NetworkDeviceListResult> resp = getNetworkDeviceRangeWithHttpInfo(startIndex, recordsToReturn);
        return resp.getData();
    }

    /**
     * Retrieves network device by range
     * Gets the list of network devices for the given range
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @return ApiResponse&lt;NetworkDeviceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkDeviceListResult> getNetworkDeviceRangeWithHttpInfo(Integer startIndex, Integer recordsToReturn) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceRangeValidateBeforeCall(startIndex, recordsToReturn, null, null);
        Type localVarReturnType = new TypeToken<NetworkDeviceListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves network device by range (asynchronously)
     * Gets the list of network devices for the given range
     * @param startIndex Start index (required)
     * @param recordsToReturn Number of records to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceRangeAsync(Integer startIndex, Integer recordsToReturn, final ApiCallback<NetworkDeviceListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceRangeValidateBeforeCall(startIndex, recordsToReturn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkDeviceListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceSerialNumberBySerialNumber
     * @param serialNumber Device serial number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceSerialNumberBySerialNumberCall(String serialNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/serial-number/${serialNumber}"
            .replaceAll("\\{" + "serialNumber" + "\\}", apiClient.escapeString(serialNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceSerialNumberBySerialNumberValidateBeforeCall(String serialNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling getNetworkDeviceSerialNumberBySerialNumber(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceSerialNumberBySerialNumberCall(serialNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves network device by serial number
     * Gets the network device with the given serial number
     * @param serialNumber Device serial number (required)
     * @return NetworkDeviceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetworkDeviceResult getNetworkDeviceSerialNumberBySerialNumber(String serialNumber) throws ApiException {
        ApiResponse<NetworkDeviceResult> resp = getNetworkDeviceSerialNumberBySerialNumberWithHttpInfo(serialNumber);
        return resp.getData();
    }

    /**
     * Retrieves network device by serial number
     * Gets the network device with the given serial number
     * @param serialNumber Device serial number (required)
     * @return ApiResponse&lt;NetworkDeviceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetworkDeviceResult> getNetworkDeviceSerialNumberBySerialNumberWithHttpInfo(String serialNumber) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceSerialNumberBySerialNumberValidateBeforeCall(serialNumber, null, null);
        Type localVarReturnType = new TypeToken<NetworkDeviceResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves network device by serial number (asynchronously)
     * Gets the network device with the given serial number
     * @param serialNumber Device serial number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceSerialNumberBySerialNumberAsync(String serialNumber, final ApiCallback<NetworkDeviceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceSerialNumberBySerialNumberValidateBeforeCall(serialNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetworkDeviceResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceTenantinfoMacaddress
     * @param serialNumber Serial number of the device (optional)
     * @param macaddress Mac addres of the device (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceTenantinfoMacaddressCall(String serialNumber, String macaddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/tenantinfo/macaddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serialNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serialNumber", serialNumber));
        if (macaddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("macaddress", macaddress));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceTenantinfoMacaddressValidateBeforeCall(String serialNumber, String macaddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNetworkDeviceTenantinfoMacaddressCall(serialNumber, macaddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates certificate validation status and returns tenantId
     * Registers a device for WSA notification
     * @param serialNumber Serial number of the device (optional)
     * @param macaddress Mac addres of the device (optional)
     * @return RegisterNetworkDeviceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegisterNetworkDeviceResult getNetworkDeviceTenantinfoMacaddress(String serialNumber, String macaddress) throws ApiException {
        ApiResponse<RegisterNetworkDeviceResult> resp = getNetworkDeviceTenantinfoMacaddressWithHttpInfo(serialNumber, macaddress);
        return resp.getData();
    }

    /**
     * Updates certificate validation status and returns tenantId
     * Registers a device for WSA notification
     * @param serialNumber Serial number of the device (optional)
     * @param macaddress Mac addres of the device (optional)
     * @return ApiResponse&lt;RegisterNetworkDeviceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegisterNetworkDeviceResult> getNetworkDeviceTenantinfoMacaddressWithHttpInfo(String serialNumber, String macaddress) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceTenantinfoMacaddressValidateBeforeCall(serialNumber, macaddress, null, null);
        Type localVarReturnType = new TypeToken<RegisterNetworkDeviceResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates certificate validation status and returns tenantId (asynchronously)
     * Registers a device for WSA notification
     * @param serialNumber Serial number of the device (optional)
     * @param macaddress Mac addres of the device (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceTenantinfoMacaddressAsync(String serialNumber, String macaddress, final ApiCallback<RegisterNetworkDeviceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceTenantinfoMacaddressValidateBeforeCall(serialNumber, macaddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegisterNetworkDeviceResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceVlanById
     * @param id deviceUUID (required)
     * @param interfaceType Vlan assocaited with sub-interface (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceVlanByIdCall(String id, String interfaceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/${id}/vlan"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (interfaceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interfaceType", interfaceType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceVlanByIdValidateBeforeCall(String id, String interfaceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkDeviceVlanById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceVlanByIdCall(id, interfaceType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves list of VLAN data that are associated with interface for a device
     * getDeviceVLANData
     * @param id deviceUUID (required)
     * @param interfaceType Vlan assocaited with sub-interface (optional)
     * @return VlanListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VlanListResult getNetworkDeviceVlanById(String id, String interfaceType) throws ApiException {
        ApiResponse<VlanListResult> resp = getNetworkDeviceVlanByIdWithHttpInfo(id, interfaceType);
        return resp.getData();
    }

    /**
     * Retrieves list of VLAN data that are associated with interface for a device
     * getDeviceVLANData
     * @param id deviceUUID (required)
     * @param interfaceType Vlan assocaited with sub-interface (optional)
     * @return ApiResponse&lt;VlanListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VlanListResult> getNetworkDeviceVlanByIdWithHttpInfo(String id, String interfaceType) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceVlanByIdValidateBeforeCall(id, interfaceType, null, null);
        Type localVarReturnType = new TypeToken<VlanListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves list of VLAN data that are associated with interface for a device (asynchronously)
     * getDeviceVLANData
     * @param id deviceUUID (required)
     * @param interfaceType Vlan assocaited with sub-interface (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceVlanByIdAsync(String id, String interfaceType, final ApiCallback<VlanListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceVlanByIdValidateBeforeCall(id, interfaceType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VlanListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNetworkDeviceWirelessInfoById
     * @param id Device ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceWirelessInfoByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/${id}/wireless-info"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNetworkDeviceWirelessInfoByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNetworkDeviceWirelessInfoById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNetworkDeviceWirelessInfoByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves wireless lan conrtoller info by Device ID
     * Gets the wireless lan controller info using the given device ID
     * @param id Device ID (required)
     * @return WirelessInfoResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WirelessInfoResult getNetworkDeviceWirelessInfoById(String id) throws ApiException {
        ApiResponse<WirelessInfoResult> resp = getNetworkDeviceWirelessInfoByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieves wireless lan conrtoller info by Device ID
     * Gets the wireless lan controller info using the given device ID
     * @param id Device ID (required)
     * @return ApiResponse&lt;WirelessInfoResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WirelessInfoResult> getNetworkDeviceWirelessInfoByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getNetworkDeviceWirelessInfoByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<WirelessInfoResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves wireless lan conrtoller info by Device ID (asynchronously)
     * Gets the wireless lan controller info using the given device ID
     * @param id Device ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNetworkDeviceWirelessInfoByIdAsync(String id, final ApiCallback<WirelessInfoResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNetworkDeviceWirelessInfoByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WirelessInfoResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postNetworkDevice
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postNetworkDeviceCall(InventoryDeviceInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/network-device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postNetworkDeviceValidateBeforeCall(InventoryDeviceInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postNetworkDevice(Async)");
        }
        

        com.squareup.okhttp.Call call = postNetworkDeviceCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Network device POST api
     * Adds the device with given credential
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postNetworkDevice(InventoryDeviceInfo request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postNetworkDeviceWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Network device POST api
     * Adds the device with given credential
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postNetworkDeviceWithHttpInfo(InventoryDeviceInfo request) throws ApiException {
        com.squareup.okhttp.Call call = postNetworkDeviceValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Network device POST api (asynchronously)
     * Adds the device with given credential
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postNetworkDeviceAsync(InventoryDeviceInfo request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postNetworkDeviceValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postNetworkDeviceFile
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postNetworkDeviceFileCall(ExportDeviceDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postNetworkDeviceFileValidateBeforeCall(ExportDeviceDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postNetworkDeviceFile(Async)");
        }
        

        com.squareup.okhttp.Call call = postNetworkDeviceFileCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export network-device to file
     * Export the selected network-device to a file
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postNetworkDeviceFile(ExportDeviceDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postNetworkDeviceFileWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Export network-device to file
     * Export the selected network-device to a file
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postNetworkDeviceFileWithHttpInfo(ExportDeviceDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postNetworkDeviceFileValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export network-device to file (asynchronously)
     * Export the selected network-device to a file
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postNetworkDeviceFileAsync(ExportDeviceDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postNetworkDeviceFileValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postNetworkDevicePollerCliReadRequest
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postNetworkDevicePollerCliReadRequestCall(CommandRunnerDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/network-device-poller/cli/read-request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postNetworkDevicePollerCliReadRequestValidateBeforeCall(CommandRunnerDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postNetworkDevicePollerCliReadRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = postNetworkDevicePollerCliReadRequestCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run read-only commands on devices to get their real-time configuration
     * Submit request for read-only CLIs
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult postNetworkDevicePollerCliReadRequest(CommandRunnerDTO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = postNetworkDevicePollerCliReadRequestWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Run read-only commands on devices to get their real-time configuration
     * Submit request for read-only CLIs
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> postNetworkDevicePollerCliReadRequestWithHttpInfo(CommandRunnerDTO request) throws ApiException {
        com.squareup.okhttp.Call call = postNetworkDevicePollerCliReadRequestValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run read-only commands on devices to get their real-time configuration (asynchronously)
     * Submit request for read-only CLIs
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postNetworkDevicePollerCliReadRequestAsync(CommandRunnerDTO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postNetworkDevicePollerCliReadRequestValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putNetworkDevice
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putNetworkDeviceCall(InventoryDeviceInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/network-device";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putNetworkDeviceValidateBeforeCall(InventoryDeviceInfo request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putNetworkDevice(Async)");
        }
        

        com.squareup.okhttp.Call call = putNetworkDeviceCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Network device sync api
     * Sync the devices provided as input
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putNetworkDevice(InventoryDeviceInfo request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putNetworkDeviceWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Network device sync api
     * Sync the devices provided as input
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putNetworkDeviceWithHttpInfo(InventoryDeviceInfo request) throws ApiException {
        com.squareup.okhttp.Call call = putNetworkDeviceValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Network device sync api (asynchronously)
     * Sync the devices provided as input
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putNetworkDeviceAsync(InventoryDeviceInfo request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putNetworkDeviceValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putNetworkDeviceBrief
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putNetworkDeviceBriefCall(NetworkDeviceBriefNIO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/brief";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putNetworkDeviceBriefValidateBeforeCall(NetworkDeviceBriefNIO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putNetworkDeviceBrief(Async)");
        }
        

        com.squareup.okhttp.Call call = putNetworkDeviceBriefCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates network device role
     * Updates the role of the device as access, core, distribution, border router
     * @param request request (required)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putNetworkDeviceBrief(NetworkDeviceBriefNIO request) throws ApiException {
        ApiResponse<TaskIdResult> resp = putNetworkDeviceBriefWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Updates network device role
     * Updates the role of the device as access, core, distribution, border router
     * @param request request (required)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putNetworkDeviceBriefWithHttpInfo(NetworkDeviceBriefNIO request) throws ApiException {
        com.squareup.okhttp.Call call = putNetworkDeviceBriefValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates network device role (asynchronously)
     * Updates the role of the device as access, core, distribution, border router
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putNetworkDeviceBriefAsync(NetworkDeviceBriefNIO request, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putNetworkDeviceBriefValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putNetworkDeviceSync
     * @param request request (required)
     * @param forceSync forceSync (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putNetworkDeviceSyncCall(NetworkDeviceSyncApiRequest request, Boolean forceSync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/v1/network-device/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forceSync != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forceSync", forceSync));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putNetworkDeviceSyncValidateBeforeCall(NetworkDeviceSyncApiRequest request, Boolean forceSync, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putNetworkDeviceSync(Async)");
        }
        

        com.squareup.okhttp.Call call = putNetworkDeviceSyncCall(request, forceSync, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Network device sync api
     * Sync&#39;s the devices. If forceSync param is false (default) then the sync would run in normal priority thread. If forceSync param is true then the sync would run in high priority thread if avaiable, else the sync will fail. Result can be seen in the child task of each device
     * @param request request (required)
     * @param forceSync forceSync (optional)
     * @return TaskIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskIdResult putNetworkDeviceSync(NetworkDeviceSyncApiRequest request, Boolean forceSync) throws ApiException {
        ApiResponse<TaskIdResult> resp = putNetworkDeviceSyncWithHttpInfo(request, forceSync);
        return resp.getData();
    }

    /**
     * Network device sync api
     * Sync&#39;s the devices. If forceSync param is false (default) then the sync would run in normal priority thread. If forceSync param is true then the sync would run in high priority thread if avaiable, else the sync will fail. Result can be seen in the child task of each device
     * @param request request (required)
     * @param forceSync forceSync (optional)
     * @return ApiResponse&lt;TaskIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskIdResult> putNetworkDeviceSyncWithHttpInfo(NetworkDeviceSyncApiRequest request, Boolean forceSync) throws ApiException {
        com.squareup.okhttp.Call call = putNetworkDeviceSyncValidateBeforeCall(request, forceSync, null, null);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Network device sync api (asynchronously)
     * Sync&#39;s the devices. If forceSync param is false (default) then the sync would run in normal priority thread. If forceSync param is true then the sync would run in high priority thread if avaiable, else the sync will fail. Result can be seen in the child task of each device
     * @param request request (required)
     * @param forceSync forceSync (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putNetworkDeviceSyncAsync(NetworkDeviceSyncApiRequest request, Boolean forceSync, final ApiCallback<TaskIdResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putNetworkDeviceSyncValidateBeforeCall(request, forceSync, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskIdResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
