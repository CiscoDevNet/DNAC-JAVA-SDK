/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiCallback;
import cisco.com.dnac.v1.api.client.ApiClient;
import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.ApiResponse;
import cisco.com.dnac.v1.api.client.Configuration;
import cisco.com.dnac.v1.api.client.Pair;
import cisco.com.dnac.v1.api.client.ProgressRequestBody;
import cisco.com.dnac.v1.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cisco.com.dnac.v1.api.client.model.SiteResult;
import cisco.com.dnac.v1.api.client.model.TopologyResult;
import cisco.com.dnac.v1.api.client.model.VlanNamesResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopologyApi {
    private ApiClient apiClient;

    public TopologyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopologyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getTopologyL2ByVlanId
     * @param vlanID Vlan Name for e.g Vlan1, Vlan23 etc (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTopologyL2ByVlanIdCall(String vlanID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/topology/l2/${vlanID}"
            .replaceAll("\\{" + "vlanID" + "\\}", apiClient.escapeString(vlanID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopologyL2ByVlanIdValidateBeforeCall(String vlanID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vlanID' is set
        if (vlanID == null) {
            throw new ApiException("Missing the required parameter 'vlanID' when calling getTopologyL2ByVlanId(Async)");
        }
        

        com.squareup.okhttp.Call call = getTopologyL2ByVlanIdCall(vlanID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getL2Topology
     * This method is used to obtain the Layer 2 topology by Vlan ID
     * @param vlanID Vlan Name for e.g Vlan1, Vlan23 etc (required)
     * @return TopologyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyResult getTopologyL2ByVlanId(String vlanID) throws ApiException {
        ApiResponse<TopologyResult> resp = getTopologyL2ByVlanIdWithHttpInfo(vlanID);
        return resp.getData();
    }

    /**
     * getL2Topology
     * This method is used to obtain the Layer 2 topology by Vlan ID
     * @param vlanID Vlan Name for e.g Vlan1, Vlan23 etc (required)
     * @return ApiResponse&lt;TopologyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyResult> getTopologyL2ByVlanIdWithHttpInfo(String vlanID) throws ApiException {
        com.squareup.okhttp.Call call = getTopologyL2ByVlanIdValidateBeforeCall(vlanID, null, null);
        Type localVarReturnType = new TypeToken<TopologyResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getL2Topology (asynchronously)
     * This method is used to obtain the Layer 2 topology by Vlan ID
     * @param vlanID Vlan Name for e.g Vlan1, Vlan23 etc (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopologyL2ByVlanIdAsync(String vlanID, final ApiCallback<TopologyResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopologyL2ByVlanIdValidateBeforeCall(vlanID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTopologyL3ByTopologyType
     * @param topologyType Type of topology(OSPF,ISIS,etc) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTopologyL3ByTopologyTypeCall(String topologyType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/topology/l3/${topologyType}"
            .replaceAll("\\{" + "topologyType" + "\\}", apiClient.escapeString(topologyType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopologyL3ByTopologyTypeValidateBeforeCall(String topologyType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topologyType' is set
        if (topologyType == null) {
            throw new ApiException("Missing the required parameter 'topologyType' when calling getTopologyL3ByTopologyType(Async)");
        }
        

        com.squareup.okhttp.Call call = getTopologyL3ByTopologyTypeCall(topologyType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getL3Topology
     * This method is used to obtain Layer 3 device topology by routing protocol type
     * @param topologyType Type of topology(OSPF,ISIS,etc) (required)
     * @return TopologyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyResult getTopologyL3ByTopologyType(String topologyType) throws ApiException {
        ApiResponse<TopologyResult> resp = getTopologyL3ByTopologyTypeWithHttpInfo(topologyType);
        return resp.getData();
    }

    /**
     * getL3Topology
     * This method is used to obtain Layer 3 device topology by routing protocol type
     * @param topologyType Type of topology(OSPF,ISIS,etc) (required)
     * @return ApiResponse&lt;TopologyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyResult> getTopologyL3ByTopologyTypeWithHttpInfo(String topologyType) throws ApiException {
        com.squareup.okhttp.Call call = getTopologyL3ByTopologyTypeValidateBeforeCall(topologyType, null, null);
        Type localVarReturnType = new TypeToken<TopologyResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getL3Topology (asynchronously)
     * This method is used to obtain Layer 3 device topology by routing protocol type
     * @param topologyType Type of topology(OSPF,ISIS,etc) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopologyL3ByTopologyTypeAsync(String topologyType, final ApiCallback<TopologyResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopologyL3ByTopologyTypeValidateBeforeCall(topologyType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTopologyPhysicalTopology
     * @param nodeType nodeType (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTopologyPhysicalTopologyCall(String nodeType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/topology/physical-topology";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nodeType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodeType", nodeType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopologyPhysicalTopologyValidateBeforeCall(String nodeType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTopologyPhysicalTopologyCall(nodeType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getPhysicalTopology
     * This method is used to obtain the raw physical topology and filter based on nodeType
     * @param nodeType nodeType (optional)
     * @return TopologyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TopologyResult getTopologyPhysicalTopology(String nodeType) throws ApiException {
        ApiResponse<TopologyResult> resp = getTopologyPhysicalTopologyWithHttpInfo(nodeType);
        return resp.getData();
    }

    /**
     * getPhysicalTopology
     * This method is used to obtain the raw physical topology and filter based on nodeType
     * @param nodeType nodeType (optional)
     * @return ApiResponse&lt;TopologyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TopologyResult> getTopologyPhysicalTopologyWithHttpInfo(String nodeType) throws ApiException {
        com.squareup.okhttp.Call call = getTopologyPhysicalTopologyValidateBeforeCall(nodeType, null, null);
        Type localVarReturnType = new TypeToken<TopologyResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getPhysicalTopology (asynchronously)
     * This method is used to obtain the raw physical topology and filter based on nodeType
     * @param nodeType nodeType (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopologyPhysicalTopologyAsync(String nodeType, final ApiCallback<TopologyResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopologyPhysicalTopologyValidateBeforeCall(nodeType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TopologyResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTopologySiteTopology
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTopologySiteTopologyCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/topology/site-topology";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopologySiteTopologyValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTopologySiteTopologyCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * getSiteTopology
     * This method is used to obtain the site topology
     * @return SiteResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SiteResult getTopologySiteTopology() throws ApiException {
        ApiResponse<SiteResult> resp = getTopologySiteTopologyWithHttpInfo();
        return resp.getData();
    }

    /**
     * getSiteTopology
     * This method is used to obtain the site topology
     * @return ApiResponse&lt;SiteResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SiteResult> getTopologySiteTopologyWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTopologySiteTopologyValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SiteResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getSiteTopology (asynchronously)
     * This method is used to obtain the site topology
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopologySiteTopologyAsync(final ApiCallback<SiteResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopologySiteTopologyValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SiteResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTopologyVlanVlanNames
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTopologyVlanVlanNamesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/topology/vlan/vlan-names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopologyVlanVlanNamesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTopologyVlanVlanNamesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * getVlanNames
     * This method is used to obtain the list of vlan names
     * @return VlanNamesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VlanNamesResult getTopologyVlanVlanNames() throws ApiException {
        ApiResponse<VlanNamesResult> resp = getTopologyVlanVlanNamesWithHttpInfo();
        return resp.getData();
    }

    /**
     * getVlanNames
     * This method is used to obtain the list of vlan names
     * @return ApiResponse&lt;VlanNamesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VlanNamesResult> getTopologyVlanVlanNamesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTopologyVlanVlanNamesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<VlanNamesResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getVlanNames (asynchronously)
     * This method is used to obtain the list of vlan names
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopologyVlanVlanNamesAsync(final ApiCallback<VlanNamesResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopologyVlanVlanNamesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VlanNamesResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
