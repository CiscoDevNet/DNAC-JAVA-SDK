/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.model.CountResult;
import cisco.com.dnac.v1.api.client.model.DiscoveryJobNIOListResult;
import cisco.com.dnac.v1.api.client.model.DiscoveryNIO;
import cisco.com.dnac.v1.api.client.model.DiscoveryNIOListResult;
import cisco.com.dnac.v1.api.client.model.DiscoveryNIOResult;
import cisco.com.dnac.v1.api.client.model.InventoryRequest;
import cisco.com.dnac.v1.api.client.model.NetworkDeviceNIOListResult;
import cisco.com.dnac.v1.api.client.model.SuccessResultList;
import cisco.com.dnac.v1.api.client.model.TaskIdResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DiscoveryApi
 */
@Ignore
public class DiscoveryApiTest {

    private final DiscoveryApi api = new DiscoveryApi();

    
    /**
     * Deletes all discovery
     *
     * Stops all the discoveries and removes them
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDiscoveryTest() throws ApiException {
        TaskIdResult response = api.deleteDiscovery();

        // TODO: test validations
    }
    
    /**
     * Deletes the discovery specified by id
     *
     * Stops the discovery for the given ID and removes it
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDiscoveryByIdTest() throws ApiException {
        String id = null;
        TaskIdResult response = api.deleteDiscoveryById(id);

        // TODO: test validations
    }
    
    /**
     * Deletes the discovery in the given range
     *
     * Stops discovery for the given range and removes them
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDiscoveryRangeTest() throws ApiException {
        Integer startIndex = null;
        Integer recordsToDelete = null;
        TaskIdResult response = api.deleteDiscoveryRange(startIndex, recordsToDelete);

        // TODO: test validations
    }
    
    /**
     * Retrieve autoComplete values from a discovery based on id
     *
     * Gets the autoComplete values from a discovery job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscoveryAutoCompleteByIdTest() throws ApiException {
        String id = null;
        String taskId = null;
        String ipAddress = null;
        String pingStatus = null;
        String snmpStatus = null;
        String cliStatus = null;
        String netconfStatus = null;
        String httpStatus = null;
        SuccessResultList response = api.getDiscoveryAutoCompleteById(id, taskId, ipAddress, pingStatus, snmpStatus, cliStatus, netconfStatus, httpStatus);

        // TODO: test validations
    }
    
    /**
     * Retrieves the discovery specified by id
     *
     * Gets discovery by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscoveryByIdTest() throws ApiException {
        String id = null;
        DiscoveryNIOResult response = api.getDiscoveryById(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves the number of discoveries
     *
     * Gets the count of all available discovery jobs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscoveryCountTest() throws ApiException {
        CountResult response = api.getDiscoveryCount();

        // TODO: test validations
    }
    
    /**
     * Retrieves the list of discovery jobs for the given IP
     *
     * Gets the list of discovery jobs for the given IP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscoveryJobTest() throws ApiException {
        String ipAddress = null;
        Integer offset = null;
        Integer limit = null;
        String name = null;
        DiscoveryJobNIOListResult response = api.getDiscoveryJob(ipAddress, offset, limit, name);

        // TODO: test validations
    }
    
    /**
     * Retrieves list of discovery jobs for the specified discovery id
     *
     * Gets the list of discovery jobs for the given id. The result can optionally be filtered based on IP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscoveryJobByIdTest() throws ApiException {
        String id = null;
        Integer offset = null;
        Integer limit = null;
        String ipAddress = null;
        DiscoveryJobNIOListResult response = api.getDiscoveryJobById(id, offset, limit, ipAddress);

        // TODO: test validations
    }
    
    /**
     * Retrieves the range of network devices discovered for the given discovery
     *
     * Gets the network devices discovered for the given discovery and for the given range. The maximum number of records that could be retrieved is 500
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscoveryNetworkDeviceByIdRangeTest() throws ApiException {
        String id = null;
        Integer startIndex = null;
        Integer recordsToReturn = null;
        String taskId = null;
        NetworkDeviceNIOListResult response = api.getDiscoveryNetworkDeviceByIdRange(id, startIndex, recordsToReturn, taskId);

        // TODO: test validations
    }
    
    /**
     * Retrieves the number of network devices discovered in the discovery specified by id
     *
     * Gets the count of network devices discovered in the given discovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscoveryNetworkDeviceCountByIdTest() throws ApiException {
        String id = null;
        String taskId = null;
        CountResult response = api.getDiscoveryNetworkDeviceCountById(id, taskId);

        // TODO: test validations
    }
    
    /**
     * Retrieves the network devices discovered in the discovery specified by id
     *
     * Gets the network devices discovered for the given discovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscoveryNetworkNetworkDeviceByIdTest() throws ApiException {
        String id = null;
        String taskId = null;
        NetworkDeviceNIOListResult response = api.getDiscoveryNetworkNetworkDeviceById(id, taskId);

        // TODO: test validations
    }
    
    /**
     * Retrieves the discovery in the given range
     *
     * Gets the discovery for the range specified
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscoveryRangeTest() throws ApiException {
        Integer startIndex = null;
        Integer recordsToReturn = null;
        DiscoveryNIOListResult response = api.getDiscoveryRange(startIndex, recordsToReturn);

        // TODO: test validations
    }
    
    /**
     * Retrieve network devices from a discovery on given filters
     *
     * Gets the network devices from a discovery job based on given filters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscoverySummaryByIdTest() throws ApiException {
        String id = null;
        String taskId = null;
        String sortBy = null;
        String sortOrder = null;
        List<String> ipAddress = null;
        List<String> pingStatus = null;
        List<String> snmpStatus = null;
        List<String> cliStatus = null;
        List<String> netconfStatus = null;
        List<String> httpStatus = null;
        CountResult response = api.getDiscoverySummaryById(id, taskId, sortBy, sortOrder, ipAddress, pingStatus, snmpStatus, cliStatus, netconfStatus, httpStatus);

        // TODO: test validations
    }
    
    /**
     * Starts a new discovery process and returns a task-id
     *
     * Initiates discovery with the given parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postDiscoveryTest() throws ApiException {
        InventoryRequest request = null;
        TaskIdResult response = api.postDiscovery(request);

        // TODO: test validations
    }
    
    /**
     * Updates an existing discovery specified by id - only for starting/stopping the discovery
     *
     * Stops or starts an existing discovery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putDiscoveryTest() throws ApiException {
        DiscoveryNIO request = null;
        TaskIdResult response = api.putDiscovery(request);

        // TODO: test validations
    }
    
}
