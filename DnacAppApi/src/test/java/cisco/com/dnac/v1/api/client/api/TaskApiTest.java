/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.model.CountResult;
import cisco.com.dnac.v1.api.client.model.TaskDTOListResponse;
import cisco.com.dnac.v1.api.client.model.TaskDTOResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskApi
 */
@Ignore
public class TaskApiTest {

    private final TaskApi api = new TaskApi();

    
    /**
     * Get filtered tasks
     *
     * This method is used to retrieve task(s) based on various filters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskTest() throws ApiException {
        String startTime = null;
        String endTime = null;
        String data = null;
        String errorCode = null;
        String serviceType = null;
        String username = null;
        String progress = null;
        String isError = null;
        String failureReason = null;
        String parentId = null;
        String offset = null;
        String limit = null;
        String sortBy = null;
        String order = null;
        TaskDTOListResponse response = api.getTask(startTime, endTime, data, errorCode, serviceType, username, progress, isError, failureReason, parentId, offset, limit, sortBy, order);

        // TODO: test validations
    }
    
    /**
     * getTruststoreFileCount
     *
     * This method is used to retrieve a task based on their id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskByTaskIdTest() throws ApiException {
        String taskId = null;
        TaskDTOResponse response = api.getTaskByTaskId(taskId);

        // TODO: test validations
    }
    
    /**
     * Get task count
     *
     * This method is used to retrieve task count
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskCountTest() throws ApiException {
        String startTime = null;
        String endTime = null;
        String data = null;
        String errorCode = null;
        String serviceType = null;
        String username = null;
        String progress = null;
        String isError = null;
        String failureReason = null;
        String parentId = null;
        CountResult response = api.getTaskCount(startTime, endTime, data, errorCode, serviceType, username, progress, isError, failureReason, parentId);

        // TODO: test validations
    }
    
    /**
     * getTaskByOperationId
     *
     * This method is used to find root tasks assoicated to an operationid 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskOperationByOperationIdRangeTest() throws ApiException {
        String operationId = null;
        Integer offset = null;
        Integer limit = null;
        TaskDTOListResponse response = api.getTaskOperationByOperationIdRange(operationId, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Get Task Tree
     *
     * This method is used to retrieve a task with its children tasks based on their id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskTreeByTaskIdTest() throws ApiException {
        String taskId = null;
        TaskDTOListResponse response = api.getTaskTreeByTaskId(taskId);

        // TODO: test validations
    }
    
}
