/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiException;
import cisco.com.dnac.v1.api.client.model.AddVirtualAccountResponse;
import cisco.com.dnac.v1.api.client.model.ClaimDeviceRequest;
import cisco.com.dnac.v1.api.client.model.ClaimDevicesResponse;
import cisco.com.dnac.v1.api.client.model.CreateDeviceResponse;
import cisco.com.dnac.v1.api.client.model.CreateWorkflowResponse;
import cisco.com.dnac.v1.api.client.model.DeleteDeviceResponse;
import cisco.com.dnac.v1.api.client.model.DeleteWorkflowResponse;
import cisco.com.dnac.v1.api.client.model.DeregisterVirtualAccountResponse;
import cisco.com.dnac.v1.api.client.model.Device;
import cisco.com.dnac.v1.api.client.model.EditPnPServerProfileResponse;
import cisco.com.dnac.v1.api.client.model.GetCategorizedDeviceCountResponse;
import cisco.com.dnac.v1.api.client.model.GetDeviceByIDResponse;
import cisco.com.dnac.v1.api.client.model.GetDeviceCountResponse;
import cisco.com.dnac.v1.api.client.model.GetDeviceHistoryResponse;
import cisco.com.dnac.v1.api.client.model.GetSmartAccountListResponse;
import cisco.com.dnac.v1.api.client.model.GetSyncResultForVirtualAccountResponse;
import cisco.com.dnac.v1.api.client.model.GetVirtualAccountListResponse;
import cisco.com.dnac.v1.api.client.model.GetWorkflowCountResponse;
import cisco.com.dnac.v1.api.client.model.GetWorkflowResponse;
import cisco.com.dnac.v1.api.client.model.ImportManyDevicesResponse;
import cisco.com.dnac.v1.api.client.model.ListDevicesResponse;
import cisco.com.dnac.v1.api.client.model.ListWorkflowsResponse;
import cisco.com.dnac.v1.api.client.model.ProvisionDeviceResponse;
import cisco.com.dnac.v1.api.client.model.PushProvisionRequest;
import cisco.com.dnac.v1.api.client.model.ResetDeviceResponse;
import cisco.com.dnac.v1.api.client.model.ResetRequest;
import cisco.com.dnac.v1.api.client.model.SAVAMapping;
import cisco.com.dnac.v1.api.client.model.Settings;
import cisco.com.dnac.v1.api.client.model.SyncVirtualAccountDevicesResponse;
import cisco.com.dnac.v1.api.client.model.UnClaimDeviceResponse;
import cisco.com.dnac.v1.api.client.model.UnclaimRequest;
import cisco.com.dnac.v1.api.client.model.UpdateDeviceResponse;
import cisco.com.dnac.v1.api.client.model.UpdateSettingsResponse;
import cisco.com.dnac.v1.api.client.model.UpdateWorkflowResponse;
import cisco.com.dnac.v1.api.client.model.ViewSettingsResponse;
import cisco.com.dnac.v1.api.client.model.Workflow;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OnboardingApi
 */
@Ignore
public class OnboardingApiTest {

    private final OnboardingApi api = new OnboardingApi();

    
    /**
     * Delete Device
     *
     * This API is used to delete the specified device from the database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOnboardingPnpDeviceByIdTest() throws ApiException {
        String id = null;
        DeleteDeviceResponse response = api.deleteOnboardingPnpDeviceById(id);

        // TODO: test validations
    }
    
    /**
     * Deregister Virtual Account
     *
     * This API is used to deregister the specified smart account &amp; virtual account info and the associated device information from the PnP System &amp; database. The devices associated with the deregistered virtual account are removed from the PnP database as well. The deregistered smart &amp; virtual account info is returned in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOnboardingPnpSettingsVacctTest() throws ApiException {
        String domain = null;
        String name = null;
        DeregisterVirtualAccountResponse response = api.deleteOnboardingPnpSettingsVacct(domain, name);

        // TODO: test validations
    }
    
    /**
     * Delete Workflow
     *
     * Delete a workflow given its id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOnboardingPnpWorkflowByIdTest() throws ApiException {
        String id = null;
        DeleteWorkflowResponse response = api.deleteOnboardingPnpWorkflowById(id);

        // TODO: test validations
    }
    
    /**
     * List devices
     *
     * This API is used to get the list of devices that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 devices.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpDeviceTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sort = null;
        String sortOrder = null;
        List<String> serialNumber = null;
        List<String> state = null;
        List<String> onbState = null;
        List<String> cmState = null;
        List<String> name = null;
        List<String> pid = null;
        List<String> source = null;
        List<String> projectId = null;
        List<String> workflowId = null;
        List<String> projectName = null;
        List<String> workflowName = null;
        List<String> smartAccountId = null;
        List<String> virtualAccountId = null;
        Boolean lastContact = null;
        ListDevicesResponse response = api.getOnboardingPnpDevice(limit, offset, sort, sortOrder, serialNumber, state, onbState, cmState, name, pid, source, projectId, workflowId, projectName, workflowName, smartAccountId, virtualAccountId, lastContact);

        // TODO: test validations
    }
    
    /**
     * Get Device by ID
     *
     * Get device details of the device with input device id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpDeviceByIdTest() throws ApiException {
        String id = null;
        GetDeviceByIDResponse response = api.getOnboardingPnpDeviceById(id);

        // TODO: test validations
    }
    
    /**
     * Get Device Count
     *
     * This API is used to get the number of the devices matching provided filters. This is useful for pageination.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpDeviceCcountTest() throws ApiException {
        List<String> serialNumber = null;
        List<String> state = null;
        List<String> onbState = null;
        List<String> cmState = null;
        List<String> name = null;
        List<String> pid = null;
        List<String> source = null;
        List<String> projectId = null;
        List<String> workflowId = null;
        List<String> projectName = null;
        List<String> workflowName = null;
        List<String> smartAccountId = null;
        List<String> virtualAccountId = null;
        Boolean lastContact = null;
        GetDeviceCountResponse response = api.getOnboardingPnpDeviceCcount(serialNumber, state, onbState, cmState, name, pid, source, projectId, workflowId, projectName, workflowName, smartAccountId, virtualAccountId, lastContact);

        // TODO: test validations
    }
    
    /**
     * Get Categorized Device Count
     *
     * Get Categorized Device Count
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpDeviceDashboardCountTest() throws ApiException {
        String category = null;
        GetCategorizedDeviceCountResponse response = api.getOnboardingPnpDeviceDashboardCount(category);

        // TODO: test validations
    }
    
    /**
     * Get Device History
     *
     * Retrieves history for a specific device. Serial Number is a required parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpDeviceHistoryTest() throws ApiException {
        String serialNumber = null;
        List<String> sort = null;
        String sortOrder = null;
        GetDeviceHistoryResponse response = api.getOnboardingPnpDeviceHistory(serialNumber, sort, sortOrder);

        // TODO: test validations
    }
    
    /**
     * Get Sync Result for Virtual Account
     *
     * This API is used to get the device sync info from the given smart account &amp; virtual account with the PnP database. The SAVAMapping object which has the list of devices synced since the last sync is returned in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameTest() throws ApiException {
        String domain = null;
        String name = null;
        GetSyncResultForVirtualAccountResponse response = api.getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName(domain, name);

        // TODO: test validations
    }
    
    /**
     * View Settings
     *
     * Get this user&#39;s list of global PnP settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpSettingsTest() throws ApiException {
        ViewSettingsResponse response = api.getOnboardingPnpSettings();

        // TODO: test validations
    }
    
    /**
     * Get Smart Account List
     *
     * This API is used to get list of Smart Accounts. The list of smart account domains is returned in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpSettingsSacctTest() throws ApiException {
        GetSmartAccountListResponse response = api.getOnboardingPnpSettingsSacct();

        // TODO: test validations
    }
    
    /**
     * Get Virtual Account List
     *
     * This API is used to get list of Virtual Accounts associated with the specified Smart Account. The list of virtual account names is returned in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpSettingsSacctVacctByDomainTest() throws ApiException {
        String domain = null;
        GetVirtualAccountListResponse response = api.getOnboardingPnpSettingsSacctVacctByDomain(domain);

        // TODO: test validations
    }
    
    /**
     * List Workflows
     *
     * This API is used to get the list of workflows that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 workflows.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpWorkflowTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> sort = null;
        String sortOrder = null;
        List<String> type = null;
        List<String> name = null;
        ListWorkflowsResponse response = api.getOnboardingPnpWorkflow(limit, offset, sort, sortOrder, type, name);

        // TODO: test validations
    }
    
    /**
     * Get Workflow
     *
     * Get a workflow given its id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpWorkflowByIdTest() throws ApiException {
        String id = null;
        GetWorkflowResponse response = api.getOnboardingPnpWorkflowById(id);

        // TODO: test validations
    }
    
    /**
     * Get Workflow Count
     *
     * This API is used to get the number of the workflows.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOnboardingPnpWorkflowCountTest() throws ApiException {
        List<String> name = null;
        GetWorkflowCountResponse response = api.getOnboardingPnpWorkflowCount(name);

        // TODO: test validations
    }
    
    /**
     * Create Device
     *
     * This API is used to add a Planned device to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOnboardingPnpDeviceTest() throws ApiException {
        Device request = null;
        CreateDeviceResponse response = api.postOnboardingPnpDevice(request);

        // TODO: test validations
    }
    
    /**
     * Claim Device(s)
     *
     * This API is used to assign a project &amp; workflow (i.e. claim) one of more devices.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOnboardingPnpDeviceClaimTest() throws ApiException {
        ClaimDeviceRequest request = null;
        ClaimDevicesResponse response = api.postOnboardingPnpDeviceClaim(request);

        // TODO: test validations
    }
    
    /**
     * Import Many Devices
     *
     * This API is used to import a list of Planned devices to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOnboardingPnpDeviceImportTest() throws ApiException {
        Device request = null;
        ImportManyDevicesResponse response = api.postOnboardingPnpDeviceImport(request);

        // TODO: test validations
    }
    
    /**
     * Provision Device
     *
     * This API is used push one or more devices to Provisoned state and add them to inventory.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOnboardingPnpDeviceProvisionTest() throws ApiException {
        PushProvisionRequest request = null;
        ProvisionDeviceResponse response = api.postOnboardingPnpDeviceProvision(request);

        // TODO: test validations
    }
    
    /**
     * Reset Device
     *
     * This API is used to recover a device from a Workflow Execution Error state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOnboardingPnpDeviceResetTest() throws ApiException {
        ResetRequest request = null;
        ResetDeviceResponse response = api.postOnboardingPnpDeviceReset(request);

        // TODO: test validations
    }
    
    /**
     * Un-Claim Device
     *
     * This API is used to unassign the project and workflow from one or more device.A device can only be unclaimed if it has not begun provisioning.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOnboardingPnpDeviceUnclaimTest() throws ApiException {
        UnclaimRequest request = null;
        UnClaimDeviceResponse response = api.postOnboardingPnpDeviceUnclaim(request);

        // TODO: test validations
    }
    
    /**
     * Sync Virtual Account Devices
     *
     * This API is used to sync the device info from the given smart account &amp; virtual account with the PnP database. The list of synced devices is returned in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOnboardingPnpDeviceVacctSyncTest() throws ApiException {
        SAVAMapping request = null;
        SyncVirtualAccountDevicesResponse response = api.postOnboardingPnpDeviceVacctSync(request);

        // TODO: test validations
    }
    
    /**
     * Add Virtual Account
     *
     * This API is used to register a Smart Account, Virtual Account and the relevant server profile info with the PnP System &amp; database. The devices present in the registered virtual account are synced with the PnP database as well. The new profile is returned in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOnboardingPnpSettingsSavacctTest() throws ApiException {
        SAVAMapping request = null;
        AddVirtualAccountResponse response = api.postOnboardingPnpSettingsSavacct(request);

        // TODO: test validations
    }
    
    /**
     * Create Workflow
     *
     * This API is used to add a PnP Workflow along with the relevant tasks in the workflow into the PnP database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOnboardingPnpWorkflowTest() throws ApiException {
        Workflow request = null;
        CreateWorkflowResponse response = api.postOnboardingPnpWorkflow(request);

        // TODO: test validations
    }
    
    /**
     * Update Device
     *
     * This API is used to update device details of a device that exists in the PnP database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putOnboardingPnpDeviceByIdTest() throws ApiException {
        Device request = null;
        String id = null;
        UpdateDeviceResponse response = api.putOnboardingPnpDeviceById(request, id);

        // TODO: test validations
    }
    
    /**
     * Update Settings
     *
     * Change this user&#39;s list of global PnP settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putOnboardingPnpSettingsTest() throws ApiException {
        Settings request = null;
        UpdateSettingsResponse response = api.putOnboardingPnpSettings(request);

        // TODO: test validations
    }
    
    /**
     * Edit PnP Server Profile
     *
     * This API is used to edit the PnP Server profile in a registered Virtual Account in the PnP database.The edited smart &amp; virtual account info is returned in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putOnboardingPnpSettingsSavacctTest() throws ApiException {
        SAVAMapping request = null;
        EditPnPServerProfileResponse response = api.putOnboardingPnpSettingsSavacct(request);

        // TODO: test validations
    }
    
    /**
     * Update Workflow
     *
     * Update an existing workflow
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putOnboardingPnpWorkflowByIdTest() throws ApiException {
        Workflow request = null;
        String id = null;
        UpdateWorkflowResponse response = api.putOnboardingPnpWorkflowById(request, id);

        // TODO: test validations
    }
    
}
