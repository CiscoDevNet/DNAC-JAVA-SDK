/*
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cisco.com.dnac.v1.api.client.api;

import cisco.com.dnac.v1.api.client.ApiException;
import java.math.BigDecimal;
import cisco.com.dnac.v1.api.client.model.ClientDetailResponse;
import cisco.com.dnac.v1.api.client.model.ClientHealthResponse;
import cisco.com.dnac.v1.api.client.model.CreateSSIDRequest;
import cisco.com.dnac.v1.api.client.model.CreateSSIDResponse;
import cisco.com.dnac.v1.api.client.model.DeleteSSIDResponse;
import cisco.com.dnac.v1.api.client.model.NetworkDeviceDetailResponse;
import cisco.com.dnac.v1.api.client.model.SiteHierarchyResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DnaIntentApi
 */
@Ignore
public class DnaIntentApiTest {

    private final DnaIntentApi api = new DnaIntentApi();

    
    /**
     * Delete Application
     *
     * Invoke the API to delete a custom application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnaIntentDeleteApplicationTest() throws ApiException {
        String applicationId = null;
        Boolean runsync = null;
        BigDecimal timeout = null;
        api.deleteDnaIntentDeleteApplication(applicationId, runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Delete Application Set
     *
     * Invoke the API to delete a custom application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnaIntentDeleteApplicationSetTest() throws ApiException {
        String applicationSetId = null;
        Boolean runsync = null;
        BigDecimal timeout = null;
        api.deleteDnaIntentDeleteApplicationSet(applicationSetId, runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Delete SSID
     *
     * De-provision WLC, also removes wireless network profile, SSID and dynamic interface
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDnaIntentDeleteSsidTest() throws ApiException {
        String deviceName = null;
        String wirelessNetworkProfileName = null;
        String ssidName = null;
        String interfaceName = null;
        Boolean runsync = null;
        BigDecimal timeout = null;
        DeleteSSIDResponse response = api.deleteDnaIntentDeleteSsid(deviceName, wirelessNetworkProfileName, ssidName, interfaceName, runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Get Applications Count
     *
     * Invoke the API to return the number of defined applications
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnaIntentApplicationCountTest() throws ApiException {
        String count = null;
        Boolean runsync = null;
        BigDecimal timeout = null;
        api.getDnaIntentApplicationCount(count, runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Get Application Policies
     *
     * Invoke the API to return all (or specific) application-policy(ies)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnaIntentApplicationPolicyTest() throws ApiException {
        Boolean runsync = null;
        BigDecimal timeout = null;
        BigDecimal offset = null;
        BigDecimal limit = null;
        String applicationPolicyNamespace = null;
        api.getDnaIntentApplicationPolicy(runsync, timeout, offset, limit, applicationPolicyNamespace);

        // TODO: test validations
    }
    
    /**
     * Get Application Sets Count
     *
     * Invoke the API to return the number of defined application sets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnaIntentApplicationSetCountTest() throws ApiException {
        String count = null;
        Boolean runsync = null;
        BigDecimal timeout = null;
        api.getDnaIntentApplicationSetCount(count, runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Get Application Sets
     *
     * Invoke the API to return all (or specific) defined application-set(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnaIntentApplicationSetsTest() throws ApiException {
        Boolean runsync = null;
        BigDecimal timeout = null;
        BigDecimal offset = null;
        BigDecimal limit = null;
        String applicationSetName = null;
        api.getDnaIntentApplicationSets(runsync, timeout, offset, limit, applicationSetName);

        // TODO: test validations
    }
    
    /**
     * Get Applications
     *
     * Invoke the API to return the list of all (or specific) defined application(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnaIntentApplicationsTest() throws ApiException {
        Boolean runsync = null;
        BigDecimal timeout = null;
        BigDecimal offset = null;
        BigDecimal limit = null;
        String applicationName = null;
        api.getDnaIntentApplications(runsync, timeout, offset, limit, applicationName);

        // TODO: test validations
    }
    
    /**
     * Client Detail
     *
     * Get Client Details for a single client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnaIntentClieDetailTest() throws ApiException {
        String timestamp = null;
        String macAddress = null;
        Boolean runsync = null;
        BigDecimal timeout = null;
        ClientDetailResponse response = api.getDnaIntentClieDetail(timestamp, macAddress, runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Client Health
     *
     * Get overall Client Health along with beak down on categories of wired and wireless
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnaIntentClientHealthTest() throws ApiException {
        String startTime = null;
        String endTime = null;
        Boolean runsync = null;
        BigDecimal timeout = null;
        ClientHealthResponse response = api.getDnaIntentClientHealth(startTime, endTime, runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Network Device Detail
     *
     * Get Network Device Detail
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnaIntentNetworkDeviceDetailTest() throws ApiException {
        Boolean runsync = null;
        BigDecimal timeout = null;
        String timestamp = null;
        String searchBy = null;
        String identifier = null;
        NetworkDeviceDetailResponse response = api.getDnaIntentNetworkDeviceDetail(runsync, timeout, timestamp, searchBy, identifier);

        // TODO: test validations
    }
    
    /**
     * Network Health
     *
     * Network Devices and their health by category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnaIntentNetworkHealthTest() throws ApiException {
        String startTime = null;
        String endTime = null;
        Boolean runsync = null;
        BigDecimal timeout = null;
        api.getDnaIntentNetworkHealth(startTime, endTime, runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Site Hierarchy
     *
     * Site Hierarchy along with health Info
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDnaIntentSiteHierarchyTest() throws ApiException {
        String timestamp = null;
        Boolean runsync = null;
        BigDecimal timeout = null;
        SiteHierarchyResponse response = api.getDnaIntentSiteHierarchy(timestamp, runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Post Application
     *
     * Invoke the API to create a custom application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postDnaIntentCreateApplicationTest() throws ApiException {
        Boolean runsync = null;
        BigDecimal timeout = null;
        api.postDnaIntentCreateApplication(runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Post Application Policy Intent
     *
     * Invoke the API to create, modify or delete an application-policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postDnaIntentCreateApplicationPolicyTest() throws ApiException {
        Boolean runsync = null;
        BigDecimal timeout = null;
        api.postDnaIntentCreateApplicationPolicy(runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Post Application Set
     *
     * Invoke the API to create a custom application set
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postDnaIntentCreateApplicationSetTest() throws ApiException {
        Boolean runsync = null;
        BigDecimal timeout = null;
        api.postDnaIntentCreateApplicationSet(runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Create SSID
     *
     * Creates non fabric enterprise SSID, dynamic interface, Wireless Network Profile and provisions WLC and AP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postDnaIntentCreateSsidTest() throws ApiException {
        CreateSSIDRequest request = null;
        Boolean runsync = null;
        BigDecimal timeout = null;
        CreateSSIDResponse response = api.postDnaIntentCreateSsid(request, runsync, timeout);

        // TODO: test validations
    }
    
    /**
     * Edit Application
     *
     * Invoke the API to create a custom application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putDnaIntentUpdateApplicationTest() throws ApiException {
        Boolean runsync = null;
        BigDecimal timeout = null;
        api.putDnaIntentUpdateApplication(runsync, timeout);

        // TODO: test validations
    }
    
}
